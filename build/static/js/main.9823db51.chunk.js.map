{"version":3,"sources":["registerServiceWorker.js","styles/index.less","reducers/rootReducer.js","reducers/messagesReducer.js","reducers/sessionReducer.js","reducers/categoryReducer.js","reducers/interactiveReducer.js","reducers/sequenceReducer.js","reducers/qualityReducer.js","reducers/systemReducer.js","reducers/sessCateReducer.js","reducers/sessInterReducer.js","reducers/sessSeqReducer.js","reducers/sessQualReducer.js","reducers/resultReducer.js","reducers/allReducer.js","reducers/listeningReducer.js","reducers/modeReducer.js","reducers/helpReducer.js","reducers/crowdReducer.js","actions/messageActions.js","util/speechPromises.js","sagas/microphoneSaga.js","actions/microphoneActions.js","configs.js","sagas/messagesSaga.js","sagas/rootSaga.js","util/localStorage.js","store/configureStore.js","components/Home.js","components/Sider.js","actions/sessionActions.js","actions/crowdAction.js","components/requesters/template/interactive/InteractiveTemplate.js","components/workers/QuestionList.js","components/workers/AgreeModal.js","components/requesters/template/System.js","components/workers/style.js","components/workers/showInteractiveTask.js","components/workers/WorkerInteractive.js","components/requesters/template/Preview.js","components/requesters/template/QuestionList.js","components/requesters/template/PreviewButton.js","components/requesters/template/ColorPicker.js","components/requesters/template/FontPicker.js","components/requesters/template/Configure.js","components/requesters/template/interactive/System.js","components/requesters/template/interactive/InteractiveConfigure.js","components/requesters/template/interactive/Results.js","components/requesters/template/DataStatistics.js","components/requesters/template/interactive/InteractiveDataStatistics.js","components/requesters/template/category/CategoryQuality.js","components/requesters/template/interactive/InteractiveQuality.js","components/requesters/template/interactive/InteractivePayment.js","components/requesters/template/interactive/InteractiveFeedback.js","components/requesters/template/interactive/Interactive.js","actions/interactiveActions.js","components/requesters/template/category/CategoryTemplate.js","components/requesters/template/category/CategoryConfigure.js","components/requesters/template/category/CategoryResult.js","components/requesters/template/category/CategoryPayment.js","components/requesters/template/category/CategoryFeedback.js","components/requesters/template/category/Category.js","components/requesters/template/sequence/SequenceTemplate.js","components/requesters/template/sequence/SequenceConfigure.js","components/requesters/template/sequence/SequenceResult.js","components/requesters/template/sequence/SequenceQuality.js","components/requesters/template/sequence/SequencePayment.js","components/requesters/template/sequence/SequenceFeedback.js","components/requesters/template/sequence/Sequence.js","components/requesters/template/quality/QualityTemplate.js","components/requesters/template/quality/QualityConfigure.js","components/requesters/template/quality/QualityResult.js","components/requesters/template/quality/QualityQuality.js","components/requesters/template/quality/QualityPayment.js","components/requesters/template/quality/QualityFeedback.js","components/requesters/template/quality/Quality.js","components/NewProject.js","components/ProjectList.js","components/help/HelpInteractive.js","components/requesters/template/interactive/InteractiveProject.js","components/help/HelpCategory.js","components/requesters/template/category/CategoryProject.js","components/help/HelpSequence.js","components/requesters/template/sequence/SequenceProject.js","components/help/HelpQuality.js","components/requesters/template/quality/QualityProject.js","components/workers/Worker.js","components/NewSystem.js","components/help/HelpConnectSystem.js","components/AddSystem.js","actions/systemActions.js","components/People.js","components/ml/cluster.js","components/RejectionTemplate.js","components/Resources.js","components/GeneralTaskWalkthrough.js","components/AddSystemWalkthrough.js","components/InteractiveWalkthrough.js","components/QualityWalkthrough.js","components/Walkthrough.js","components/Layout.js","components/workers/WorkerCategory.js","components/workers/TextEditor.js","components/workers/WorkerSequence.js","components/workers/WorkerQuality.js","components/chat/Help.js","components/chat/Review.js","components/chat/Message.js","components/chat/Messages.js","components/chat/TextInput.js","components/chat/Microphone.js","components/chat/Chat.js","index.js","components/workers/getColor.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","combineReducers","messages","action","type","concat","text","time","received","image","candidate","session","category","interactive","sequence","quality","system","session_category","session_interactive","session_sequence","session_quality","result","dialog","survey","all","listening","mode","help","crowd","sendMessage","task_id","role","worker_id","terminal","sessionId","slots","addMessage","listen","recognition","Promise","resolve","reject","onerror","onresult","event","onnomatch","e","start","microphoneSaga","synth","take","cancel","webkitSpeechRecognition","lang","interim","race","call","results","transcript","put","Date","now","stop","serverUrl","process","clientUrl","messagesSaga","sessionData","sid","response","axios","post","data","msg","includes","takeEvery","sendMessageSaga","sendFeedbackSaga","receiveMessageSaga","messageData","message","display","display_messages","undefined","SpeechSynthesisUtterance","replace","fork","logMessage","userId","taskID","subId","userID","name_of_dialog","nameOfDialog","utter","feedback","rootSaga","newSystem","newDataQuery","newSession","deleteProject","getResult","deleteResult","combineData","setInteractive","params","queryString","parse","search","option","ip","speechSynthesis","List","url","createdAt","password","toString","toUpperCase","get","task_type","submit_id","persistedState","loadState","serializedState","localStorage","getItem","JSON","Home","React","Component","constructor","props","super","this","dialogs","render","_jsxs","children","_jsx","href","target","rel","SubMenu","Menu","Sider","navItems1","to","title","icon","HomeOutlined","PlusCircleOutlined","navItems2","MessageOutlined","SelectOutlined","TagsOutlined","SafetyOutlined","navItems3","BookOutlined","QuestionCircleOutlined","Layout","trigger","collapsible","collapsed","width","className","style","theme","lineHeight","defaultSelectedKeys","selectedKey","map","_ref","Item","fontSize","Link","flexDirection","alignItems","FileTextOutlined","_ref2","_ref3","loadData","new_project_data","TabPane","Tabs","FormItem","Form","InteractiveTemplate","showDrawer","setState","visible","onClose","generate","preventDefault","form","validateFields","err","values","username","showlink","componentDidMount","thisstate","getFieldDecorator","Button","float","onClick","EditOutlined","Drawer","placement","maskClosable","height","overflow","paddingBottom","Row","gutter","defaultActiveKey","tab","generic_introduction","generic_instructions","onSubmit","labelCol","xs","span","sm","wrapperCol","Input","TextArea","placeholder","marginRight","autoSize","minRows","maxRows","htmlType","_id","position","bottom","borderTop","padding","textAlign","left","background","borderRadius","create","QuestionList","questions","borderStyle","border","margin","question","i","_renderQuestion","index","systemNames","fieldPrefix","scale","likertScale","likerts","Array","fill","formItemLayout","colon","formItemLayout2","radioStyle","paddingStyle","initialValue","rules","required","Rate","count","tooltips","value","defaultValue","Radio","Group","options","content","name","showFeedbackQuestion","show","color","Markdown","enableMarkdown","ReactMarkdown","_Fragment","ConsentFormInner","close","handleReject","Modal","warning","zIndex","handleAccept","onAccept","nextPage","page","prevPage","_showPageButton","consent","download","danger","_showAcceptRejectButton","closable","_makePages","pages","push","src","checkboxes","length","checkbox","key","valuePropName","validateTrigger","transform","Checkbox","initState","forceShow","footer","bodyStyle","flexGrow","centered","ConsentForm","getStyle","stateStyle","styles","global","spacing","instruction","example","fontFamily","context","tabTitle","arguments","section","Object","entries","val","indexOf","parseInt","marginTop","marginBottom","Math","max","_renderCardName","cardName","item","_renderCardItems","split","x","_buttonContent","Cons","Book","Reqs","renderTasksButton","taskList","Col","Popover","Dom","_domainTask","Panel","Collapse","confirm","shuffle","array","temporaryValue","randomIndex","currentIndex","floor","random","getquestion","t","id","fetch","json","questionSurveys","questionFeedbacks","questionSystems","emb","Output","shift","body","forEach","temp","end","feedbackType","preprocess","lists2Questions","pollquestion","typeofpoll","radio","counterexample","addKeys","feedbackradio","names","instructions","queries","types","exampless","counterexampless","_addKey","filter","systems","examples","isArray","counterexamples","lists2Systems","subpoll","subtypeofpoll","dialog_examples","dialog_counterexamples","sessionStorage","setItem","stringify","sort","speech","interface","intro","timepay","payment","systemArr","requirements","hasFeedbackQuestion","submitToMturk","hasProblem","URLSearchParams","foo","submitURL","path","method","document","createElement","setAttribute","_submit_function_","submit","appendChild","submitFORM","WorkerInteractive","ID","Id","task","current_task","tasks","talk_to_system","list","agent","chaturl","current_system","isSubmit","system_time","handleSubmit","v","headers","Accept","times","submissiontime","success","dialogueSystems","promises","_p","isPassed","problems","submissionProblem","test","onOk","onCancel","problemPromopt","problem","join","reload","openInstructions","activeKey","changeTab","showSystemExamples","lastSystem","table","systemName","columns","dataIndex","_renderExamples","Table","dataSource","pagination","size","answer","isdone","current","meaning","exitpoll","radios","dialogInstruction","Iframe","allowFullScreen","shape","block","Alert","description","SmileOutlined","showIcon","CloseCircleOutlined","onChange","header","Card","bordered","headStyle","s","backgroundColor","offset","record","explain","Tooltip","connect","PreviewConsent","showPreview","disabled","PreviewExample","rowKey","PreviewQuestionInner","PreviewQuestion","optionss","newX","k","_addQuestion","addByKey","rootKey","newQuestion","formItemLayoutWithOutLabel","styleWarning","_renderQuestionSection","PlusOutlined","textAddQuestion","listStyle","_renderQuestionBody","Divider","fieldNameQuestion","String","slice","handleChange","fieldName","updateByKey","class","textInstruction","MinusCircleOutlined","removeByKey","_showQuestionType","label","questionFieldLabel","questionHelpText","whitespace","placeholderQuestion","DynamicItems","rootKeys","items","textHelp","textAdd","placeholderOption","InputNumber","min","step","noPreview","placeholderExample","placeholderExplain","recommendedNumber","recommendedMinNumber","minimumNumber","placeholderCounterexample","questionTypes","explanation","SurveyQuestionList","fields","ExclamationCircleOutlined","_showDynamicInputs","keys","removeExample","field","fieldSuffix","handleChangeExp","PreviewButton","open","ColorPicker","handleClick","visiblePicker","componentDidUpdate","prevProps","hex","setFieldsValue","colorStyle","previewText","showPicker","handleColorChange","popover","inner","SketchPicker","onChangeComplete","FontPicker","colorFieldName","path2Name","handleColorInputChange","stylePreviewText","prefix","FontColorsOutlined","marginLeft","FontSizeOutlined","n","LineHeightOutlined","Select","family","font","Option","paddingLeft","paddingRight","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","handleColorPickerChange","convoLength","Configure","_this","traverseAndCopyByKey","shallowCopy","assign","node","child","toAdd","newKey","indexToRemove","keyToRemove","splice","_onChangeTime","recommendedPayment","calcRecommendedPayment","_onChangeTaskNo","noHits","calcNoHits","nAssignment","nUnit","_onChangeAssignmentNo","url_dialog_system","deploy","sys_index","survey_index","loading","makeProps","prevState","lastModifiedDate","configRevision","resetFields","prop","utterance","sessionFeedbacks","feedbacks","_","handlePdfInputChange","file","pdf","handleDeploy","handleUploadConfig","config","except","this_","saveURL","taskName","_showGeneralConfig","FileReaderInput","as","UploadOutlined","Switch","parseFloat","isNaN","_showAnnotationConfig","textTask","dataLength","helpTextNAnnotation","_showQualityControlConfig","nUnitDuplicated","nUnitGolden","_showDataUpload","_showConsentConfig","_showSurveyConfig","instructionSurvey","helpTextSurveyQuestion","_showFeedbackConfig","_showAppearanceConfig","textStyleExtras","textStyles","textStyle","_showButtons","_saveAsJSON","_showTemplate","blob","Blob","saveAs","_showVisibility","toFixed","nconvo","System","addSystem","fieldNameSystem","_showSystem","hasFeedback","agents","l","helpText","InteractiveConfigure","handleFileInputChange","targetStateProperty","data1","lines","dic","interactive_task_data","Spin","_showDataConfig","_showSystemConfig","golden","columns_dialog","hideOnSinglePage","q","instructionSystem","mapDispatchToProps","Results","viewdialog","handleOk","handleCancel","system_survey","overall_survey","system_survey_type","overall_survey_type","index2","Name","Q","A","Type","new_system_survey","new_overall_survey","avg_rate","survey_question","detail","num","rating","int","data2","Message","system_survey_detail_col","overall_survey_detail_col","columns_dialog_sub","final_survey","ChatFeed","hasInputField","showSenderName","bubblesCentered","bubbleStyles","chatbubble","DownloadOutlined","expandedRowRender","DataStatistics","agreements","getResults","getStatistics","setInterval","res","propertyNameQuestions","dataAgreements","urlResult","makeDataSource","mean","metric","reduce","a","b","agree","fixedAgree","units","makeSubDataSource","indexQuestion","id2Unit","unit","idUnit","entry","subColumns","hasCohensKappa","c","expandIcon","expanded","onExpand","MinusSquareOutlined","PlusSquareOutlined","showCohensColorCode","renderWithColor","score","InteractiveDataStatistics","DicUser","getWorkerQuality","workerUnits","annotation","annotations","idWorker","submissionID","workerQuality","abnormal","patternPeriod","denominator","numerator","gaussian","arg","total","getMean","Number","m","std","sqrt","sq","pow","getSD","p","PI","finallist","z","E","y","getDetail","avg","detailResults","arr","results_detail","cost","buildValue","hoveredCell","CategoryQuality","handleDelete","dataSource2","dataSource3","new_detail","grid","visible_kappa","updateWorkerQuality","detail_subcolums","detail_colums","Popconfirm","onConfirm","XYPlot","VerticalGridLines","HorizontalGridLines","XAxis","YAxis","ChartLabel","includeMargin","xPercent","yPercent","textAnchor","LineMarkSeries","curve","onValueMouseOver","Hint","get_interactive_results","all_times","likert_responses","radio_responses","user_abnormal","every","durations","duration","sum_x","allsame","total_duration","average_duration","outlier","std_duration","stdev","InteractiveQuality","dataSource4","dataSource5","handleOkSurvey","visible_survey","handleCancelSurvey","detail_subcolumns","detail_columns","bonuses","bonus_times","average_time","round","bonus","InteractivePayment","InteractiveFeedback","Interactive","AreaChartOutlined","BarChartOutlined","PayCircleOutlined","newInteractive","CategoryTemplate","CategoryQuestionList","category_data","dataGolden","taskid","questionCategories","categories","classLabel","classExample","classCounterexample","_showCategoryConfig","numofsent","get_category_results","initial","responses","sentid","CategoryResult","subcolumns","CategoryPayment","workerFeedback","uid","CategoryFeedback","Category","hasOwnProperty","CategoryConfigure","SequenceTemplate","IntentQuestionList","sequence_data","sent","entities","seg","entityType","entity","sentence","numofhit","numoflabel","questionEntities","labels","Label","Example","Counterexample","_showEntityConfig","SequenceResult","subsubdetail","annotators","intermediate","sentence_dic","ids","meta","index1","annotator","detail_subsubcolumns","record2","get_sequence_results","SequenceQuality","SequenceDataStatistics","id_times","SequencePayment","SequenceFeedback","Sequence","SequenceConfigure","QualityTemplate","QualityConfigure","quality_data","stateProperty","lineType","line","last","turn","answers","columns_context","ceil","EyeOutlined","QualityResult","get_quality_results","agreeSelf","agreeGold","agreeMajor","nAgreeUnit","nDisagreeUnit","agreeMajors","agreeTest","agreeSelfDetail","agreeGoldDetail","QualityQuality","QualityPayment","QualityFeedback","Quality","NewProject","handleConfirmBlur","confirmDirty","checkPassword","rule","callback","getFieldValue","checkConfirm","force","showModal","cancelModal","hideModal","project","filename","intent","user_id","files","FolderAddOutlined","okText","cancelText","validator","onBlur","ProjectList","visit","onChangePassword","inputText","onChangeInput","getColumnSearchProps","filterDropdown","setSelectedKeys","selectedKeys","clearFilters","ref","searchInput","onPressEnter","handleSearch","SearchOutlined","handleReset","filterIcon","filtered","onFilter","toLowerCase","onFilterDropdownVisibleChange","setTimeout","select","searchedColumn","Highlighter","highlightStyle","searchWords","searchText","autoEscape","textToHighlight","Status","isload","sysA","rawResponse","dispatchUpdate","history","go","localeCompare","sorter","nickname","DeleteOutlined","tip","taskType","HelpInteractive","source","InteractiveProject","HelpCategory","CategoryProject","HelpSequence","SequenceProject","HelpQuality","QualityProject","Worker","init","combine_data","MID","NewSystem","compareToFirstPassword","validateToNextPassword","layout","hideRequiredMark","addonBefore","user","org","github","desc","rows","HelpConnectSystem","Submit","AddSystem","showbotconfigure","configure_visible","urls","onConfigureClose","editConfig","GithubOutlined","People","uuid","Cluster","remove","add","nextKeys","clusters","unlabeled","formItems","_createElement","autosize","Tag","RejectionTemplate","final","reason","return","Resources","GeneralTaskWalkthrough","AddSystemWalkthrough","InteractiveWalkthrough","QualityWalkthrough","Walkthrough","ContainerOutlined","toggle","AntLayout","minHeight","Header","MenuUnfoldOutlined","MenuFoldOutlined","alt","Content","flex","Route","component","Footer","ContactsOutlined","GitlabOutlined","RadioGroup","WorkerCategory","retrieveQuestion","stateSet","some","sentId","prev","order","flag","isShow","mid","exampleTable","columns_example","onSelect","j","pointerEvents","top","TextEditor","addEventListener","selection","getSelection","anchorNode","selectionAnchorNode","handleTextChange","edit","oldText","oldEntities","oldEntity","oldSelection","substr","findClosestStart","lastMatch","from","abs","renderEntityHighlight","entityNames","getColor","inputNode","findDOMNode","SubmitFromUser","WorkerSequence","Orgs","isFirst","deleteEnt","Names","Locs","selectorStart","selectorEnd","oStart","oEnd","nStart","nENd","lStart","lEnd","selecttext","orgset","lastOrg","lastName","loc","losLoc","output","SelectText","bind","clickEntity","selecter","anchorOffset","focusOffset","instance","trim","createRange","execCommand","getRangeAt","cssText","WorkerQuality","showExamples","titleStyle","dsExamples","Help","Motion","spring","toggleOpen","DownOutlined","Review","up","down","thumbUp","ThumbUpIcon","thumbDown","ThumbDownIcon","sendFeedback","Messages","TransitionMotion","willEnter","updateScroll","requestAnimationFrame","scroll","scrollTop","scrollHeight","reverse","TextInput","onKeyPress","handleKeyPress","onEnter","Microphone","MicIcon","cancelMicrophone","startMicrophone","Chat","ReactGA","initialize","pageview","pathname","store","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","subscribe","saveState","getState","runSaga","run","configureStore","ReactDOM","Provider","Router","getUserConfirmation","getElementById","URL","origin","status","ready","unregister","checkValidServiceWorker","registerServiceWorker","TODAY","toDateString","colors","bg","unknownColor","no","startIndex","randomSeed","rand","opacity"],"mappings":"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","file":"static/js/main.9823db51.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/index.4bf83b25.less\";","import {combineReducers} from 'redux';\nimport messages from './messagesReducer';\nimport session from './sessionReducer';\nimport category from './categoryReducer';\nimport interactive from './interactiveReducer';\nimport sequence from './sequenceReducer';\nimport quality from './qualityReducer';\nimport session_category from './sessCateReducer';\nimport session_interactive from './sessInterReducer';\nimport session_sequence from './sessSeqReducer';\nimport session_quality from './sessQualReducer';\nimport result from './resultReducer';\nimport crowd from './crowdReducer';\nimport system from \"./systemReducer\";\nimport all from \"./allReducer\";\nimport listening from './listeningReducer';\nimport mode from './modeReducer';\nimport help from './helpReducer';\n\nexport default combineReducers({\n  messages,\n  session,\n  category,\n  interactive,\n  sequence,\n  quality,\n  system,\n  session_category,\n  session_interactive,\n  session_sequence,\n  session_quality,\n  result,\n  all,\n  listening,\n  mode,\n  help,\n  crowd\n});\n\n","export default function messagesReducer(state, action) {\n  switch (action.type) {\n    case 'MESSAGE_ADD':\n      return state.concat([{\n        text: action.text,\n        time: action.time,\n        received: action.received,\n        image: action.image,\n        candidate: action.candidate,\n      }]);\n    case \"MESSAGE_NEW\":\n      return [];\n    default:\n      return state || []\n  }\n}\n\n","export default function sessionReducer(state, action) {\n  switch(action.type) {\n        case 'SESSION_UPDATE':\n            return action.session;\n        default: \n            return state || \"text\";\n    }\n}\n\n","export default function categoryReducer(state, action) {\n    switch(action.type) {\n        case 'UPDATE_CATEGORY':\n            return action.category;\n        default:\n            return state || []\n    }\n}\n\n","export default function interactiveReducer(state, action) {\n  switch (action.type) {\n    case 'UPDATE_INTERACTIVE':\n      return action.interactive;\n    default:\n      return state || []\n  }\n}\n","export default function sequenceReducer(state, action) {\n    switch(action.type) {\n        case 'UPDATE_SEQUENCE':\n            return action.sequence;\n        default:\n            return state || []\n    }\n}\n\n","export default function qualityReducer(state, action) {\n    switch (action.type) {\n      case 'UPDATE_QUALITY':\n        return action.quality;\n      default:\n        return state || []\n    }\n  }\n  ","export default function systemReducer(state, action) {\n  switch(action.type) {\n    case 'UPDATE_SYSTEM':\n      return action.system;\n    default:\n      return state || []\n  }\n}\n\n","export default function sessCateReducer(state, action) {\n  switch(action.type) {\n    case 'SESSION_CATEGORY_UPDATE':\n      return action.category;\n    default:\n      return state || []\n  }\n}\n\n","export default function sessInterReducer(state, action) {\n  switch(action.type) {\n    case 'SESSION_INTERACTIVE_UPDATE':\n      return action.interactive;\n    default:\n      return state || \"text\"\n  }\n}\n\n","export default function sessSeqReducer(state, action) {\n  switch(action.type) {\n    case 'SESSION_SEQUENCE_UPDATE':\n      return action.sequence;\n    default:\n      return state || []\n  }\n}\n\n","export default function sessQualReducer(state, action) {\n    switch(action.type) {\n      case 'SESSION_QUALITY_UPDATE':\n        return action.quality;\n      default:\n        return state || \"text\"\n    }\n  }\n  \n  ","export default function resultReducer(state, action) {\n    switch(action.type) {\n        case 'UPDATE_RESULT':\n            return {dialog: action.dialog, survey: action.survey};\n        default:\n            return state || []\n    }\n}\n\n","export default function allReducer(state, action) {\n  switch(action.type) {\n    case 'ALL':\n      return action.all;\n    default:\n      return state || []\n  }\n}\n\n","export default function listeningReducer(state, action) {\n  switch(action.type) {\n    case 'MICROPHONE_START':\n      return true\n    case 'MICROPHONE_STOP':\n      return false\n    default:\n      return state || false\n  }\n}\n\n","export default function modeReducer(state, action) {\n  switch(action.type) {\n    case 'MODE_CHANGE':\n      return action.mode;\n    default:\n      return state || \"both\";\n  }\n}\n\n","export default function helpReducer(state, action) {\n  switch(action.type) {\n    case 'HELP_UPDATE':\n      return action.text\n    default:\n      return state || \"Help\"\n  }\n}\n\n","export default function crowdReducer(state, action) {\n  switch (action.type) {\n    case 'SET_CROWD':\n      return action;\n    default:\n      return state || []\n  }\n}\n","export function sendMessage(text, task_id, time, role, worker_id, terminal, sessionId, slots) {\n  return {\n    type: 'MESSAGE_SEND',\n    task_id,\n    text,\n    time,\n    role,\n    worker_id,\n    terminal,\n    sessionId,\n    slots,\n  }\n}\n\nexport function newMessage() {\n  return {type: \"MESSAGE_NEW\"}\n}\n\nexport function addMessage(text, time, received, image) {\n  return {\n    type: 'MESSAGE_ADD',\n    text,\n    time,\n    received,\n    image,\n  }\n}\n\nexport function sendFeedback(text, time, feedback) {\n  return {\n    type: 'FEEDBACK_SEND',\n    text,\n    time,\n    feedback,\n  }\n}","export function listen(recognition) {\n  return new Promise((resolve, reject) => {\n    recognition.onerror = (error) => {\n      reject(error);\n    }\n    recognition.onresult = (event) => {\n      resolve(event)\n    }\n    recognition.onnomatch = (e) => {\n      resolve(e)\n    }\n    recognition.start();\n  })\n}\n\nexport function speak(synth, utterance) {\n  return new Promise((resolve) => {\n    utterance.onend = resolve;\n    synth.speak(utterance)\n  })\n}\n","import {call, put, race, take,} from 'redux-saga/effects';\n\nimport {sendMessage} from '../actions/messageActions';\nimport {stopMicrophone} from '../actions/microphoneActions';\nimport {listen} from '../util/speechPromises';\n\nexport default function* microphoneSaga(synth) {\n  while(true) {\n    yield take('MICROPHONE_START');\n    synth.cancel();\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US'\n    //recognition.continuos = true;\n    recognition.interim = true;\n    try {\n      const { event } = yield race({\n        event: call(listen, recognition),\n        cancel: take('MICROPHONE_CANCEL')\n      });\n\n      if(event) {\n        var result = event.results[0][0].transcript;\n        if(result === \"start\") {\n          result = \"START\"\n        }\n        yield put(sendMessage(result, Date.now()));\n      }\n      else {\n        recognition.stop();\n      }\n    }\n    catch(error) {\n      console.log(error);\n    }\n    yield put(stopMicrophone());\n  }\n}\n","export function startMicrophone() {\n  return { type: 'MICROPHONE_START' }\n}\n\nexport function stopMicrophone() {\n  return { type: 'MICROPHONE_STOP' }\n}\n\nexport function cancelMicrophone() {\n  return { type: 'MICROPHONE_CANCEL' };\n}\n","export const serverUrl = process.env.NODE_ENV === 'development' ? 'http://34.34.18.211:3040' : process.env.serverUrl\nexport const clientUrl = process.env.NODE_ENV === 'development' ? 'http://0.0.0.0:3000' : process.env.clientUrl\n\n","import { call, fork, put, takeEvery, } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { addMessage } from '../actions/messageActions';\nimport { speak } from '../util/speechPromises';\nimport { serverUrl } from \"../configs\";\n\nexport default function* messagesSaga(sessionData, sid, synth) {\n  try {\n      yield put(addMessage(\"Connecting to the dialogue system. Please wait for the system response.\", Date.now(), true));\n\n      const response = yield call(\n      axios.post,\n      serverUrl + \"/api/router/chat/join\",\n      {\n        sid: sid,\n      }\n    );\n\n    // console.log(\"HERE is the response \")\n    // console.log(response)\n\n    if (response.data.action == \"status\") {\n        if(!response.data.msg.includes(\"START\"))\n            yield put(addMessage(response.data.msg, Date.now(), true));\n        else{\n\n            // let data = response.data\n            //\n            // data.sid = sid\n            // console.log(\"DATA?\")\n            // console.log(data)\n            // yield call(sendMessageSaga, synth, data, \"START\");\n\n            // print(\"DATA\")\n            // try {\n            //     const response = yield call(\n            //         axios.post,\n            //         serverUrl + \"/api/router/chat/usr_input\",\n            //         {\n            //             msg: \"START\",\n            //             sid: sid,\n            //         }\n            //     );\n            //     console.log(\"sendMessageSaga response START SESSION\", response);\n            //     // yield call(receiveMessageSaga, synth, data, response.data);\n            // }\n            // catch (error) {\n            //     console.log(error);\n            // }\n\n        }\n      console.log('SENT STATUS');\n      // TODO send message to server\n    }\n  }\n  catch (error) {\n    console.log(error);\n  }\n  yield takeEvery('MESSAGE_SEND', sendMessageSaga, synth, sessionData);\n  yield takeEvery('FEEDBACK_SEND', sendFeedbackSaga, sessionData);\n}\n\nfunction* receiveMessageSaga(synth, sessionData, messageData) {\n  const message = messageData.msg;\n  console.log(messageData);\n  console.log(messageData.display === \"\");\n\n  let display_messages = (messageData.display === \"\") ? messageData.msg : messageData.display;\n  \n  console.log(display_messages)\n  if (display_messages === undefined) {\n    // TODO need to solve!!!\n    display_messages = \"Please type or say START to begin.\";\n    // return;    \n  }\n  yield put(addMessage(display_messages, Date.now(), true));\n  const utterance = new SpeechSynthesisUtterance(message.replace(\"<p>\", \"...\"));\n  yield fork(logMessage, sessionData, message, \"Bot\")\n  if (sessionData.mode !== 'text') {\n      // TODO: I disabled the speech.\n      //yield call(speak, synth, utterance);\n  }\n  if (sessionData.mode === 'continuous') {\n    yield put({ type: 'MICROPHONE_START' })\n  }\n}\n\nfunction* sendMessageSaga(synth, data, action) {\n  console.log(\"data: \", data);\n  console.log(\"action: \", action);\n  yield put(addMessage(action.text, action.time, false));\n  try {\n    const response = yield call(\n      axios.post,\n      serverUrl + \"/api/router/chat/usr_input\",\n      {\n        msg: action.text,\n        sid: data.sid,\n        userId: data.userId,\n        taskID: data.taskID\n      }\n    );\n    console.log(\"sendMessageSaga response\", response);\n    yield call(receiveMessageSaga, synth, data, response.data);\n  }\n  catch (error) {\n    console.log(error);\n  }\n  yield fork(logMessage, data, action.text, \"You\")\n}\n\nfunction* logMessage(data, text, role) {\n  try {\n    const response = yield call(\n      axios.post,\n      serverUrl + '/api/dialog_save',\n      {\n        subId: data.subId,\n        userID: data.userId,\n        name_of_dialog: data.nameOfDialog,\n        role: role,\n        utter: text,\n        taskID: data.taskID\n      })\n    console.log(\"logMessage\", response)\n    console.log(\"logMessage data\", data)\n\n  }\n  catch (error) {\n    console.log(error)\n  }\n}\n\nfunction* sendFeedbackSaga(data, action) {\n  try {\n    yield call(\n      axios.post,\n      serverUrl + '/api/feedback',\n      {\n        subId: data.subId,\n        userID: data.userId,\n        name_of_dialog: data.nameOfDialog,\n        utter: action.text,\n        feedback: action.feedback,\n      }\n    )\n  }\n  catch (error) {\n\n  }\n}\n","import { all, call, put, takeEvery, } from 'redux-saga/effects';\n\nimport queryString from 'query-string';\n\nimport microphoneSaga from './microphoneSaga';\nimport messagesSaga from './messagesSaga';\n\nimport axios from 'axios';\nimport { serverUrl } from '../configs'\n\nexport default function* rootSaga() {\n  yield newSystem(); //\n  yield newDataQuery(\"interactive\");\n  yield newDataQuery(\"category\");\n  yield newDataQuery(\"sequence\");\n  yield newDataQuery(\"quality\");\n  yield takeEvery('NEW_SESSION', newSession);\n  yield takeEvery('NEW_SYSTEM', newSystem);\n  yield takeEvery('DELETE_PROJECT', deleteProject);\n  yield takeEvery('GET_RESULT', getResult);\n  yield takeEvery('DELETE_RESULT', deleteResult);\n  yield takeEvery('NEW_PROJECT_DATA', newDataQuery);\n  yield takeEvery('COM_ALL', combineData);\n  yield takeEvery('SET_INTERACTIVE', setInteractive);\n\n\n  /* Chatbox*/\n  const params = queryString.parse(window.location.search);\n  if (params.option) {\n    const option = params.option === \"continuous\" ? \"speech\" : params.option;\n    yield put({ type: 'MODE_CHANGE', mode: option })\n  }\n  if (params.help) {\n    yield put({ type: 'HELP_UPDATE', text: params.help })\n  }\n\n  const sid = Date.now() + \"\\t\" + (params.ip || \"\");\n  console.log(\"rootSaga\", params)\n\n  const sessionData = {\n    sid,\n    userId: params.userID || \"notProvided\",\n    subId: params.subId || \"notProvided\",\n    nameOfDialog: params.name_of_dialog || \"notProvided\",\n    taskID: params.taskID || \"notProvided\",\n    mode: params.option,\n  };\n\n  const synth = window.speechSynthesis;\n\n  yield all([\n    call(messagesSaga, sessionData, sid, synth),\n    call(microphoneSaga, synth)\n  ])\n\n}\n\nfunction* setInteractive(action) {\n  yield put({ type: 'SESSION_INTERACTIVE_UPDATE', interactive: action.data });\n\n}\nfunction* combineData(action) {\n  yield put({ type: 'ALL', all: action.List });\n}\n\nfunction* newSession(action) {\n  try {\n    const response = yield call(\n      axios.post,\n      serverUrl + '/api/' + action.url + '/' + action.createdAt,\n      {\n        password: action.password,\n      });\n    yield put({ type: 'SESSION_' + action.url.toString().toUpperCase() + '_UPDATE', [action.url]: response.data });\n  }\n  catch (error) {\n    console.log(error)\n  }\n}\n\nfunction* newSystem() {\n  try {\n    const response = yield call(\n      axios.get,\n      serverUrl + '/api/get/systems');\n    yield put({ type: 'UPDATE_SYSTEM', system: response.data });\n  }\n  catch (error) {\n    console.log(error)\n  }\n}\n\nfunction* newDataQuery(task_type) {\n  if (typeof task_type === \"object\") {\n    task_type = task_type[\"task_type\"];\n  }\n\n  try {\n    const response = yield call(\n      axios.get,\n      serverUrl + '/api/' + task_type);\n    yield put({ type: 'UPDATE_' + task_type.toUpperCase(), [task_type]: response.data[\"response\"] });\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* deleteProject(action) {\n  console.log(\"deleteProject\");\n  try {\n    yield call(\n      axios.post,\n      serverUrl + '/api/delete/' + action.task_type + \"/\" + action.task_id,\n      { password: action.password }\n    );\n    yield newDataQuery(action.task_type)\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\n\nfunction* deleteResult(action) {\n  console.log(\"deleteResult\");\n  try {\n    yield call(\n      axios.get,\n      serverUrl + '/api/delete/result/' + action.task_type + \"/\" + action.submit_id);\n    yield getResult(action)\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getResult(action) {\n  console.log(\"task_type\");\n  try {\n    const response = yield call(\n      axios.get,\n      serverUrl + '/api/get/result/' + action.task_type + \"/\" + action.task_id);\n    yield put({ type: 'UPDATE_RESULT', dialog: response.data[\"dialog\"], survey: response.data[\"survey\"] });\n  }\n  catch (error) {\n    console.log(error);\n  }\n}\n\n","export const loadState = () => {\n  // We need the try block because user may not permit our accessing localStorage.\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) { // The key 'state' does not exist.\n      return undefined;             // Let our reducer initialize the app.\n    }\n\n    return JSON.parse(serializedState)\n\n  } catch (error) {\n    console.log(error);\n    return undefined // Let our reducer initialize the app.\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    // Serialize the state. Redux store is recommended to be serializable\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState)\n\n  } catch (error) {\n    console.log(error)\n  }\n};","import {createStore, applyMiddleware, compose} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from '../reducers/rootReducer.js'\nimport rootSaga from '../sagas/rootSaga.js';\nimport {loadState, saveState} from '../util/localStorage'\n\nconst persistedState = loadState();\n\nexport default function configureStore() {\n\n  const sagaMiddleware = createSagaMiddleware();\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(rootReducer, persistedState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n  store.subscribe(() => {\n    saveState({\n      task: store.getState().task,\n      crowd: store.getState().crowd\n    });\n  }, 1000);\n\n  return {\n    ...store,\n    runSaga: () => sagaMiddleware.run(rootSaga),\n  }\n\n}\n","import React from \"react\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { dialogs: [] }\n  }\n\n  render() {\n    return <div>\n      <h1> What is DialCrowd? </h1>\n      <p>In order to make testing easier and more automated, a framework for connecting to a crowdsourcing entity such\n        as (but not only) <a href=\"https://www.mturk.com/\">Amazon Mechanical Turk (AMT)</a> and for rapidly creating and\n        deploying tasks. </p>\n      <p>In our experience, there are often a small set of standardized test scenarios (templates) that cover a large\n      portion of the dialog tasks that are run on AMT. When we make those scenarios easy to create, testing is faster,\n      and less burdensome. For some who are new to the area, the use of these scenarios guides them to accepted\n        testing structures that they may not have been aware of.</p>\n      <p>At the outset, the Task Creation Toolkit will use standard templates that are easy to flesh\n        out. Later, when the toolkit is finished, the community will be invited to add more.</p>\n      <p>The Toolkit will aid in other aspects of running tasks such as, in relevant cases, reminding the requester to\n      post a consent form for explicit permission to use the data. We will ensure that the results are collected\n      ethically and can be made available to the community with as few restrictions as possible that do not compromise\n        a worker’s privacy.</p>\n      <h1> People </h1>\n      <p><a href=\"https://www.cs.hhu.de/en/research-groups/dialog-systems-and-machine-learning/our-team/team.html\" target={\"_blank\"} rel=\"noopener noreferrer\">Songbo Hu</a>,\n        Intern@Heinrich Heine University Düsseldorf</p>\n      <p><a href=\"https://www.cs.hhu.de/en/research-groups/dialog-systems-and-machine-learning/our-team/team/cv-gasic.html\" target={\"_blank\"} rel=\"noopener noreferrer\">Prof. Milica Gašić</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n      <p><a href=\"http://heckmichael.de/\" target={\"_blank\"} rel=\"noopener noreferrer\">Dr. Michael Heck</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n      <p><a href=\"http://www.nflubis.com/\" target={\"_blank\"} rel=\"noopener noreferrer\">Dr. Nurul Fithria Lubis</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n      <p><a href=\"https://carelvniekerk.github.io/\" target={\"_blank\"} rel=\"noopener noreferrer\">Carel van Niekerk</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n      <p><a href=\"https://www.cs.hhu.de/en/research-groups/dialog-systems-and-machine-learning/our-team/team.html\" target={\"_blank\"} rel=\"noopener noreferrer\">Shutong Feng</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n      <p><a href=\"https://chrisgeishauser.github.io/\" target={\"_blank\"} rel=\"noopener noreferrer\">Christian Geishauser</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n      <p><a href=\"https://hsien1993.github.io/\" target={\"_blank\"} rel=\"noopener noreferrer\">Hsien-Chin Lin</a>,\n        Heinrich Heine University Düsseldorf\n      </p>\n\n      <h1> Contact </h1>\n      <p> Contact at dialog@hhu.de</p>\n\n\n    </div>\n  }\n}\n\nexport default Home\n","import React from 'react'\nimport { Layout, Menu } from 'antd'\nimport {\n  HomeOutlined, PlusCircleOutlined, MessageOutlined, SelectOutlined,\n  TagsOutlined, SafetyOutlined, BookOutlined, QuestionCircleOutlined,\n  FileTextOutlined\n} from '@ant-design/icons'\nimport { Link } from 'react-router-dom'\n\nconst { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.navItems1 = [\n      { to: \"/\", title: \"Home\", icon: <HomeOutlined /> },\n      { to: \"/system\", title: \"Add System\", icon: <PlusCircleOutlined /> }\n    ];\n\n    this.navItems2 = [\n      { to: \"/interactive_project\", title: \"Interaction\", icon: <MessageOutlined /> },\n      { to: \"/category_project\", title: \"Intent Classification\", icon: <SelectOutlined /> },\n      { to: \"/sequence_project\", title: \"Entity Classification\", icon: <TagsOutlined /> },\n      { to: \"/quality_project\", title: \"Quality Annotation\", icon: <SafetyOutlined /> }\n    ];\n\n    this.navItems3 = [\n      // {to: \"/crowd\", title: \"Workers\", icon: \"global\"},\n      { to: \"/resources\", title: \"Resources\", icon: <BookOutlined /> },\n      { to: \"/walkthrough\", title: \"Walkthrough\", icon: <QuestionCircleOutlined /> }\n    ];\n  }\n\n  render() {\n    return <Layout.Sider\n      trigger={null}\n      collapsible\n      collapsed={this.props.collapsed}\n      width=\"225px\"\n    >\n      <div className=\"logo\">\n        <p style={{ \"color\": \"#afb6bc\", \"margin\": \"10px\", \"textAlign\": \"center\" }}></p>\n      </div>\n\n      <Menu\n        mode=\"inline\"\n        theme=\"dark\"\n        style={{ lineHeight: '64px' }}\n        defaultSelectedKeys={[this.props.selectedKey]}\n      >\n        {\n          this.navItems1.map(({ to, title, icon }) =>\n            <Menu.Item\n              key={to}\n              style={{ fontSize: 16 }}>\n              <Link\n                to={to}\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                }}\n              >\n                <span> {icon} {title}</span>\n              </Link>\n            </Menu.Item>\n          )\n        }\n        <SubMenu key=\"template\" title={<div><FileTextOutlined style={{ fontSize: 20 }} />\n          <span>Task Templates</span></div>}>\n          {\n            this.navItems2.map(({ to, title, icon }) =>\n              <Menu.Item\n                key={to}\n                style={{ fontSize: 16 }}>\n                <Link\n                  to={to}\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                  }}\n                >\n                  <span>{icon} {title}</span>\n                </Link>\n              </Menu.Item>\n            )\n          }\n        </SubMenu>\n        {\n          this.navItems3.map(({ to, title, icon }) =>\n            <Menu.Item\n              key={to}\n              style={{ fontSize: 16 }}>\n\n              <Link\n                to={to}\n                style={{\n                  display: 'flex',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                }}\n              >\n                <span>{icon} {title}</span>\n              </Link>\n            </Menu.Item>\n          )\n        }\n      </Menu>\n    </Layout.Sider>\n  }\n}\n\nexport default Sider","export function loadData(createdAt, password, url) {\n  return {\n    type: 'NEW_SESSION',\n    createdAt: createdAt,\n    password: password,\n    url: url,\n  }\n}\n","export function deleteProject(task_type, task_id, password) {\n  return {\n    type: 'DELETE_PROJECT',\n    task_type,\n    task_id,\n    password\n  }\n}\n\nexport function getResult(task_type,task_id) {\n  return {\n    type: 'GET_RESULT',\n    task_type,\n    task_id\n  }\n}\n\nexport function deleteResult(task_type,task_id, submit_id) {\n  return {\n    type: 'DELETE_RESULT',\n    task_type,\n    task_id,\n    submit_id\n  }\n}\n\n\nexport function new_project_data(task_type) {\n  return {\n    type: 'NEW_PROJECT_DATA',\n    task_type\n  }\n}\n\nexport function combine_data(interactive,category,sequence,quality) {\n  let List = [];\n  interactive.forEach((x, _) => {\n    if(x[\"deploy\"])\n      List.push({\"type\":\"interactive\", \"_id\": x[\"_id\"], \"generic_instructions\": x[\"generic_instructions\"],\"generic_introduction\": x[\"generic_introduction\"], \"project\": x[\"name\"],\"user\": x[\"nickname\"]});\n  });\n  category.forEach((x, _) => {\n    if(x[\"deploy\"])\n      List.push({\"type\":\"category\", \"_id\": x[\"_id\"], \"generic_instructions\": x[\"generic_instructions\"],\"generic_introduction\": x[\"generic_introduction\"], \"project\": x[\"name\"],\"user\": x[\"nickname\"]});\n  });\n  sequence.forEach((x, _) => {\n    if(x[\"deploy\"])\n      List.push({\"type\":\"sequence\",\"_id\": x[\"_id\"], \"generic_instructions\": x[\"generic_instructions\"],\"generic_introduction\": x[\"generic_introduction\"], \"project\": x[\"name\"],\"user\": x[\"nickname\"]});\n  });\n  quality.forEach((x, _) => {\n    if(x[\"deploy\"])\n      List.push({\"type\":\"quality\", \"_id\": x[\"_id\"], \"generic_instructions\": x[\"generic_instructions\"], \"generic_introduction\": x[\"generic_introduction\"], \"project\": x[\"name\"], \"user\": x[\"nickname\"]});\n  });\n  return {\n    type: 'COM_ALL',\n    List\n  }\n}\n","import React from \"react\";\nimport { Button, Drawer, Form, Input, Row, Tabs } from 'antd';\nimport { EditOutlined } from '@ant-design/icons'\nimport { clientUrl } from '../../../../configs';\n\n\nconst TabPane = Tabs.TabPane;\nconst FormItem = Form.Item;\n\nclass InteractiveTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false, username: '', showlink: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  generate = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.setState({\n          username: values.username,\n          showlink: true\n        })\n      }\n    });\n  }\n\n  render() {\n    console.log(\"InteractiveTemplate.js\")\n    console.log(this.props.thisstate)\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"left\", width: \"90%\" }} onClick={this.showDrawer}>\n          <EditOutlined />Amazon Mechanical Turk Template\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Template\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"preview\">\n                <TabPane tab={<span>Preview</span>} key=\"preview\">\n                  <div>\n                    <div style={{ \"border-style\": \"solid\" }}>\n                      <div style={{ \"text-align\": \"center\" }}>\n                        <p>Preview</p>\n                      </div>\n                      <p style={{ \"padding-left\": \"2%\" }}>Background: {this.props.thisstate.generic_introduction} </p>\n                      <p style={{ \"padding-left\": \"2%\" }}>Instructions: {this.props.thisstate.generic_instructions} </p>\n                    </div>\n                    <br></br>\n                    <p>Input a username and generate the HIT link</p>\n\n                    <Form onSubmit={this.generate}>\n                      <FormItem {...formItemLayout}>\n                        {getFieldDecorator(`username`)(\n                          <Input.TextArea placeholder={\"Username\"} style={{ width: '60%', marginRight: 8, float: \"left\" }}\n                            autoSize={{ minRows: 1, maxRows: 1 }} />\n                        )}\n                        <Button type=\"primary\" htmlType=\"submit\" style={{ float: \"left\" }}>Generate Link</Button>\n                      </FormItem>\n                    </Form>\n\n                    {this.state.showlink ?\n                      <p>Please go to {clientUrl}/worker_interactive?MID={this.state.username}&ID={this.props.thisstate._id} in a separate window to complete the HIT</p>\n                      : null}\n                    <br></br>\n                    <p>When you are done, input the confirmation code here: <input type=\"text\" style={{ \"border\": \"1px solid gray\", \"padding-left\": \"5px\" }} /></p>\n                  </div>\n                </TabPane>\n                <TabPane tab={<span>Code</span>} key=\"code\">\n                  <pre>\n                    <code>\n                      &lt;style&gt;<br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>table, th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>border: 1px solid black;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>padding: 15px;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                            &lt;/style&gt;<br></br>\n                      <br></br>\n                            &lt;!-- Unique turker script --&gt; <br></br>\n                            &lt;script src=\"//uniqueturker.myleott.com/lib.js\" type=\"text/javascript\"&gt;&lt;/script&gt;<br></br>\n                            &lt;script&gt;<br></br>\n                            (function() {\"{\"}\n                      <p style={{ \"margin-left\": \"20px\" }}>var ut_id = \"e776c2408d15bc01e2f380e30759f24b\";<br></br>\n                                                                    if (UTWorkerLimitReached(ut_id)) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('mturk_form').style.display = 'none';<br></br>\n                                                                        document.getElementsByTagName('body')[0].innerHTML = \"You have already completed the maximum number of HITs allowed by this requester. Please click 'Return HIT' to avoid any impact on your approval rating.\";</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      {\"}\"});<br></br>\n                            &lt;/script&gt;<br></br>\n                      <br></br>\n                            &lt;!-- You must include this Javascript file --&gt; <br></br>\n                            &lt;script src=\"https://assets.crowd.aws/crowd-html-elements.js\"&gt;&lt;/script&gt; <br></br>\n                      <br></br>\n                            &lt;!-- For the full list of available Crowd HTML Elements and their input/output documentation, please refer to https://docs.aws.amazon.com/sagemaker/latest/dg/sms-ui-template-reference.html --&gt; <br></br>\n                      <br></br>\n                            &lt;!-- You must include crowd-form so that your task submits answers to MTurk --&gt; <br></br>\n                            &lt;crowd-form answer-format=\"flatten-objects\"&gt; <br></br>\n                      <br></br>\n                            &lt;div&gt; <br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div style=\"border-style: solid\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;div style=\"text-align: center\"&gt;</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>&lt;p&gt;Preview&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Background: {this.props.thisstate.generic_introduction} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Instructions: {this.props.thisstate.generic_instructions} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p&gt;Input a username and generate the HIT link&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;input id=\"workerid\" type=\"text\" name=\"username\" placeholder=\"Username\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;button id=\"submit\"&gt;Generate Link&lt;/button&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;br&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;&lt;span id=\"dialcrowd_link\"&gt; - &lt;/span&gt;&lt;/div&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('submit').onclick = function(event) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>event.preventDefault();</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>document.getElementById(\"dialcrowd_link\").textContent = \"Please go to {clientUrl}/worker_interactive/?ID={this.props.thisstate._id}&MID=\" + document.getElementById(\"workerid\").value + \" in a separate window to complete the HIT\"</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/script&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;p&gt;When you are done, input the confirmation code here: &lt;input type=\"text\" name=\"confirmation_code\"&gt;&lt;/p&gt;</p>\n                            &lt;/div&gt; <br></br>\n                            &lt;/crowd-form&gt; <br></br>\n                    </code>\n                  </pre>\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default Form.create()(InteractiveTemplate);\n","import React from \"react\";\nimport {\n  Button,\n  Collapse,\n  Drawer,\n  Form,\n  Input,\n  Modal,\n  Radio,\n  Rate,\n  Table,\n} from \"antd\";\nimport ReactMarkdown from \"react-markdown\";\n\nclass QuestionList extends React.Component {\n  /* Props:\n   * @{function}\tgetFieldDecorator\n   * @{Array}\t\tquestions\n   * @{String}\t\ttitle\n   * @{Array}\t\tsystemNames\n   * @{String}\t\tborderStyle: either 'box' or 'none'.\n   * @{String}\t\tThis is used to identify feedback question.\n   * Feedback questions are prefixed with \"Exit\". Default is `\"\"`.\n   */\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { questions, title, borderStyle } = this.props;\n    switch (borderStyle || \"box\") {\n      case \"box\": {\n        return (\n          <div\n            title={title}\n            style={{ border: \"2px solid black\", margin: \"10px\", padding: 5 }}\n          >\n            {questions.map((question, i) => this._renderQuestion(question, i))}\n          </div>\n        );\n      }\n      case \"none\": {\n        return questions.map((question, i) =>\n          this._renderQuestion(question, i)\n        );\n      }\n    }\n  }\n\n  _renderQuestion(question, index) {\n    const { getFieldDecorator, systemNames, title } = this.props;\n    // This is used to identify feedback question.\n    // Feedback questions are prefixed with \"Exit\".\n    const fieldPrefix = this.props.fieldPrefix || \"\";\n    const scale = question.likertScale || 5;\n    const likerts = [\"1 Strongly Disagree\"].concat(\n      Array(scale > 2 ? scale - 2 : 0).fill(\"\"),\n      [`${scale} Strongly Agree`]\n    );\n    const formItemLayout = {\n      labelCol: { span: 5 },\n      wrapperCol: { span: 11 },\n      colon: false,\n    };\n\n    const formItemLayout2 = {\n      labelCol: { span: 10 },\n      wrapperCol: { span: 7 },\n      colon: false,\n    };\n\n    const radioStyle = {\n      display: \"block\",\n      height: \"30px\",\n      lineHeight: \"30px\",\n    };\n\n    // no padding for system questions.\n    const paddingStyle =\n      this.props.borderStyle === \"none\" ? {} : { \"padding-left\": \"5%\" };\n\n    switch (question.type) {\n      case \"Likert Scale\": {\n        return (\n          <div style={paddingStyle}>\n            <span>\n              {index + 1}. {question.title.replace(\".\", \"\")}\n              <br />\n              {`(0 star for strongly disagree, ${\n                question.likertScale || 5\n              } for strongly agree.)`}\n            </span>\n            <Form.Item style={{ \"margin-bottom\": 0 }} {...formItemLayout2}>\n              {title !== \"Feedback\" ? (\n                <div>\n                  {getFieldDecorator(\n                    fieldPrefix +\n                      \"Likert|||\" +\n                      question.title.replace(\".\", \"\") +\n                      \"|||\" +\n                      index,\n                    {\n                      initialValue: 0,\n                      rules: [\n                        {\n                          required: true,\n                          message: \"Please input your answer\",\n                        },\n                      ],\n                    }\n                  )(\n                    <Rate\n                      count={question.likertScale || 5}\n                      tooltips={likerts}\n                      value={0}\n                      defaultValue={0}\n                    />\n                  )}\n                </div>\n              ) : (\n                <div>\n                  {getFieldDecorator(\n                    fieldPrefix +\n                      \"Likert|||\" +\n                      question.title.replace(\".\", \"\") +\n                      \"|||\" +\n                      index\n                  )(<Rate tooltips={likerts} value={0} defaultValue={0} />)}\n                </div>\n              )}\n            </Form.Item>\n          </div>\n        );\n      }\n      case \"Open ended\": {\n        return (\n          <div style={paddingStyle}>\n            <span>\n              {index + 1}. {question.title.replace(\".\", \"\")}\n            </span>\n            <Form.Item {...formItemLayout2} style={{ \"margin-bottom\": 0 }}>\n              {title !== \"Feedback\" ? (\n                <div>\n                  {getFieldDecorator(\n                    fieldPrefix +\n                      \"Open|||\" +\n                      question.title.replace(\".\", \"\") +\n                      \"|||\" +\n                      index,\n                    {\n                      rules: [\n                        {\n                          required: true,\n                          message: \"Please input your answer\",\n                        },\n                      ],\n                    }\n                  )(<Input placeholder=\"Please input your answer\" />)}{\" \"}\n                </div>\n              ) : (\n                <div>\n                  {getFieldDecorator(\n                    fieldPrefix +\n                      \"Open|||\" +\n                      question.title.replace(\".\", \"\") +\n                      \"|||\" +\n                      index\n                  )(<Input placeholder=\"Please input your answer\" />)}{\" \"}\n                </div>\n              )}\n            </Form.Item>\n          </div>\n        );\n      }\n      case \"Radio\": {\n        return (\n          <div style={paddingStyle}>\n            <span>\n              {index + 1}. {question.title.replace(\".\", \"\")}\n            </span>\n            <Form.Item {...formItemLayout} style={{ \"margin-bottom\": 0 }}>\n              {title !== \"Feedback\" ? (\n                <div>\n                  {getFieldDecorator(\n                    fieldPrefix +\n                      \"Radio|||\" +\n                      question.title.replace(\".\", \"\") +\n                      \"|||\" +\n                      index,\n                    {\n                      rules: [\n                        {\n                          required: true,\n                          message: \"Please input your answer\",\n                        },\n                      ],\n                    }\n                  )(\n                    <Radio.Group>\n                      {question.options.map((option) => (\n                        <Radio style={radioStyle} value={option.content}>\n                          <span>{option.content}&nbsp;</span>\n                        </Radio>\n                      ))}\n                    </Radio.Group>\n                  )}{\" \"}\n                </div>\n              ) : (\n                <div>\n                  {getFieldDecorator(\n                    fieldPrefix +\n                      \"Radio|||\" +\n                      question.title.replace(\".\", \"\") +\n                      \"|||\" +\n                      index\n                  )(\n                    <Radio.Group>\n                      {question.options.map((option) => (\n                        <Radio style={radioStyle} value={option.content}>\n                          <span>{option.content}&nbsp;</span>\n                        </Radio>\n                      ))}\n                    </Radio.Group>\n                  )}{\" \"}\n                </div>\n              )}\n            </Form.Item>\n          </div>\n        );\n      }\n      case \"Voting\": {\n        return (\n          <div style={{ \"padding-left\": \"40%\" }}>\n            <span>\n              {index + 1}. {question.title.replace(\".\", \"\")}\n            </span>\n            <Form.Item style={{ \"margin-bottom\": 0 }} {...formItemLayout2}>\n              {getFieldDecorator(\n                fieldPrefix +\n                  \"AB|||\" +\n                  question.title.replace(\".\", \"\") +\n                  \"|||\" +\n                  index,\n                {\n                  rules: [\n                    {\n                      required: true,\n                      message: \"Please input your answer\",\n                    },\n                  ],\n                }\n              )(\n                <Radio.Group>\n                  {systemNames.map((name) => (\n                    <Radio value={name.replace(\".\", \"\")}>\n                      {name.replace(\".\", \"\")}\n                    </Radio>\n                  ))}\n                  <Radio value={\"Draw\"}>{\"Draw\"}</Radio>\n                </Radio.Group>\n              )}\n            </Form.Item>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nfunction showFeedbackQuestion(show, getFieldDecorator) {\n  if (!show) {\n    return null;\n  }\n  return (\n    <div\n      title={\"Feedback\"}\n      style={{\n        width: \"500px\",\n        margin: \"0 auto\",\n        \"text-align\": \"center\",\n      }}\n    >\n      <p style={{ fontSize: 15, color: \"black\", \"margin-bottom\": \"-10px\" }}>\n        <b>(Optional)</b> Please let us know if you have any further feedback:\n      </p>\n      {getFieldDecorator(\"FeedbackOpen|||1\")(\n        <Input\n          placeholder=\"\"\n          style={{ width: \"80%\", height: \"80px\", marginRight: 8 }}\n        />\n      )}\n    </div>\n  );\n}\n\nclass Markdown extends React.Component {\n  /* Props:\n     {@Bool} enableMarkdown\n  */\n  render() {\n    if (this.props.enableMarkdown) {\n      return <ReactMarkdown children={this.props.children} />;\n    } else {\n      return <> {this.props.children} </>;\n    }\n  }\n}\n\nexport default QuestionList;\nexport { showFeedbackQuestion, Markdown };\n","import React from \"react\";\nimport { Button, Modal, Divider, Form, Checkbox, Input } from \"antd\";\n\nclass ConsentFormInner extends React.Component {\n  /* Props\n   * @{bool} initState: Whether the window is visible or not.\n   * @{bool} forceShow: Whether the window is visible or not.\n   * @{function} handleReject:\n   * @{function} onAccept:\n   * @{String} consent: PDF source of the consent form document.\n   * @{Array} checkboxes: [{key: @{int}, content: @{string}}]\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: this.props.initState || true,\n      page: 0,\n    };\n  }\n\n  render() {\n    const visible = this.state.visible || this.state.forceShow;\n    const checkboxes = this.props.handleAccept || this.close;\n\n    const pages = this._makePages();\n    if (pages.length == 0) {\n      return null;\n    } else {\n      const page = pages[this.state.page];\n      const footer =\n        this.state.page === pages.length - 1\n          ? this._showAcceptRejectButton()\n          : this._showPageButton();\n      return (\n        <>\n          <style>\n            {`\n        .ant-modal-content {height: 100%; display: flex; flex-direction: column;}\n            `}\n          </style>\n\n          <Modal\n            visible={visible}\n            title={page.title}\n            width={page.width}\n            height={page.height}\n            // height={1000}\n            closable={false}\n            maskClosable={false}\n            bodyStyle={{ flexGrow: 1 }}\n            centered\n            zIndex={1000}\n            footer={footer}\n          >\n            {page.content}\n          </Modal>\n        </>\n      );\n    }\n  }\n\n  close = () => {\n    this.setState({ visible: false });\n  };\n\n  handleReject = () => {\n    Modal.warning({\n      title: \"Thank you for your time.\",\n      content: \"Please return to Amazon Mechanical Turk\",\n      zIndex: 2000,\n    });\n  };\n\n  handleAccept = () => {\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.close();\n        if (this.props.onAccept !== undefined) {\n          this.props.onAccept();\n        }\n      }\n    });\n  };\n\n  nextPage = () => {\n    this.setState({ page: this.state.page + 1 });\n  };\n\n  prevPage = () => {\n    this.setState({ page: this.state.page - 1 });\n  };\n\n  _showPageButton = () => {\n    const handleReject = this.props.handleReject || this.handleReject;\n    return (\n      <>\n        {/* <Button onClick={this.prevPage}\n          disabled={this.state.page === 0}>\n          Previous Step\n          </Button> */}\n        <a href={this.props.consent} download=\"consent.pdf\">\n          {\" \"}\n          You can also download our Consent Form Here{\" \"}\n        </a>\n\n        <Button key=\"reject\" onClick={handleReject} danger>\n          Reject\n        </Button>\n        <Button type=\"primary\" onClick={this.nextPage}>\n          Agree & Next\n        </Button>\n      </>\n    );\n  };\n\n  _showAcceptRejectButton = () => {\n    const handleReject = this.props.handleReject || this.handleReject;\n    const handleAccept = this.handleAccept;\n    return (\n      <>\n        {/* <Button key=\"reject\" onClick={handleReject} danger>\n          Reject\n          </Button> */}\n        <Button\n          key=\"accept\"\n          type=\"primary\"\n          closable=\"false\"\n          onClick={handleAccept}\n        >\n          Agree\n        </Button>\n      </>\n    );\n  };\n\n  _makePages = () => {\n    let pages = [];\n\n    // add page if consent form is given.\n    if (this.props.consent !== undefined && this.props.consent !== \"\") {\n      pages.push({\n        width: \"90%\",\n        height: \"calc(100% - 20px)\",\n        title: <h2> Please read and agree to the consent form. </h2>,\n        content: (\n          <iframe src={this.props.consent} height=\"100%\" width=\"100%\"></iframe>\n        ),\n      });\n    }\n\n    // add page if checkboxes are given.\n    if (\n      this.props.checkboxes !== undefined &&\n      this.props.checkboxes.length > 0\n    ) {\n      pages.push({\n        title: <h2>Please check all that apply.</h2>,\n        content: this.props.checkboxes.map((checkbox) => (\n          <Form.Item>\n            {this.props.form.getFieldDecorator(`checkbox[${checkbox.key}]`, {\n              valuePropName: \"checked\",\n              initialValue: false,\n              validateTrigger: [\"onChange\", \"onBlur\"],\n              rules: [\n                {\n                  required: true,\n                  transform: (value) => value || undefined,\n                  type: \"boolean\",\n                  message:\n                    \"You must fulfill this requirement in order to do this task!\",\n                },\n              ],\n            })(<Checkbox key={checkbox.key}>{checkbox.content}</Checkbox>)}\n          </Form.Item>\n        )),\n      });\n    }\n\n    return pages;\n  };\n}\n\nconst ConsentForm = Form.create()(ConsentFormInner);\n\nexport { ConsentForm };\n","import React from \"react\";\nimport { Form, Input, Select, Tooltip, Button } from 'antd'\nimport { QuestionCircleOutlined, PlusOutlined, MinusCircleOutlined } from '@ant-design/icons'\nimport QuestionList from \"./QuestionList.js\"\n\n\nfunction lists2Systems(names, instructions, queries, types,\n  exampless, counterexampless) {\n  const _addKey = (xs) => (\n    xs.filter((x) => (x !== null))\n      .map((x, i) => ({ key: i, content: x }))\n  );\n  let systems = [];\n  for (let i = 0; i < names.length; i += 1) {\n    // Workaround: in case exampless[i] is not an array.\n    let examples = Array.isArray(exampless[i]) ? exampless[i] : [exampless[i]];\n    let counterexamples = (\n      Array.isArray(exampless[i]) ? counterexampless[i] : [counterexampless[i]]\n    );\n\n    systems.push({\n      \"key\": i,\n      \"name\": names[i],\n      \"instruction\": instructions[i],\n      \"questions\": [\n        {\n          key: 0,\n          title: queries[i],\n          type: types[i],\n          examples: _addKey(examples),\n          counterexamples: _addKey(counterexamples)\n        }\n      ]\n    });\n  }\n  return systems;\n}\n\n\nclass System extends React.Component {\n  /* Props:\n   * @{object}\tform:\n   * @{style}\tformItemLayout:\n   * @{function} removeByKey: Function that can remove a element by id.\n   * @{function} addByKey: Function that can remove a element by id.\n   * @{function} updateByKey: Function that can update a element by id.\n   * @{string}\tfieldNameSystem: HTML form name for the field of the system.\n   * @{string}\thelpText: Help text to shown when hovering over the question mark.\n   * @{Array}\tsystems: Check `this.newSystem` for the structure of the element.\n   * @{Array}\tagents: Available agents to choose from.\n   */\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n\n    return (\n      <>\n        <div>\n          {\n            this.props.systems.map(\n              (system) => (this._showSystem(system))\n            )\n          }\n        </div>\n        <Form.Item {...formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\" onClick={this.addSystem} style={{ width: '90%' }}>\n            <PlusOutlined /> Add System\n          </Button>\n        </Form.Item>\n      </>\n    );\n  }\n\n  addSystem = () => {\n    this.props.addByKey([this.props.fieldNameSystem], this.constructor.newSystem());\n  }\n\n  static newSystem() {\n    /* Factory a new empty initialized system object. */\n    return {\n      name: \"\",\n      agent: \"\",\n      instruction: \"\",\n      questions: [\n        { key: 0, ...QuestionList.newQuestion() }\n      ]\n    };\n  }\n\n  _showSystem(system) {\n    const { formItemLayout, fieldNameSystem } = this.props;\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div key={system.key}\n        style={{ border: \"2px solid black\", margin: \"10px\", padding: 24, display: \"block\" }}\n      >\n\n        {/* instruction tooltip that show instruction when mouse hovering over it. */}\n        <span style={{\n          float: \"left\",\n          \"margin-bottom\": \"-30px\"\n        }}\n          class=\"instruction-tooltip\">\n          <Tooltip\n            title={this.props.textInstruction}>\n            <QuestionCircleOutlined /> &nbsp; Tips\n          </Tooltip>\n        </span>\n\n        {/* Removal Button */}\n        <Form.Item>\n          <span style={{ float: \"right\", \"margin-bottom\": \"-30px\", \"margin-top\": \"-20px\", \"margin-right\": \"-10px\" }}>\n            {this.props.systems.length > 1 ? (\n              <MinusCircleOutlined\n                className=\"dynamic-delete-button\"\n                disabled={this.props.systems.length === 1}\n                onClick={() => this.props.removeByKey([fieldNameSystem, system.key])}\n              />\n            ) : null}\n          </span>\n        </Form.Item>\n\n        {/* System name. */}\n        <Form.Item\n          {...formItemLayout}\n          label={(\n            <span>\n              System Display Name &nbsp;\n              <Tooltip\n                title={(\n                  \"Please write the name of your dialog system. DO NOT write \"\n                  + \"'Baseline' or 'Proposed System'.  This name will be shown \"\n                  + \"to workers (e.g., System A)\"\n                )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={true}\n        >\n          {getFieldDecorator(`${fieldNameSystem}[${system.key}][name]`, {\n            initialValue: system.name,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please input the name of the dialog system to show to workers.\",\n            }],\n          })(\n            <Input placeholder=\"System A\" style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </Form.Item>\n\n        {/* Agent */}\n        <Form.Item\n          {...formItemLayout}\n          label=\"Agent\"\n          hasFeedback\n        >\n          {getFieldDecorator(`${fieldNameSystem}[${system.key}][agent]`, {\n            initialValue: system.agent,\n            rules: [\n              { required: true, message: 'Please select an agent!' },\n            ],\n          })(\n            <Select placeholder=\"Please choose your system\">\n              {this.props.agents.map((x, l) =>\n                <Select.Option key={l} value={x._id}> {x.name} </Select.Option>\n              )}\n            </Select>\n          )}\n        </Form.Item>\n\n        {/* Instruction */}\n        <Form.Item\n          {...(formItemLayout)}\n          label={(\n            <span>\n              Specific Instructions&nbsp;\n              <Tooltip\n                title={(\n                  \"Please note any instructions for interacting with the system \"\n                  + \"(e.g., 'please interact with the system for more \"\n                  + \"than 10 turns', 'please ask about the weather tomorrow in Pittsburgh', etc)\"\n                )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={false}\n        >\n          {getFieldDecorator(`${fieldNameSystem}[${system.key}][instruction]`, {\n            initialValue: system.instruction,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please write specific instructions\",\n            }],\n          })(\n            <Input placeholder=\"Please talk about weather and more than 10 turns! \"\n              style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </Form.Item>\n        <QuestionList\n          form={this.props.form}\n          formItemLayout={formItemLayout}\n          removeByKey={this.props.removeByKey}\n          addByKey={this.props.addByKey}\n          updateByKey={this.props.updateByKey}\n          questions={system.questions}\n          rootKey={[fieldNameSystem, system.key, \"questions\"]}\n          questionFieldLabel=\"Question\"\n          questionHelpText={(\n            \"Ask questions about this system. For example, you can ask the worker \"\n            + \"to assess the quality of this system here.\"\n          )}\n          textAddQuestion=\"Add a System Specific Question\"\n          textInstruction={this.props.helpText}\n          placeholderQuestion=\"Do you think it was a good system?\"\n          placeholderExample=\"Yes, it was always on topic.\"\n          placeholderCounterexample=\"I want to get paid more.\"\n          placeholderOption=\"Input your option here.\"\n          listStyle=\"divider\"\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default System;\nexport { lists2Systems };\n\n","function getStyle(stateStyle, defaultStyles={}) {\n  let styles = {\n    global: {\n      spacing: 0\n    },\n    background: {\n      \"marginTop\": \"-3px\",\n      \"marginBottom\": \"-3px\",\n      \"fontSize\": 15\n    },\n    instruction: {\n      fontSize: 18,\n    },\n    example: {\n      fontSize: 14,\n      textAlign: \"left\",\n      fontFamily: \"Arial\"\n    },\n    context: {\n      fontSize: 14,\n      lineHeight: 1.5\n    },\n    response: {\n      fontSize: 14\n    },\n    question: {\n      fontSize: 14\n    },\n    tabTitle: {},\n    ...defaultStyles\n  };\n  for (const [section, style] of Object.entries(stateStyle || {})) {\n    for (const [key, val] of Object.entries(style)) {\n      styles[section] = styles[section] || {};\n      if (['fontSize', \"spacing\"].indexOf(key) !== -1 && val !== undefined) {\n        styles[section][key] = parseInt(val);\n      } else {\n        styles[section][key] = val;\n      }\n    }\n  }\n  styles.instruction.marginTop = `${styles.global.spacing}px`;\n  styles.background.marginTop = `${styles.global.spacing}px`;\n  styles.background.marginBottom = `${styles.global.spacing}px`;\n  styles.context.marginBottom = `${Math.max(styles.context.lineHeight * 0.33, 0)}em`;\n\n  return styles;\n}\n\nexport {getStyle};\n","import { Row, Col, Popover, Button } from \"antd\";\n\nfunction _renderCardName(cardName, item) {\n  if (item.length > 0) {\n    return (\n      <p>\n        <b>{cardName}</b>\n      </p>\n    );\n  }\n}\nfunction _renderCardItems(item) {\n  if (item.length > 0) {\n    return item.split(\",\").map((x) => <p>{x}</p>);\n  }\n}\n\nfunction _domainTask(item) {\n  return (\n    <Popover\n      content={_buttonContent(item)}\n      title={item.Dom}\n      trigger=\"click\"\n      placement=\"bottomLeft\"\n    >\n      <Button>{item.Dom}</Button>\n    </Popover>\n  );\n}\n\nfunction _buttonContent(item) {\n  return (\n    <div style={{ \"text-align\": \"center\" }}>\n      {_renderCardName(\"Condition\", item.Cons)}\n      {_renderCardItems(item.Cons)}\n      <p></p>\n      {_renderCardName(\"Please Book\", item.Book)}\n      {_renderCardItems(item.Book)}\n      <p></p>\n      {_renderCardName(\"Please Ask\", item.Reqs)}\n      {_renderCardItems(item.Reqs)}\n    </div>\n  );\n}\n\nfunction renderTasksButton(taskList) {\n  return (\n    <div style={{ background: \"#ECECEC\", padding: \"10px\" }}>\n      <p>You can click the domain to see the detail of the dialogue task.</p>\n      <Col>{taskList.map((item) => _domainTask(item))}</Col>\n    </div>\n  );\n}\nexport { renderTasksButton };\n","import React from \"react\";\nimport {\n  Button,\n  Collapse,\n  Drawer,\n  Form,\n  Modal,\n  Radio,\n  Table,\n  Tooltip,\n  Alert,\n  Row,\n  Col,\n  Card,\n} from \"antd\";\nimport { SmileOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\nimport { clientUrl, serverUrl } from \"../../configs\";\nimport { ConsentForm } from \"./AgreeModal\";\nimport queryString from \"query-string\";\nimport Iframe from \"react-iframe\";\nimport { connect } from \"react-redux\";\nimport QuestionList, { Markdown } from \"./QuestionList.js\";\nimport {\n  lists2Questions,\n  addKeys,\n} from \"../requesters/template/QuestionList.js\";\nimport { lists2Systems } from \"../requesters/template/System.js\";\nimport { showFeedbackQuestion } from \"./QuestionList.js\";\nimport { getStyle } from \"./style.js\";\n\nimport { renderTasksButton } from \"./showInteractiveTask.js\";\n\nconst Panel = Collapse.Panel;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\nconst confirm = Modal.confirm;\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction preprocess(emb) {\n  let Output = {};\n  Output[\"intro\"] = emb[\"generic_introduction\"];\n  Output[\"instructions\"] = emb[\"generic_instructions\"];\n  Output[\"speech\"] = emb[\"speech\"];\n  Output[\"MNor1N\"] = emb[\"MNor1N\"];\n\n  while (emb[\"exampleTable\"][0] && !emb[\"exampleTable\"][0].question) {\n    emb[\"exampleTable\"].shift();\n  }\n\n  Output[\"exampleTable\"] = emb[\"exampleTable\"];\n  let body = [];\n  emb[\"name_of_dialog\"].forEach(function (x, i) {\n    let temp = {};\n    temp[\"name_of_dialog\"] = x;\n    temp[\"specific_instructions\"] = emb[\"specific_instructions\"][i];\n    temp[\"subpoll\"] = emb[\"subpoll\"][i];\n    temp[\"subtypeofpoll\"] = emb[\"subtypeofpoll\"][i];\n    temp[\"url_dialog_system\"] = emb[\"url_dialog_system\"][i];\n    body.push(temp);\n  });\n  let end = [];\n  emb[\"pollquestion\"].forEach(function (x, i) {\n    let temp = {};\n    if (x) {\n      temp[\"exitpoll\"] = x;\n      temp[\"polltype\"] = emb[\"typeofpoll\"][i];\n      end.push(temp);\n    }\n  });\n  let feedback = [];\n  let feedbackType = [];\n  if (emb[\"keys3\"]) {\n    emb[\"keys3\"].forEach(function (x, i) {\n      feedback.push(emb[\"feedback\"][x]);\n      feedbackType.push(emb[\"feedbackType\"][x]);\n    });\n  }\n  Output[\"feedback\"] = feedback;\n  Output[\"feedbackType\"] = feedbackType;\n  shuffle(body);\n  shuffle(end);\n  Output[\"body\"] = body;\n  Output[\"end\"] = end;\n  Output[\"time\"] = emb[\"time\"];\n  Output[\"payment\"] = emb[\"payment\"];\n  Output[\"consent\"] = emb[\"consent\"];\n\n  /* let radio = emb[\"radio\"]\n   * if (typeof emb[\"radio\"][0] === \"string\"){\n   *   radio = [radio]\n   * }\n\n   * let feedbackradio = emb[\"feedbackradio\"];\n   * let newfeedbackradio = [];\n   * let index = 0;\n   * \n   * for (var i = 0; i < feedbackType.length; i++){\n   *   if (feedbackType[i] === \"Radio\"){\n   *     let loop = true;\n   *     while (loop){\n   *       if (feedbackradio[index] !== null){\n   *         newfeedbackradio.push(feedbackradio[index])\n   *         loop = false;\n   *       }\n   *       index++;\n   *     }\n   *   }\n   *   else{\n   *     newfeedbackradio.push(\"\");\n   *   }\n   * }\n   * Output[\"radios\"] = radio\n   * Output[\"feedbackradio\"] = newfeedbackradio */\n\n  return Output;\n}\n\nfunction getquestion(t, id) {\n  fetch(serverUrl + \"/api/worker/interactive/\" + id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (response) {\n      if (response.err !== undefined) {\n        Modal.error({ content: response.err });\n        return;\n      }\n\n      let json = preprocess(response);\n\n      let questionSurveys;\n      let questionFeedbacks;\n      let questionSystems;\n      // Workaround: response.questionSurveys should not be undefined.\n      if (response.questionSurveys === undefined) {\n        questionSurveys = lists2Questions(\n          response.pollquestion,\n          response.typeofpoll,\n          response.radio,\n          response.example,\n          response.counterexample\n        );\n      } else {\n        questionSurveys = addKeys(response.questionSurveys);\n      }\n      // Workaround: response.questionFeedbacks should not be undefined.\n      if (response.questionFeedbacks === undefined) {\n        questionFeedbacks = lists2Questions(\n          response.feedback || [],\n          response.feedbackType || [],\n          response.feedbackradio || []\n        );\n      } else {\n        questionFeedbacks = addKeys(response.questionFeedbacks);\n      }\n\n      if (response.questionSystems === undefined) {\n        // Workaround\n        questionSystems = lists2Systems(\n          response.name_of_dialog,\n          response.generic_instructions,\n          response.subpoll,\n          response.subtypeofpoll,\n          response.dialog_examples,\n          response.dialog_counterexamples\n        );\n      } else {\n        questionSystems = addKeys(response.questionSystems);\n      }\n      sessionStorage.setItem(\n        \"systemArr\",\n        JSON.stringify(questionSystems.sort(() => Math.random() - 0.5))\n      );\n      t.setState({\n        speech: json.speech,\n        interface: response.interface,\n        intro: json.intro,\n        instructions: json.instructions,\n        feedback: json.feedback,\n        feedbackType: json.feedbackType,\n        timepay: json.time,\n        payment: json.payment,\n        consent: json.consent[1],\n        feedbackradio: json.feedbackradio,\n        questionSurveys: questionSurveys,\n        questionFeedbacks: questionFeedbacks,\n        questionSystems: questionSystems,\n        systemArr: JSON.parse(sessionStorage.getItem(\"systemArr\")),\n        requirements: addKeys(response.requirements || []),\n        hasFeedbackQuestion: response.hasFeedbackQuestion,\n        style: response.style,\n        enableMarkdown: response.enableMarkdown,\n      });\n    });\n}\n\nfunction getInteractiveTask(t, id) {\n  fetch(serverUrl + \"/api/get_interactive_task/\" + id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let task = JSON.parse(json[\"task\"]);\n\n      t.setState({\n        current_task: task,\n        taskList: task.tasks,\n        taskID: task.taskID,\n      });\n    });\n}\n\n// Set cookies in order to pass the task to later interactive worker page.\nfunction setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n  d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n  var expires = \"expires=\" + d.toGMTString();\n  document.cookie =\n    cname +\n    \"=\" +\n    cvalue +\n    \"; \" +\n    expires +\n    \";domain=\" +\n    window.location.hostname +\n    \";path=/\";\n}\n\n// TODO: Working on here Songbo\n\nfunction submitFORM(path, method) {\n  method = method || \"post\";\n\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", method);\n  form.setAttribute(\"action\", path);\n\n  //Move the submit function to another variable\n  //so that it doesn't get overwritten.\n  form._submit_function_ = form.submit;\n\n  document.body.appendChild(form);\n  form._submit_function_();\n}\n\nfunction submitToMturk(t, hasProblem) {\n  let search = window.location.search;\n  let params = new URLSearchParams(search);\n  let foo = params.get(\"assignmentId\");\n  let isProduction = params.get(\"mturkProduction\");\n\n  let submitURL = params.get(\"turkSubmitTo\");\n\n  //?assignmentId=34J10VATJGBKANG4MDCHRA6ME53QIH&foo=bar\n  // let submissionPath = 'https://workersandbox.mturk.com/mturk/externalSubmit';\n  // if(isProduction === \"true\"){\n  //   submissionPath = \"https://www.mturk.com/mturk/externalSubmit\";\n  // }\n  //\n  let submissionPath = submitURL + \"/mturk/externalSubmit\";\n\n  if (foo != null && foo !== \"ASSIGNMENT_ID_NOT_AVAILABLE\") {\n    submitFORM(\n      submissionPath +\n        \"?assignmentId=\" +\n        foo +\n        \"&survey_code=\" +\n        t.state.userID +\n        \"&hasproblem=\" +\n        hasProblem,\n      \"POST\"\n    );\n  }\n}\n\nfunction SubmitFromUser(t, v, time) {\n  fetch(serverUrl + \"/api/save/worker/interactive/\" + t.state.userID, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      times: time,\n      data: v,\n      submissiontime: Date.now(),\n      subId: t.state.subId,\n    }),\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      if (json.success) {\n        // validate the dialogue quality based on rules\n        let dialogueSystems = t.state.questionSystems;\n        let promises = [];\n\n        dialogueSystems.forEach((system) => {\n          console.log(\n            \"🚀 ~ file: WorkerInteractive.js ~ line 314 ~ dialogueSystems.forEach ~ system\",\n            system\n          );\n          const _p = new Promise((resolve, reject) => {\n            fetch(\n              serverUrl +\n                \"/api/validate/dialogue/\" +\n                t.state.subId +\n                \"/\" +\n                t.state.userID +\n                \"/\" +\n                system.name\n            )\n              .then(function (response) {\n                return response.json();\n              })\n              .then(function (data) {\n                resolve({\n                  system: system.name,\n                  isPassed: data[\"isPassed\"],\n                  problems: data[\"problems\"],\n                });\n              });\n          });\n          promises.push(_p);\n        });\n\n        Promise.all(promises)\n          .then((data) => {\n            let submissionProblem = [];\n            data.forEach((test) => {\n              if (!test[\"isPassed\"]) {\n                submissionProblem.push(test);\n              }\n            });\n\n            if (submissionProblem.length === 0) {\n              confirm({\n                title: \"Thank you for submission\",\n                content: \"Now you can submit to Mturk.\",\n                onOk() {\n                  submitToMturk(t, true);\n                },\n                onCancel() {\n                  submitToMturk(t, true);\n                },\n              });\n            } else {\n              let problemPromopt = [];\n              submissionProblem.forEach((problem) => {\n                problemPromopt.push(\n                  problem[\"system\"] + \" has problems \" + problem[\"problems\"]\n                );\n              });\n              confirm({\n                title: \"Sorry, there are issues with your submission\",\n                content:\n                  problemPromopt.join(\"\\n\") +\n                  \"\\nWould you like to redo the assignment?\",\n                onOk() {\n                  window.location.reload();\n                },\n                onCancel() {\n                  confirm({\n                    title: \"Sorry, there are issues with your submission\",\n                    content:\n                      \"Your assignment is unlikely to be accepted, would you like to continue?\",\n                    onOk() {\n                      submitToMturk(t, true);\n                    },\n                    onCancel() {\n                      window.location.reload();\n                    },\n                  });\n                },\n              });\n            }\n          })\n          .catch((err) => {});\n      } else {\n        confirm({\n          title: \"Error\",\n          content: \"You haven't talked to agents\",\n          onOk() {},\n          onCancel() {},\n        });\n      }\n    });\n}\n\nclass WorkerInteractive extends React.Component {\n  talk_to_system = (system, list, index) => {\n    let id = system.agent;\n    let url = \"\";\n\n    // lookup URL from the system list by matching the id.\n    // let systemArr = []\n\n    // if(sessionStorage.getItem('systemArr')) {\n    //   systemArr = JSON.parse(sessionStorage.getItem('systemArr'))\n    // } else {\n    //     list.map(litem => {\n    //       if(item._id === litem.agent) {\n    //         systemArr.push(item)\n    //       }\n    //     })\n    //   systemArr.sort(() => Math.random() - 0.5)\n\n    //   sessionStorage.setItem('systemArr', JSON.stringify(systemArr))\n    // }\n\n    // let random = Math.floor(Math.random() * systemArr.length)\n\n    this.props.system.forEach((x) => {\n      if (id === x[\"_id\"]) {\n        url = x[\"url\"];\n      }\n    });\n    // let help_info = { text: JSON.stringify(this.state.current_task) };\n    // http://192.168.56.1:3000/chat\n    // ?option=text\n    // &ip=35.240.21.68:5001\n    // &userID=1624278559720\n    // &subId=60ca0ef9159ef548a88d193f\n    // &name_of_dialog=System2\n    // &taskID=10190\n    // &help=1\n    this.setState({\n      chaturl:\n        `${clientUrl}/chat?` +\n        `option=${this.state.interface}&ip=${url}&userID=${this.state.userID}` +\n        `&subId=${this.state.subId}&name_of_dialog=${system.name}` +\n        `&taskID=${this.state.taskID}` +\n        `&help=${system.instruction}`,\n      // `&help=${help_info.text}`,\n\n      current_system: system.name,\n      visible: true,\n      time: Date.now(),\n      isSubmit: true,\n    });\n  };\n\n  componentDidMount() {\n    var time = Date.now();\n    this.setState({ userID: time });\n    const params = queryString.parse(window.location.search);\n    if (params.ID) {\n      var Id = params.ID;\n      this.setState({ subId: Id });\n    } else {\n      Id = \"5aa2ea0f2972991520138bdb\";\n      this.setState({ subId: Id });\n    }\n    getquestion(this, Id);\n    getInteractiveTask(this, Id);\n  }\n\n  onClose = () => {\n    let systems = this.state.system_time;\n    systems.push({\n      system: this.state.current_system,\n      time: Date.now() - this.state.time,\n    });\n    this.setState({\n      visible: false,\n      system_time: systems,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        if (!this.state.isSubmit) {\n          confirm({\n            content: \"Please talk to the system before submission\",\n            onOk() {},\n            onCancel() {},\n          });\n        } else {\n          SubmitFromUser(this, values, this.state.system_time);\n        }\n      }\n    });\n  };\n\n  openInstructions = () => {\n    if (!this.state.activeKey.includes(\"2\")) {\n      let x = this.state.activeKey;\n      x.push(\"2\");\n      this.setState({\n        activeKey: x,\n      });\n    }\n  };\n\n  changeTab = (activeKey) => {\n    this.setState({\n      activeKey: activeKey,\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      instructions: \"\",\n      speech: false,\n      subId: \"\",\n      isSubmit: false,\n      question: \"\",\n      answer: \"\",\n      isdone: false,\n      userID: \"\",\n      visible: false,\n      current: 1,\n      path: \"\",\n      meaning: \"\",\n      examples: [],\n      intro: \"\",\n      systems: [],\n      exitpoll: [],\n      interface: \"both\",\n      chaturl: \"\",\n      feedback: [],\n      feedbackType: [],\n      time: \"\",\n      system_time: [],\n      current_system: \"\",\n      timepay: \"\",\n      payment: \"\",\n      consent: \"\",\n      radios: [],\n      feedbackradio: [],\n      activeKey: [\"1\", \"2\", \"3\", \"4\"],\n      questionSurveys: [],\n      questionFeedbacks: [],\n      questionSystems: [],\n      requirements: [],\n      current_task: [],\n      taskID: \"\",\n      taskList: [],\n      systemArr: [],\n    };\n  }\n\n  render() {\n    const columns = [\n      {\n        title: \"Question\",\n        dataIndex: \"title\",\n      },\n      {\n        title: \"An Example Response\",\n        dataIndex: \"examples\",\n        key: \"examples\",\n        render: _renderExamples,\n      },\n      {\n        title: \"A Counterexample Response\",\n        dataIndex: \"counterexamples\",\n        key: \"counterexamples\",\n        render: _renderExamples,\n      },\n    ];\n\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 5 },\n      wrapperCol: { span: 11 },\n      colon: false,\n    };\n    const formItemLayout2 = {\n      labelCol: { span: 10 },\n      wrapperCol: { span: 7 },\n      colon: false,\n    };\n\n    const radioStyle = {\n      display: \"block\",\n      height: \"30px\",\n      lineHeight: \"30px\",\n    };\n\n    const likerts = [\"1 Strongly Disagree\", \"\", \"\", \"\", \"5 Strongly Agree\"];\n    const styles = getStyle(this.state.style, {\n      dialogInstruction: {\n        color: \"#282828\",\n        fontSize: 18,\n      },\n    });\n    let helpInfo = { text: JSON.stringify(this.state.current_task) };\n\n    // .sort(() => Math.random() - 0.5)\n    return (\n      <div style={styles.global}>\n        <Drawer\n          placement=\"right\"\n          width={720}\n          closable={false}\n          onClose={this.onClose}\n          visible={this.state.visible}\n        >\n          {renderTasksButton(this.state.taskList)}\n          <Iframe\n            style={{ \"margin-right\": \"10px\" }}\n            url={this.state.chaturl}\n            width=\"100%\"\n            height=\"600\"\n            display=\"initial\"\n            position=\"relative\"\n            allowFullScreen\n          />\n          <Button type=\"primary\" shape=\"round\" block onClick={this.onClose}>\n            Finish\n          </Button>\n          <Alert\n            message=\"Say Bye\"\n            description=\"Remember to say 'bye' to Dialogue System!\"\n            type=\"info\"\n            icon={<SmileOutlined />}\n            showIcon={true}\n            closable\n          />\n          <Alert\n            message=\"Do not click Return\"\n            description=\"Clicking the return button on your browser will terminate the task. To exit the dialogue, click the form again or the Blue Finish Button above.\"\n            type=\"warning\"\n            icon={<CloseCircleOutlined />}\n            showIcon={true}\n            closable\n          />\n        </Drawer>\n        <Form onSubmit={this.handleSubmit} style={{ \"margin-bottom\": 0.1 }}>\n          <Collapse\n            defaultActiveKey={[\"1\", \"2\", \"3\"]}\n            activeKey={this.state.activeKey}\n            onChange={this.changeTab}\n          >\n            <Panel header=\"Background \" key=\"1\" style={styles.tabTitle}>\n              <p style={styles.background}>\n                <Markdown enableMarkdown={this.state.enableMarkdown}>\n                  {this.state.intro}\n                </Markdown>\n              </p>\n              <ConsentForm\n                consent={this.state.consent}\n                checkboxes={this.state.requirements}\n              />\n              {/* <AnonymityNotice /> */}\n            </Panel>\n            <Panel header=\"Instructions \" key=\"2\" style={styles.tabTitle}>\n              <div style={styles.instruction}>\n                {this.state.enableMarkdown ? (\n                  <Markdown enableMarkdown={this.state.enableMarkdown}>\n                    {this.state.instructions}\n                  </Markdown>\n                ) : (\n                  <b>{this.state.instructions}</b>\n                )}\n              </div>\n\n              {/*<p*/}\n              {/*  style={{*/}\n              {/*    ...styles.instruction,*/}\n              {/*    marginTop: \"0px\",*/}\n              {/*    marginBottom: \"0px\",*/}\n              {/*    fontSize: styles.instruction.fontSize - 2,*/}\n              {/*  }}*/}\n              {/*>*/}\n              {/*  We expect this HIT will take{\" \"}*/}\n              {/*  <b>{this.state.timepay} minute(s)</b> and we will pay{\" \"}*/}\n              {/*  <b>${this.state.payment}</b> (USD).*/}\n              {/*</p>*/}\n\n              {/*{this.showSystemExamples(styles)}*/}\n\n              {/*<div*/}\n              {/*  style={{*/}\n              {/*    ...styles.example,*/}\n              {/*    fontSize: styles.example.fontSize + 4,*/}\n              {/*  }}*/}\n              {/*>*/}\n              {/*  <p>Example Answers for General Questions:</p>*/}\n              {/*</div>*/}\n              {/*<Table*/}\n              {/*  rowKey=\"sentid\"*/}\n              {/*  dataSource={this.state.questionSurveys}*/}\n              {/*  columns={columns}*/}\n              {/*  pagination={false}*/}\n              {/*  style={{*/}\n              {/*    ...styles.example,*/}\n              {/*    marginTop: `${styles.global.spacing}px`,*/}\n              {/*    marginBottom: `${styles.global.spacing}px`,*/}\n              {/*  }}*/}\n              {/*  size=\"small\"*/}\n              {/*/>*/}\n            </Panel>\n            <Panel header=\"Dialogue Task \" key=\"3\" style={styles.tabTitle}>\n              {_renderTasks(this.state.taskList)}\n            </Panel>\n            <Panel\n              header=\"Start Your Task Here \"\n              key=\"4\"\n              style={styles.tabTitle}\n            >\n              {!this.state.activeKey.includes(\"2\") ? (\n                <div style={{ textAlign: \"center\" }}>\n                  <Button type=\"default\" onClick={this.openInstructions}>\n                    Example Responses\n                  </Button>\n                </div>\n              ) : null}\n              {/*this.state.speech ?\n                <div title={\"Audio Testing\"} style={{ \"margin-bottom\": 0 }}  >\n                <FormItem {...formItemLayout2} label=\"Step1: Test your speakers. Please click \" style={{ \"margin-bottom\": 0 }}  >\n                {getFieldDecorator('username')(\n                <Button shape=\"circle\" icon=\"caret-right\" size={\"large\"} />\n\n                )}\n                </FormItem>\n                <FormItem {...formItemLayout2} label=\"What did you hear?\" style={{ \"margin-bottom\": 0 }}   >\n                {getFieldDecorator('audiotest', {\n                rules: [{\n                required: true,\n                message: 'What did you hear?',\n                }],\n                })(\n                <Input placeholder=\"What did you hear?\" />\n                )}\n                </FormItem>\n                <FormItem {...formItemLayout3} label=\"Step2: Test your microphone. Please say 'Microphone test who was George Washington? ' after clicking. \" style={{ \"margin-bottom\": 0 }}   >\n                {getFieldDecorator('username')(\n                <Button shape=\"circle\" icon=\"customer-service\" size={\"large\"}  />\n                )}\n                </FormItem>\n                </div>\n                :\n                null\n              */}\n              {this.state.systemArr.map((system, index) => (\n                <div\n                  key={system.key}\n                  title={system.name}\n                  style={{\n                    border: \"1px solid black\",\n                    padding: 18 + styles.global.spacing,\n                    marginTop: `${12.5 + styles.global.spacing}px`,\n                  }}\n                >\n                  {/* Left column (for system). */}\n                  <div\n                    style={{\n                      display: \"inline-block\",\n                      width: \"50%\",\n                      \"padding-left\": \"40px\",\n                      \"padding-right\": \"10px\",\n                      \"vertical-align\": \"top\",\n                      color: styles.dialogInstruction.color,\n                    }}\n                  >\n                    {/* <span> Instructions: </span>\n                    <br />\n                    <span\n                      className=\"ant-form-text\"\n                      style={styles.dialogInstruction}\n                    >\n                      <b>{system.instruction}</b>\n                    </span> */}\n                    {/* <br /> */}\n                    <span>{`Click to talk ${system.name}:`}</span>\n                    {getFieldDecorator(\"username\")(\n                      <Button\n                        shape=\"circle\"\n                        icon=\"message\"\n                        size={\"large\"}\n                        style={{ margin: \"10px\" }}\n                        onClick={() =>\n                          this.talk_to_system(\n                            system,\n                            this.state.questionSystems,\n                            index\n                          )\n                        }\n                      />\n                    )}\n                  </div>\n                  {/* Right column */}\n                  <div\n                    style={{\n                      ...styles.question,\n                      display: \"inline-block\",\n                      width: \"50%\",\n                      \"padding-right\": \"40px\",\n                      \"padding-left\": \"10px\",\n                      \"vertical-align\": \"top\",\n                    }}\n                  >\n                    <QuestionList\n                      getFieldDecorator={getFieldDecorator}\n                      questions={system.questions}\n                      title=\"\"\n                      borderStyle=\"none\"\n                      fieldPrefix={`Sub|||${system.name}|||`}\n                    />\n                  </div>\n                </div>\n              ))}\n\n              {/* Survey questions. */}\n              <div style={styles.question}>\n                <QuestionList\n                  getFieldDecorator={getFieldDecorator}\n                  questions={this.state.questionSurveys}\n                  title=\"Survey\"\n                  systemNames={this.state.questionSystems.map((s) => s.name)}\n                  fieldPrefix=\"Exit\"\n                />\n              </div>\n\n              {/* Feedback questions */}\n              <div style={{ backgroundColor: \"#C1E7F8\" }}>\n                <FormItem\n                  style={{ textAlign: \"center\" }}\n                  wrapperCol={{ span: 12, offset: 6 }}\n                >\n                  {showFeedbackQuestion(\n                    this.state.hasFeedbackQuestion,\n                    getFieldDecorator\n                  )}\n                </FormItem>\n              </div>\n              <div style={{ \"text-align\": \"center\" }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Submit\n                </Button>\n              </div>\n            </Panel>\n          </Collapse>\n        </Form>\n      </div>\n    );\n  }\n\n  showSystemExamples = (styles) => {\n    /* Show the example answer and counterexample answers\n     * for system specific questions. */\n\n    // make data source for Antd Table\n    let table = [];\n    let lastSystem = undefined;\n    for (const system of this.state.questionSystems) {\n      for (const question of system.questions) {\n        // Add a row only when the question has an example/counterexample.\n        if (\n          (question.examples || []).length > 0 ||\n          (question.counterexamples || []).length > 0\n        ) {\n          // Don't show system if the name is same as the previous row.\n          const systemName = system.name === lastSystem ? \"\" : system.name;\n          table.push({\n            system: systemName,\n            question: question.title,\n            examples: question.examples || [],\n            counterexamples: question.counterexamples || [],\n          });\n        }\n      }\n    }\n\n    // Don't show anything if no question has an example/counterexample.\n    if (table.length === 0) {\n      return null;\n    }\n\n    // columns for antd Table\n    const columns = [\n      { title: \"System\", dataIndex: \"system\" },\n      { title: \"Question\", dataIndex: \"question\" },\n      {\n        title: \"Answer Examples\",\n        dataIndex: \"examples\",\n        render: _renderExamples,\n      },\n      {\n        title: \"Answer Counterexamples\",\n        dataIndex: \"counterexamples\",\n        render: _renderExamples,\n      },\n    ];\n\n    return (\n      <>\n        <div\n          style={{ ...styles.example, fontSize: styles.example.fontSize + 4 }}\n        >\n          <p>Example Answers for System Specific Questions:</p>\n        </div>\n        <Table\n          dataSource={table}\n          columns={columns}\n          pagination={false}\n          size=\"small\"\n          style={{\n            ...styles.example,\n            marginTop: `${styles.global.spacing}px`,\n            /* marginBottom: `${styles.global.spacing}px` */\n          }}\n        />\n      </>\n    );\n  };\n}\nfunction _renderCardName(cardName, item) {\n  if (item.length > 0) {\n    return (\n      <p>\n        <b>{cardName}</b>\n      </p>\n    );\n  }\n}\nfunction _renderCardItems(item) {\n  if (item.length > 0) {\n    return item.split(\",\").map((x) => <p>{x}</p>);\n  }\n}\nfunction _renderTasks(taskList) {\n  return (\n    <div style={{ background: \"#ECECEC\", padding: \"30px\" }}>\n      <Row gutter={16}>\n        {taskList.map((item) => (\n          <Col span={6}>\n            <Card\n              title={item.Dom}\n              bordered={false}\n              headStyle={{ size: 20, \"text-align\": \"center\" }}\n              bodyStyle={{ size: 10, \"text-align\": \"center\" }}\n            >\n              {_renderCardName(\"Condition\", item.Cons)}\n              {_renderCardItems(item.Cons)}\n              <p></p>\n              {_renderCardName(\"Please Book\", item.Book)}\n              {_renderCardItems(item.Book)}\n              <p></p>\n              {_renderCardName(\"Please Ask\", item.Reqs)}\n              {_renderCardItems(item.Reqs)}\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n\nfunction _renderExamples(examples, record) {\n  return (\n    <ul>\n      {(examples || []).map((example, index) => (\n        <li key={index}>\n          {example.content}\n          {example.explain !== undefined ? (\n            <Tooltip title={example.explain}>\n              &nbsp;{\" \"}\n              <sub>\n                <a>because...</a>\n              </sub>\n            </Tooltip>\n          ) : null}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction mapStateToProps(state, props) {\n  return {\n    system: state.system,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Form.create()(WorkerInteractive));\nexport { _renderExamples };\n","import React, { Component } from 'react';\nimport { Button, Form, Radio, Select, Modal, Table } from 'antd';\nimport QuestionList from \"../../workers/QuestionList.js\";\nimport { ConsentForm } from \"../../workers/AgreeModal.js\";\nimport { _renderExamples } from \"../../workers/WorkerInteractive.js\";\n\n\nclass PreviewConsent extends Component {\n  /* Props\n   * @{String} consent: PDF source of the consent form document.\n   * @{Array} requirements: [{key: @{int}, content: @{string}}]\n   */\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  render() {\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n\n    return (<>\n      <Form.Item {...formItemLayoutWithOutLabel}>\n        <Button\n          onClick={() => { this.showPreview() }} style={{ width: \"90%\" }}\n          disabled={this.props.requirements.length === 0 && this.props.consent === \"\"}>\n          Preview the Above Consent Questions in Worker View\n        </Button>\n      </Form.Item>\n      {this.state.visible ?\n        <ConsentForm\n          consent={this.props.consent}\n          checkboxes={this.props.requirements}\n          forceShow={this.state.visible}\n          onAccept={() => (this.close())}\n        /> :\n        null\n      }\n    </>);\n  }\n\n  showPreview() {\n    this.setState({ visible: true });\n  }\n\n  close() {\n    this.setState({ visible: false });\n  }\n}\n\n\nclass PreviewExample extends Component {\n  /* Params\n     @{Object}\tquestions\n   */\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  render() {\n    const columns = [{\n      title: 'Question',\n      dataIndex: 'title',\n    }, {\n      title: 'Examples',\n      dataIndex: 'examples',\n      key: 'examples',\n      render: _renderExamples\n    }, {\n      title: 'Counterexamples',\n      dataIndex: 'counterexamples',\n      key: 'counterexamples',\n      render: _renderExamples\n    }];\n\n    return (<>\n      <Button onClick={() => { this.showPreview() }} style={{ width: \"90%\" }} >\n        Preview the Examples and Counterexamples in Worker View\n      </Button>\n      <Modal\n        visible={this.state.visible}\n        centered\n        zIndex={1000}\n        onCancel={() => { this.close() }}\n        footer=<Button onClick={() => { this.close() }}> Close </Button>\n        width = { \"75%\"}\n      >\n      <Table rowKey=\"sentid\" dataSource={this.props.questions}\n        columns={columns} pagination={false}\n        size=\"small\" />\n      </Modal >\n    </>);\n  }\n\n  showPreview() {\n    this.setState({ visible: true });\n  }\n\n  close() {\n    this.setState({ visible: false });\n  }\n}\n\n\nclass PreviewQuestionInner extends Component {\n  /* Params\n     @{Object}\tquestion\n     @{Array}\tsystemNames: For A/B test.\n   */\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  render() {\n    return (<>\n      <Button onClick={() => { this.showPreview() }} style={{ width: \"90%\" }} >\n        Preview this Question in Worker View\n      </Button>\n      <Modal\n        visible={this.state.visible}\n        centered\n        zIndex={1000}\n        onCancel={() => { this.close() }}\n        footer=<Button onClick={() => { this.close() }}> Close </Button>\n        width = { \"60%\"}\n      >\n      <QuestionList\n        getFieldDecorator={this.props.form.getFieldDecorator}\n        questions={[this.props.question]}\n        title=\"\"\n        fieldPrefix=\"\"\n        systemNames={this.props.systemNames}\n        borderStyle=\"none\"\n      />            \n      </Modal >\n    </>);\n  }\n\n  showPreview() {\n    this.setState({ visible: true });\n  }\n\n  close() {\n    this.setState({ visible: false });\n  }\n}\n\n\nclass PreviewIntent extends Component {\n  /* Params\n     @{Object}\tquestions\n   */\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  render() {\n    const formItemLayout2 = {\n      labelCol: { span: 14 },\n      wrapperCol: { span: 10 },\n      colon: false\n    };\n\n    return (<>\n      <Button onClick={() => { this.showPreview() }} style={{ width: \"90%\" }} >\n        Preview in Worker View\n      </Button>\n      <Modal\n        visible={this.state.visible}\n        centered\n        zIndex={1000}\n        onCancel={() => { this.close() }}\n        footer=<Button onClick={() => { this.close() }}> Close </Button>\n        width = { \"75%\"}\n      >\n      <div title=\"category classification\">\n        <div style={{ \"textAlign\": \"center\" }}>\n          <p style={{ \"textAlign\": \"center\", \"fontSize\": 18 }}><b>\"Select a category for the given text\"</b></p>\n        </div>\n        <div style={{ \"textAlign\": \"center\" }}>\n          <Button type=\"default\" onClick={this.openInstructions}>Example Responses</Button>\n        </div>\n        <div style={{ \"backgroundColor\": \"#f7f7f7\" }}>\n          <Form.Item className={'two-rows-label'}\n            {...formItemLayout2}\n            label={<div style={{\n              display: \"inline-block\",\n              \"float\": \"left\",\n              \"whiteSpace\": \"normal\",\n              \"marginRight\": \"12px\",\n              \"text-align\": \"left\",\n              \"lineHeight\": \"15px\"\n            }}><p>Some text here.</p></div>}\n            hasFeedback\n          >\n            <Select placeholder=\"Please select a category\">\n              {this.props.questions.map((question, j) => (\n                <Select.Option value={question.title}>\n                  {question.title}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            {...formItemLayout2}\n            label={<div style={{\n              color: \"forestgreen\",\n              \"display\": \"inline-flex\"\n            }}>{\"Confidence of your answer? (1: Not confident, 3: Very confident) \"}</div>}\n          >\n            <Radio.Group>\n              <Radio value=\"1\">1</Radio>\n              <Radio value=\"2\">2</Radio>\n              <Radio value=\"3\">3</Radio>\n            </Radio.Group>\n          </Form.Item>\n        </div>\n      </div>\n      </Modal >\n    </>);\n  }\n\n  showPreview() {\n    this.setState({ visible: true });\n  }\n\n  close() {\n    this.setState({ visible: false });\n  }\n}\n\n\nconst PreviewQuestion = Form.create()(PreviewQuestionInner);\n\nexport default PreviewQuestion;\nexport { PreviewIntent, PreviewQuestion, PreviewConsent, PreviewExample, };\n","import React from \"react\";\nimport { Button, Form, Input, Radio, Tooltip, Divider, InputNumber } from 'antd';\nimport {\n  QuestionCircleOutlined, PlusOutlined, MinusCircleOutlined, ExclamationCircleOutlined,\n} from '@ant-design/icons';\nimport PreviewQuestion, { PreviewExample } from \"./Preview.js\";\n\n\nfunction lists2Questions(queries, types, optionss,\n  exampless = undefined, counterexampless = undefined) {\n  const _addKey = (xs) => (\n    xs.filter((x) => (x !== null))\n      .map((x, i) => ({ key: i, content: x }))\n  );\n\n  let questions = [];\n  for (let i = 0; i < queries.length; i += 1) {\n    if (exampless !== undefined) {\n      // Workaround\n      if (queries[i] === null) {\n        continue;\n      }\n      // Workaround: in case exampless[i] is not an array.\n      let examples = Array.isArray(exampless[i]) ? exampless[i] : [exampless[i]];\n      let counterexamples = (\n        Array.isArray(exampless[i]) ? counterexampless[i] : [counterexampless[i]]\n      );\n\n      questions.push({\n        \"key\": i,\n        \"title\": queries[i],\n        \"type\": types[i],\n        \"options\": (\n          optionss[i] === null ? [{ key: 0, content: \"\" }] : _addKey(optionss[i])\n        ),\n        \"examples\": _addKey(examples),\n        \"counterexamples\": _addKey(counterexamples),\n      });\n    } else {\n      questions.push({\n        \"key\": i,\n        \"title\": queries[i],\n        \"type\": types[i],\n        \"options\": (\n          optionss[i] === null ? [{ key: 0, content: \"\" }] : _addKey(optionss[i])\n        )\n      });\n    }\n  }\n  return questions;\n}\n\n\nfunction addKeys(xs) {\n  if (Array.isArray(xs)) {\n    xs = xs.filter((x) => (x !== null));\n    if (typeof (xs[0]) === 'string') {\n      return xs.map((x, i) => ({ key: i, content: x }));\n    } else {\n      return xs.map((x, i) => ({ key: i, ...addKeys(x) }));\n    }\n  } else if (typeof (xs) === 'object') {\n    let newX = {};\n    for (let [k, x] of Object.entries(xs)) {\n      newX[k] = addKeys(x);\n    }\n    return newX;\n  } else {\n    return xs;\n  }\n}\n\n\nclass QuestionList extends React.Component {\n  /* Props:\n   * @{object}\tform:\n   * @{style}\tformItemLayout:\n   * @{Array} questions [\n   *    {\n   *        'key': @{int},\n   *        'title': @{string},\n   *        'type': @{string},\n   *        'options': [{'key': @{int} key, 'content': @{string}}, ... ]\n   *        'examples': [{'key': @{int} key, 'content': @{string}}, ... ]\n   *        'counterexamples': [{'key': @{int} key, 'content': @{string}}, ... ]\n   *    }, ...\n   * ]\n   * @{string} questionFieldLabel: default `Question`.\n   * @{Array} rootKey: \n   * @{Array} systemNames:  For the preview of A/B test questions.\n   * @{string} questionHelpText: Like \"After workers talk to your dialog systems,\"\n   * @{string} textAddQuestion: Text to show on the add question button.\n   * @{string} textInstruction: Text to show in the \"tip\" tooltip.\n   * \"please provide a survey question on how your systems performed.\"\n   * @{function} removeByKey: Function that can remove a element by id.\n   * @{function} addByKey: Function that can remove a element by id.\n   * @{function} updateByKey: Function that can update a element by id.\n   * @{string} placeholderQuestion: \n   * @{string} placeholderExample: \n   * @{string} placeholderCounterexample: \n   * @{string} placeholderOption: \n   * @{string} listStyle: Either `box` or `divider`.\n   * @{bool}  noPreview: No preview button.\n   */\n  static questionTypes = [\n    [\"Likert Scale\", \"Likert Scale\",\n      \"Give the system a score from 1 to 5, 1 as strongly disagree and 5 as strongly agree.\"],\n    [\"Open ended\", \"Open ended\",\n      \"Require more thought and more than a simple one-word answer.\"],\n    [\"Radio\", \"Multiple Choice\",\n      \"Multiple choices are given.\"]\n  ];\n\n  constructor(props) {\n    super(props);\n    this.formItemLayout = props.formItemLayout;\n    this.formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n    this.styleWarning = {\n      'width': '90%', 'color': 'darkorange',\n      'text-align': 'center',\n      'font-weight': 'bold'\n    };\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.questions.map(\n          (question) => (this._renderQuestionSection(question))\n        )}\n        <Form.Item {...this.formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\" onClick={this._addQuestion} style={{ width: '90%' }}>\n            <PlusOutlined /> {this.props.textAddQuestion}\n          </Button>\n        </Form.Item>\n        <Form.Item {...this.formItemLayoutWithOutLabel}>\n          <PreviewExample questions={this.props.questions} />\n        </Form.Item>\n      </>\n    );\n  }\n\n  static newQuestion = () => {\n    const newQuestion = {\n      \"title\": \"\",\n      \"type\": \"Open ended\",\n      \"options\": [{ \"key\": 0, \"content\": \"\" }],\n      \"examples\": [{ \"key\": 0, \"content\": \"\" }],\n      \"counterexamples\": [{ \"key\": 0, \"content\": \"\" }],\n      \"likertScale\": 5\n    };\n    return newQuestion;\n  }\n\n  _addQuestion = () => {\n    this.props.addByKey(\n      this.props.rootKey, this.constructor.newQuestion()\n    );\n  };\n\n  _renderQuestionSection(question) {\n    switch (this.props.listStyle || 'box') {\n      case 'box':\n        return (\n          <div key={question.key}\n            style={{ border: \"2px solid black\", margin: \"10px\", padding: 24 }} >\n            {this._renderQuestionBody(question)}\n          </div>\n        );\n      case 'divider':\n        return (\n          <div key={question.key}>\n            {this._renderQuestionBody(question)}\n            <Divider />\n          </div>\n        );\n      default: {\n        throw `Unsupported listStyle ${this.props.listStyle}`;\n      }\n    }\n  }\n\n  _renderQuestionBody(question) {\n    const { getFieldDecorator } = this.props.form;\n    const fieldNameQuestion = (\n      String(this.props.rootKey[0])\n      + this.props.rootKey.slice(1).map((key) => (`[${key}]`)).join('')\n    );\n    const handleChange = (fieldName) => (event) => {\n      const value = event.target !== undefined ? event.target.value : event;\n      this.props.updateByKey(\n        this.props.rootKey.concat([question.key]),\n        { [fieldName]: value }\n      )\n    };\n    return (\n      <>\n        {/* instruction tooltip that show instruction when mouse hovering over it. */}\n        {this.props.textAddQuestion !== \"Add a System Specific Question\" ?\n          <span style={{\n            float: \"left\",\n            \"margin-bottom\": \"-30px\"\n          }}\n            class=\"instruction-tooltip\">\n            <Tooltip\n              title={this.props.textInstruction}>\n              <QuestionCircleOutlined /> &nbsp; Tips\n           </Tooltip>\n          </span> : null\n        }\n\n        {/* Remove question button. */}\n        <Form.Item>\n          <span style={{ float: \"right\", \"margin-bottom\": \"-30px\", \"margin-top\": \"-20px\", \"margin-right\": \"-10px\" }}>\n            {this.props.questions.length > 1 ? (\n              <MinusCircleOutlined\n                className=\"dynamic-delete-button\"\n                disabled={this.props.questions.length === 1}\n                onClick={() => this.props.removeByKey(\n                  this.props.rootKey.concat([question.key])\n                )}\n              />\n            ) : null}\n          </span>\n        </Form.Item>\n\n        {/* Type of question. */}\n        {this._showQuestionType(question)}\n\n        {/* Questions */}\n        <Form.Item {...(this.formItemLayout)}\n          label={(\n            <span>\n              {this.props.questionFieldLabel || \"Question\"} &nbsp;\n              <Tooltip title={this.props.questionHelpText}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>)}\n          required={true}\n        >\n          {getFieldDecorator(`${fieldNameQuestion}[${question.key}][\"title\"]`, {\n            initialValue: question.title,\n            validateTrigger: ['onChange', 'onBlur'],\n            onChange: handleChange('title'),\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please ask a question to the workers.\",\n            }],\n          })(\n            <Input placeholder={this.props.placeholderQuestion} style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </Form.Item>\n\n        {/* Configuration for radios. */}\n        { question.type === \"Radio\" ?\n          <DynamicItems\n            form={this.props.form}\n            formItemLayout={this.props.formItemLayout}\n            removeByKey={this.props.removeByKey}\n            addByKey={this.props.addByKey}\n            updateByKey={this.props.updateByKey}\n            rootKeys={this.props.rootKey.concat([question.key, \"options\"])}\n            items={question.options}\n            title=\"Option\"\n            textHelp=\"Give the worker an answer option.\"\n            textAdd=\"Add an option\"\n            placeholder={this.props.placeholderOption}\n          />\n          : null\n        }\n\n        {/* Configure for likert scale. */}\n        { question.type === \"Likert Scale\" ?\n          <Form.Item {...(this.formItemLayout)}\n            label={(\n              <span>\n                Likert Scale Range&nbsp;\n                <Tooltip\n                  title=\"Maximum range of the scale\">\n                  <QuestionCircleOutlined />\n                </Tooltip>\n              </span>)}>\n            {getFieldDecorator(`${fieldNameQuestion}[${question.key}][\"likertScale\"]`, {\n              initialValue: question.likertScale,\n              validateTrigger: ['onChange', 'onBlur'],\n              onChange: handleChange('likertScale'),\n              rules: [{\n                required: true,\n                message: \"Please specify a number: 3, 5, or 7.\",\n              }],\n            })(\n              <InputNumber defaultValue={5} min={3} max={7} step={2} />\n            )}\n          </Form.Item> : null\n        }\n\n        {this.props.noPreview ? null :\n          <Form.Item\n            {...this.formItemLayoutWithOutLabel}>\n            <PreviewQuestion\n              question={question}\n              systemNames={this.props.systemNames}\n            />\n          </Form.Item>\n        }\n\n        <br />\n        <hr />\n        <br />\n\n        {/* Examples. */}\n        <DynamicItems\n          form={this.props.form}\n          formItemLayout={this.props.formItemLayout}\n          removeByKey={this.props.removeByKey}\n          addByKey={this.props.addByKey}\n          updateByKey={this.props.updateByKey}\n          rootKeys={this.props.rootKey.concat([question.key, \"examples\"])}\n          items={question.examples || []}\n          title=\"Example and Explanation\"\n          textHelp={(\n            \"Please provide an example of an answer to your question above. \"\n            + \"It helps the worker understand what is an acceptable answer, \"\n            + \"and thus ensures better quality of your collected data.\"\n          )}\n          textAdd=\"Add an example\"\n          placeholder={this.props.placeholderExample}\n          placeholderExplain=\"Why is this example well done?\"\n          recommendedNumber={3}\n          recommendedMinNumber={1}\n          required={question.type === 'Open ended'}\n          minimumNumber={question.type === 'Open ended' ? 1 : 0}\n        />\n\n        <br />\n        <hr />\n        <br />\n\n        <DynamicItems\n          form={this.props.form}\n          formItemLayout={this.props.formItemLayout}\n          removeByKey={this.props.removeByKey}\n          addByKey={this.props.addByKey}\n          updateByKey={this.props.updateByKey}\n          rootKeys={this.props.rootKey.concat([question.key, \"counterexamples\"])}\n          items={question.counterexamples || []}\n          title=\"Counterexample and Explanation\"\n          textHelp={(\"Please provide an counterexample of an answer to your question above. \"\n            + \"It helps the worker understand what answers are unacceptable, \"\n            + \"and thus reduces low quality responses in your collected data.\"\n          )}\n          textAdd=\"Add a counterexample\"\n          placeholder={this.props.placeholderCounterexample}\n          placeholderExplain=\"Why is this example badly done?\"\n          recommendedNumber={3}\n          recommendedMinNumber={1}\n          required={question.type === 'Open ended'}\n          minimumNumber={question.type === 'Open ended' ? 1 : 0}\n        />\n      </>\n    );\n  }\n\n  _showQuestionType(question) {\n    const { getFieldDecorator } = this.props.form;\n    const fieldNameQuestion = (\n      String(this.props.rootKey[0])\n      + this.props.rootKey.slice(1).map((key) => (`[${key}]`)).join('')\n    );\n\n    if (this.constructor.questionTypes.length === 0) {\n      return null;\n    } else {\n      return (\n        <Form.Item {...this.formItemLayout} label=\"Type of Question\">\n          {getFieldDecorator(\n            `${fieldNameQuestion}[${question.key}][\"type\"]`,\n            {\n              initialValue: question.type,\n              rules: [{\n                required: true,\n                message: \"Select one of them\"\n              }]\n            }\n          )(\n            <Radio.Group onChange={\n              (e) => {\n                this.props.updateByKey(\n                  this.props.rootKey.concat([question.key]),\n                  { type: e.target.value }\n                )\n              }}\n              name={question.key.toString()}>\n              {this.constructor.questionTypes.map(\n                ([value, description, explanation]) => (\n                  <Radio value={value}>\n                    <span>\n                      {description} &nbsp;\n              <Tooltip title={explanation}>\n                        <QuestionCircleOutlined />\n                      </Tooltip>\n                    </span>\n                  </Radio>\n                )\n              )}\n            </Radio.Group>\n          )}\n        </Form.Item>\n      );\n    }\n  }\n}\n\n\nclass SurveyQuestionList extends QuestionList {\n  static questionTypes = [\n    [\"Voting\", \"A/B tests\", \"Select the system that performed better on a specific task you specify.\"],\n    [\"Likert Scale\", \"Likert Scale\",\n      \"Give the system a score from 1 to 5, 1 as strongly disagree and 5 as strongly agree.\"],\n    [\"Open ended\", \"Open ended\",\n      \"Require more thought and more than a simple one-word answer.\"],\n    [\"Radio\", \"Multiple Choice\",\n      \"Multiple choices are given.\"]\n  ];\n}\n\n\nclass DynamicItems extends React.Component {\n  /* Props:\n   * @{object}\tform:\n   * @{style}\tformItemLayout:\n   * @{function} removeByKey: Function that can remove a element by id.\n   * @{function} addByKey: Function that can remove a element by id.\n   * @{function} updateByKey: Function that can update a element by id.\n   * @{Array} rootKeys: Keys to update parent state.\n   * @{Array} items: `[{key: @{int}, content: @{string}}]`, items to show.\n   * @{string} title: \n   * @{string} textHelp: \n   * @{string} textAdd: \n   * @{string} placeholder: \n   * @{int} recommendedNumber:      \n   * @{int} minimumNumber: Default 1.\n   */\n  constructor(props) {\n    super(props);\n    this.styleWarning = {\n      'width': '90%', 'color': 'darkorange',\n      'text-align': 'center',\n      'font-weight': 'bold'\n    };\n  }\n\n  render() {\n    const { fields, rootKeys, placeholder, placeholderExplain, textHelp,\n      recommendedNumber, recommendedMinNumber, textAdd, items, title } = this.props;\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n    /* Show dynamic fields, and the adding button as well. */\n    return (\n      <>\n\n        {/* The dynamic fields. */}\n        <Form.Item\n          {...(this.props.formItemLayout)}\n          label={(\n            <span>\n              {title} &nbsp;\n              <Tooltip\n                title={textHelp}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>)}\n          required={this.props.required !== undefined ? this.props.required : true}\n        >\n          {/* Warning message when the number of fields is too few. */}\n          {\n            (recommendedMinNumber !== undefined && items.length < recommendedMinNumber) ?\n              <span style={this.styleWarning}>\n                <ExclamationCircleOutlined />\n                &nbsp;\n                Having at least {recommendedMinNumber} example is recommended.\n              </span> : null\n          }\n\n          {this._showDynamicInputs(items, rootKeys, placeholder, placeholderExplain)}\n        </Form.Item>\n\n        {/* The add button. */}\n        <Form.Item\n          {...formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\"\n            onClick={() => { this.props.addByKey(rootKeys) }}\n            style={{ width: '90%' }}>\n            <PlusOutlined /> {textAdd}\n          </Button>\n          {/* Warning message when the number of fields is too many. */}\n          {\n            (recommendedNumber !== undefined && items.length > recommendedNumber) ?\n              <div style={this.styleWarning}>\n                <ExclamationCircleOutlined />\n              Adding more than {recommendedNumber} examples is not recommended.\n            </div> : null\n          }\n\n        </Form.Item>\n      </>\n    );\n  }\n\n  _showDynamicInputs(fields, keys, placeholder = \"\", placeholderExplain = undefined) {\n    /** \n     * Render example(s) based on the type of `example[k]`. `example[k]` can\n     * a string or an array of string.\n     *\n     * @param {Array}\t    examples\t\t\tExamples. Each element in it is {key: int, content: string}.\n     * @param {Array}\t\tkeys\t\t\t\tPath to the fields, so the parent can access the fields by\n     * `self.state[keys[0]][keys[1]][...]`.\n     * @param {String}\tplaceholder\t\t\t\tPlaceholder for the fields.\n     * @param {String}\tplaceholderExplain\t\tIf set, a filed for explanation will be shown\n     **/\n    const { getFieldDecorator } = this.props.form;\n    const { removeExample } = this.props;\n\n    // Workround (?)\n    if (fields === undefined) {\n      fields = []\n    }\n\n    // Generate the field name in the HTML form.\n    let fieldName = keys[0].toString();\n    for (let key of keys.slice(1)) {\n      fieldName = fieldName + `[${key}]`;\n    }\n\n    // Elements to show\n    const children = []\n    for (const field of fields) {\n      const fieldSuffix = placeholderExplain === undefined ? \"\" : '[\"content\"]';\n      const width = placeholderExplain === undefined ? \"90%\" : \"45%\";\n      const handleChange = (event) => {\n        this.props.updateByKey(\n          keys.concat([field.key]),\n          { content: event.target.value }\n        )\n      };\n      const handleChangeExp = (event) => {\n        this.props.updateByKey(\n          keys.concat([field.key]),\n          { explain: event.target.value }\n        )\n      };\n\n      children.push(\n        getFieldDecorator(\n          `${fieldName}[${field.key}]${fieldSuffix}`, {\n          initialValue: field.content,\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please input some text.\",\n          }],\n          onChange: handleChange\n        }\n        )(\n          <Input.TextArea\n            placeholder={placeholder} style={{ width: width, marginRight: 8 }}\n            autoSize\n          />\n        )\n      );\n\n      // show filed for exaplain\n      if (placeholderExplain !== undefined) {\n        children.push(\n          getFieldDecorator(\n            `${fieldName}[${field.key}][\"explain\"]`, {\n            initialValue: field.explain,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              /* required: true, */\n              whitespace: true,\n              message: \"Please input exaplaination.\",\n            }],\n            onChange: handleChangeExp\n          }\n          )(\n            <Input.TextArea\n              placeholder={placeholderExplain} style={{ width: width, marginRight: 8 }}\n              autoSize\n            />\n          )\n        );\n      }\n\n      // show remove button\n      if (fields.length > (this.props.minimumNumber === undefined ? 1 : this.props.minimumNumber)) {\n        children.push(\n          <Tooltip>\n            <a onClick={\n              (\n                (id) => () => (\n                  this.props.removeByKey(keys.concat([id]))\n                )\n              )(field.key)\n            }>\n              <MinusCircleOutlined />\n            </a>\n          </Tooltip>\n        );\n      }\n    }\n    return children;\n  }\n\n}\n\nexport default QuestionList;\nexport { lists2Questions, addKeys, SurveyQuestionList, DynamicItems };\n","import React from \"react\";\nimport {Button, Modal, Divider} from 'antd';\n\n\nclass PreviewButton extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {visible: this.props.initState || false};\n  }\n  \n  render() {\n    const {visible} = this.state;\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: {span: 24, offset: 0},\n        sm: {span: 20, offset: 4},\n      },\n    };\n    return (\n      <>\n        <Button {...formItemLayoutWithOutLabel}\n                disabled={this.props.consent === undefined || this.props.consent === \"\"}\n                onClick={this.open}\n                style={{width: '90%'}}>\n          Preview Consent Form\n        </Button>\n        <style>\n          {`\n        .ant-modal-content {height: 100%; display: flex; flex-direction: column;}\n          `}\n        </style>\n        <Modal\n          visible={visible}\n          title=\"Preview of Consent Form\"\n          width=\"80%\"\n          height=\"90%\"\n          closable={true}\n          maskClosable={true}\n          bodyStyle={{flexGrow: 1}}\n          onCancel={this.close}\n          centered\n          footer={\n            <Button key=\"Close\" type=\"primary\" onClick={this.close}>\n              Close\n            </Button>\n          }\n        >\n          <iframe src={this.props.consent} width=\"100%\" height=\"100%\"></iframe>\n        </Modal>\n      </>\n    );\n  }\n  \n  open = () => {\n    this.setState({visible: true});\n  }\n  \n  close = () => {\n    this.setState({visible: false});\n  }\n\n}\n\n\nexport default PreviewButton;\n","import React from 'react';\nimport {Input, Button} from 'antd';\nimport { SketchPicker, ChromePicker } from 'react-color';\n\nclass ColorPicker extends React.Component {\n  /* Args:\n     form\n     {@String} name: name of the input field.\n     {@String} initialValue:\n     {@String} previewText\n   */\n  constructor (props) {\n    super(props);\n    this.state = {\n      visiblePicker: false,\n      color: this.props.initialValue\n    };\n    this.color = this.props.initialValue;\n  }\n\n  handleClick = () => {\n    this.setState(\n      { visiblePicker: !this.state.visiblePicker }\n    );\n  };\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.initialValue !== this.props.initialValue) {\n      this.setState({color: this.props.initialValue});\n    }\n  }\n  \n  close () {\n    this.setState({\n      visiblePicker: false,\n    });\n    if (this.color !== undefined) {\n      this.setState({\n        color: this.color.hex\n      });\n      this.props.form.setFieldsValue(\n        {[this.props.name]: this.color.hex.toUpperCase()}\n      );\n    }\n  };\n\n  handleChange (e) {\n    e.preventDefault();\n    this.setState({color: e.target.value});\n  }\n  \n  render() {\n    const {getFieldDecorator} = this.props.form;\n    let colorStyle;\n    if (this.props.previewText === undefined) {\n      colorStyle = {\n        background: this.state.color,\n        color: this.state.color,\n        \"border-style\": \"solid\",\n        \"border-width\": \"1px\",\n        \"margin-left\": \"5px\",\n        \"border-color\": \"#BBBBBB\"\n      };\n    } else {\n      colorStyle = {\n        color: this.state.color,\n      };\n    }\n    \n    return (<>\n      {this.showPicker()}\n      <div>\n        {getFieldDecorator(this.props.name, {\n          initialValue: this.state.color,\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please specify a color.\",\n          }],\n          onChange: (e) => this.handleChange(e)\n        })(\n          <Input placeholder=\"#000000\"\n                 style={{width: \"20%\"}}\n                 onClick={this.handleClick}\n          />\n        )}\n        <span style={colorStyle}>{this.props.previewText || \"⬤\"}</span>\n      </div>\n    </>);\n  }\n\n  handleColorChange (color, event) {\n    this.color = color;\n  }\n  \n  showPicker () {\n    const popover = {\n      position: 'absolute',\n      zIndex: '2',\n    };\n\n    const inner = {\n      left: 0,\n      bottom: 0,\n      position: 'absolute'\n    };\n    \n    const cover = {\n      position: 'fixed',\n      top: '0px',\n      right: '0px',\n      bottom: '0px',\n      left: '0px',\n    };\n\n    if (this.state.visiblePicker) {\n      return (<>\n        <div style={ popover }>\n          <div style={ inner }>\n            <SketchPicker\n              color={this.state.color}\n              onChangeComplete={(color) => this.handleColorChange(color)}\n            />\n            <Button onClick={() => this.close()}\n                    style={{width: \"100%\"}}>Done\n            </Button>\n          </div>\n        </div>\n      </>);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ColorPicker;\n","import React from 'react';\nimport { Input, InputNumber, Button, Select, Radio, Tooltip } from 'antd';\nimport {\n  AlignLeftOutlined, AlignCenterOutlined, AlignRightOutlined,\n  FontColorsOutlined, FontSizeOutlined, LineHeightOutlined\n} from '@ant-design/icons';\nimport { SketchPicker } from 'react-color';\n\nclass FontPicker extends React.Component {\n  /* Args:\n     form\n     {@Array} keys: Path to the config. e.g ['style', 'instruction'].\n     {@Function} updateByKey: \n     {@String} fontFamily\n     {@String} fontSize\n     {@String} color\n     {@String} previewText\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visiblePicker: false,\n    };\n    this.color = this.props.color;\n  }\n\n  handleClick = () => {\n    this.setState(\n      { visiblePicker: !this.state.visiblePicker }\n    );\n  };\n\n  close() {\n    // close color picker\n    this.setState({\n      visiblePicker: false\n    });\n\n    // update parent state\n    if (this.color !== undefined) {\n      this.props.updateByKey(this.props.keys, { color: this.color.hex.toUpperCase() });\n\n      // update text in the input\n      const path = this.props.keys.concat(['color']);\n      const colorFieldName = path2Name(path);\n      this.props.form.setFieldsValue(\n        { [colorFieldName]: this.color.hex.toUpperCase() }\n      );\n    }\n  };\n\n  handleColorInputChange(e) {\n    /* Update parent state when the input box is changed */\n    e.preventDefault();\n    const path = this.props.path.concat(['color']);\n    const colorFieldName = path2Name(path);\n    this.props.form.setFieldsValue(\n      { [colorFieldName]: this.color.hex.toUpperCase() }\n    );\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const stylePreviewText = {\n      color: this.props.color,\n      \"fontFamily\": this.props.fontFamily,\n      \"fontSize\": `${this.props.fontSize}pt`,\n      \"padding-left\": \"0.5em\",\n      \"vertical-align\": \"middle\",\n      display: 'inline-block',\n      width: '40%'\n    };\n    const fontList = [\n      'Helvetica',\n      'Arial',\n      'Times New Roman',\n      'Impact',\n      'Times',\n      'Arial Black'\n    ];\n    const prefix = path2Name(this.props.keys);\n    return (<>\n      {this.showPicker()}\n      <div>\n        {/* color */}\n        <Tooltip title=\"Text color.\">\n          <FontColorsOutlined\n            style={{ marginLeft: \"0.5em\", marginRight: \"0.5em\", color: this.props.color }} />\n        </Tooltip>\n        {getFieldDecorator(prefix + \"['color']\", {\n          initialValue: this.props.color || \"#000000\",\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please specify a color.\",\n          }],\n          onChange: (e) => this.handleColorInputChange(e)\n        })(\n          <Input placeholder=\"#000000\"\n            style={{\n              width: \"1em\", height: \"1em\",\n              color: 'transparent', background: this.props.color\n            }}\n            onClick={this.handleClick}\n          />\n        )}\n\n        {/* font-size */}\n        <Tooltip title=\"Font size.\">\n          <FontSizeOutlined style={{ marginLeft: \"1em\", marginRight: \"0.5em\" }} />\n        </Tooltip>\n        {getFieldDecorator(prefix + \"['fontSize']\", {\n          initialValue: `${this.props['fontSize'] || 12}`,\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please specify the size.\",\n          }],\n          onChange: (n) => this.props.updateByKey(\n            this.props.keys, { \"fontSize\": n }\n          )\n        })(\n          <InputNumber style={{ width: \"4em\" }} />\n        )}\n\n        {/* line height */}\n        <Tooltip title=\"Line height.\">\n          <LineHeightOutlined style={{ marginLeft: \"1em\", marginRight: \"0.5em\" }} />\n        </Tooltip>\n        {getFieldDecorator(prefix + \"['lineHeight']\", {\n          initialValue: `${this.props['lineHeight'] || 1.5}`,\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please specify the line hight.\",\n          }],\n        })(\n          <InputNumber step={0.25} style={{ width: \"4em\" }} />\n        )}\n\n        {/* font-family */}\n        <span style={{ marginRight: \"0.5em\" }}></span>\n        {getFieldDecorator(prefix + \"['fontFamily']\", {\n          initialValue: this.props.fontFamily || 'Helvetica',\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please specify the font.\",\n          }],\n          onChange: (value) => this.props.updateByKey(\n            this.props.keys, { 'fontFamily': value }\n          )\n        })(\n          <Select defaultValue={this.state.family}\n            style={{ width: \"15%\", \"fontFamily\": this.props.fontFamily }}>\n            {fontList.map(\n              (font, i) => (\n                <Select.Option\n                  value={font} key={i}\n                  style={{ \"font-family\": font }}>\n                  {font}\n                </Select.Option>\n              )\n            )}\n          </Select>\n        )}\n\n        {/* align */}\n        <span style={{ marginRight: \"0.5em\" }}></span>\n        {getFieldDecorator(prefix + \"['text-align']\", {\n          initialValue: this.props['textAlign'] || 'left',\n          /* onChange: (value) => this.props.updateByKey(\n           *   this.props.keys, {textAlign: value}\n           * ) */\n        })(\n          <Radio.Group>\n            <Radio.Button value=\"left\" style={{ paddingLeft: '0.5em', paddingRight: '0.5em' }}>\n              <AlignLeftOutlined />\n            </Radio.Button>\n            <Radio.Button value=\"center\" style={{ paddingLeft: '0.5em', paddingRight: '0.5em' }}>\n              <AlignCenterOutlined />\n            </Radio.Button>\n            <Radio.Button value=\"right\" style={{ paddingLeft: '0.5em', paddingRight: '0.5em' }}>\n              <AlignRightOutlined />\n            </Radio.Button>\n          </Radio.Group>\n        )}\n        <span style={stylePreviewText}>{this.props.previewText || \"preview\"}</span>\n      </div>\n    </>);\n  }\n\n  handleColorPickerChange(color, event) {\n    this.color = color;\n  }\n\n  showPicker() {\n    const popover = {\n      position: 'absolute',\n      zIndex: '2',\n    };\n\n    const inner = {\n      left: 0,\n      bottom: 0,\n      position: 'absolute'\n    };\n\n    const cover = {\n      position: 'fixed',\n      top: '0px',\n      right: '0px',\n      bottom: '0px',\n      left: '0px',\n    };\n\n    if (this.state.visiblePicker) {\n      return (<>\n        <div style={popover}>\n          <div style={inner}>\n            <SketchPicker\n              color={this.state.color}\n              onChangeComplete={(color) => this.handleColorPickerChange(color)}\n            />\n            <Button onClick={() => this.close()}\n              style={{ width: \"100%\" }}>Done\n            </Button>\n          </div>\n        </div>\n      </>);\n    } else {\n      return null;\n    }\n  }\n}\n\n\nfunction path2Name(path) {\n  /* Convert a path to name of a form item. \n     Args:\n     {@Array} path\n     Return: {@String}\n   */\n  let name = \"\";\n  for (const v of path) {\n    name = name + `['${v}']`;\n  }\n  return name;\n}\n\nexport default FontPicker;\n\n","import React, { Component } from 'react'\nimport { Button, Form, Input, message, Radio, Switch, Tooltip, InputNumber } from 'antd';\nimport { QuestionCircleOutlined, UploadOutlined } from '@ant-design/icons';\nimport { clientUrl, serverUrl } from \"../../../configs\";\nimport FileReaderInput from 'react-file-reader-input';\nimport QuestionList, { lists2Questions, addKeys, DynamicItems } from \"./QuestionList.js\";\nimport PreviewButton from \"./PreviewButton.js\";\nimport { PreviewConsent } from \"./Preview.js\";\nimport { saveAs } from 'file-saver';\nimport ColorPicker from \"./ColorPicker.js\"\nimport FontPicker from \"./FontPicker.js\"\n\nconst FormItem = Form.Item;\n\nlet convoLength = 0\n\nclass Configure extends Component {\n  // Text shown above the general question section, and when\n  // hovering the question mark of general question section.\n  static instructionSurvey = \"\";\n  // Text shown when hovering the question mark of the questions\n  // in general question section.\n  static helpTextSurveyQuestion = \"\";\n  constructor(props) {\n    super(props);\n    this.state = {\n      url_dialog_system: [],\n      generic_introduction: \"\",\n      generic_instructions: \"\",\n      name_of_dialog: [],\n      speech: false,\n      interface: \"both\",\n      deploy: false,\n      sys_index: 0,\n      survey_index: 0,\n      payment: \"\",\n      time: \"\",\n      consent: [], /* Content of the consent form. */\n      requirements: [], /* Requirements user must fulfill. */\n      questionSurveys: [], /* General questions. */\n      questionFeedbacks: [], /* Feedback questions. */\n      questionSystems: [], /* System specific questions. */\n      loading: true,\n      /* Indicate the loading state. It will be false after \n         data is copied from `this.makeProps` */\n    }\n\n    this.formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 18 },\n      },\n    };\n    this.formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n\n  }\n\n  componentDidMount() {\n    this.makeProps();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.session._id !== prevProps.session._id ||\n      this.props.session.lastModifiedDate !== prevProps.session.lastModifiedDate\n      // after submitting, `lastModifiedDate` will be change by backend.\n    ) {\n      this.makeProps();\n    }\n\n    // when config is loaded from a file.\n    if (prevState.configRevision !== this.state.configRevision) {\n      this.props.form.resetFields();\n    }\n  }\n\n  makeProps() {\n    /* This function copy and process data from `this.props.session`. */\n    for (const prop of [\"generic_instructions\", \"payment\", \"interface\", \"time\",\n      \"consent\", \"url_dialog_system\", \"nUnit\", \"nAssignment\",\n      \"generic_introduction\", \"requirements\", \"deploy\",\n      \"hasFeedbackQuestion\", \"numofsent\", \"enableMarkdown\"]) {\n      this.setState({ [prop]: this.props.session[prop] });\n    };\n    // inititalize style if it is not defined.\n    this.setState({\n      style: this.props.session.style || {\n        global: { spacing: 0, background: \"#FFFFFF\" },\n        tabTitle: { fontSize: 14, color: \"#000000\" },\n        background: { fontSize: 18, color: \"#000000\" },\n        instruction: { fontSize: 18, color: \"#282828\" },\n        example: { fontSize: 14, color: \"#282828\" },\n        context: { fontSize: 14, color: \"#282828\" },\n        response: { fontSize: 14, color: \"#282828\" },\n        question: { fontSize: 14, color: \"#282828\" },\n        answer: { fontSize: 14, color: \"#282828\" },\n        utterance: { fontSize: 20, color: \"#282828\", textAlign: \"center\" },\n        dialogInstruction: { fontSize: 14, color: \"#282828\" }\n      }\n    });\n\n    // Workaround\n    if (this.props.session.questionSurveys === undefined) {\n      // Workaround\n      let questions = lists2Questions(\n        this.props.session.pollquestion || [],\n        this.props.session.typeofpoll,\n        this.props.session.radio,\n        this.props.session.example,\n        this.props.session.counterexample\n      );\n      this.setState({ \"questionSurveys\": questions });\n    } else {\n      this.setState(\n        { \"questionSurveys\": addKeys(this.props.session.questionSurveys) }\n      );\n    }\n    if (this.props.session.questionFeedbacks === undefined) {\n      const sessionFeedbacks = this.props.session.feedback || [];\n      // Workaround\n      let feedbacks = lists2Questions(\n        sessionFeedbacks,\n        this.props.session.feedbackType || sessionFeedbacks.map((_) => (\"Open ended\")),\n        this.props.session.feedbackradio || sessionFeedbacks.map((_) => ([]))\n      );\n      this.setState({ \"questionFeedbacks\": feedbacks });\n    } else {\n      this.setState(\n        { \"questionFeedbacks\": addKeys(this.props.session.questionFeedbacks) }\n      );\n    }\n    this.setState({\n      requirements: addKeys(this.props.session.requirements || [])\n    });\n\n    this.setState({\n      loading: false,\n      payment: this.props.session.payment,\n      recommendedPayment: calcRecommendedPayment(this.props.session.time)\n    });\n\n    this.setState({\n      noHits: calcNoHits(this.props.session.nUnit, this.props.session.nAssignment, 1)\n    })\n  };\n\n  traverseAndCopyByKey = (keys) => {\n    /* This function traverse to the node according to the `keys`.\n     * @{Array} keys: Specify the parent node as `this.state[key[0]][key[1]][...`.\n     * Return:\n     * @{Array}: nodes along the `keys` path will be returned. Each returned node\n     * is a shallowcopy of the corresponding node.\n     */\n    const shallowCopy = (x) => (Array.isArray(x || []) ? (x || []).slice() : Object.assign({}, x));\n    let path = [shallowCopy(this.state)];\n    let node = this.state;\n    for (const key of keys) {\n      if (Array.isArray(node) && node[0].key !== undefined) {\n        for (const [i, child] of node.entries()) {\n          if (child.key === key) {\n            node = shallowCopy(child);\n            path[path.length - 1][i] = node;\n            break;\n          }\n        }\n      } else {\n        if (node[key] !== undefined) {\n          node = shallowCopy(node[key]);\n        } else {\n          node = [];\n        }\n        path[path.length - 1][key] = node;\n      }\n      path.push(node);\n    }\n    return path;\n  };\n\n  addByKey = (keys, toAdd = undefined) => {\n    /* Add `toAdd` or `{content: \"\"}` to a node in `this.state`. It presumes that\n     * the parent node is an array, and its children has an attribute `key`.\n     * @{Array} keys: Specify the parent node as `this.state[key[0]][key[1]][...`.\n     * @{Object} toAdd: Child that will be added to the parent node.\n     */\n    const path = this.traverseAndCopyByKey(keys);\n    let node = path[path.length - 1];\n\n    const newKey = (\n      node.length == 0 ? 0 : node[node.length - 1].key + 1\n    );\n    toAdd = toAdd === undefined ? { \"content\": \"\" } : toAdd;\n    node.push({ \"key\": newKey, ...toAdd });\n    this.setState({ [keys[0]]: path[1] });\n  };\n\n  removeByKey = (keys) => {\n    // Traverse to the parent of the target node.\n    const path = this.traverseAndCopyByKey(keys.slice(0, -1));\n    // The parent node\n    let node = path[path.length - 1];\n    // Look for the index that matches the key.\n    let indexToRemove = -1;\n    const keyToRemove = keys[keys.length - 1];\n    for (let [i, x] of node.entries()) {\n      if (x.key == keyToRemove) {\n        indexToRemove = i;\n      }\n    }\n    // In-place removal.\n    if (indexToRemove >= 0) {\n      node.splice(indexToRemove, 1);\n    }\n    // Update state.\n    this.setState({ [keys[0]]: path[1] })\n  };\n\n  updateByKey = (keys, content) => {\n    /* Update the state by key. \n     * @{Array} keys: the node to update is `this.state[key[0]][key[1]][...`.\n     * @{Object} content: `Object.assign(node, content)` will be applied.\n     */\n    const path = this.traverseAndCopyByKey(keys);\n    let node = path[path.length - 1];\n    Object.assign(node, content);\n    this.setState({ [keys[0]]: path[1] });\n  };\n\n  handlePdfInputChange(_, results) {\n    const [e, file] = results[0];\n    let pdf = e.target.result;\n    this.setState({ consent: [file.name, pdf] });\n  }\n\n  handleSubmit(e) {\n    /* Called when the submit/deploy button is clicked. */\n    e.preventDefault();\n\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        values[\"consent\"] = this.state.consent;\n        this.submit(values, this.props.session._id);\n      }\n      else {\n        console.log(err);\n      }\n    });\n  };\n\n  handleDeploy(e) {\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        values[\"consent\"] = this.state.consent;\n        this.submit(values, this.props.session._id);\n        this.setState({ deploy: true });\n      }\n      else {\n        if (e) {\n          /* message.error(\"Some fileds are missing!\"); */\n          this.setState({ deploy: false });\n        }\n      }\n    });\n  }\n\n  handleUploadConfig(event, results) {\n    /* this.state.setState(results); */\n    const [e, file] = results[0];\n    try {\n      let config = JSON.parse(e.target.result);\n      this.setState({\n        ...config,\n        // trigger reset fileld defined in componentDidUpdate\n        configRevision: (this.state.configRevision || 0) + 1\n      });\n      message.success(\"Success\");\n    } catch (except) {\n      message.error(\"Fail to load from file.\");\n      console.log(except);\n    }\n\n  }\n\n  submit(data, id) {\n    /* POST data to the server. \n     * @{Object} data: data in the configuration form.\n     * @{String} id: the unique id of this task.\n     */\n    let this_ = this;\n    return fetch(serverUrl + this.saveURL + id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n        if (json.message === \"success\") {\n          message.success(\"Success\");\n          this_.props.new_project_data(this_.taskName);\n          this_.props.loadData(\n            this_.props.session.createdAt,\n            this_.props.session.password,\n            this_.taskName\n          );\n        }\n        else {\n          message.success(\"Fail\");\n        }\n      })\n  }\n\n  render() {\n    throw \"Not implemented!\";\n    return null;\n  }\n\n  _showGeneralConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>General Configuration</h3>\n      <p></p>\n      <FormItem\n        {...formItemLayout}\n        label={(\n          <span>\n            Load configuration from file &nbsp;\n            <Tooltip title=\"Upload the configuration JSON file of a HIT. A JSON configuration file can be downloaded with the button at the end of this page.\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n      >\n        <FileReaderInput\n          as=\"text\"\n          onChange={(e, results) => this.handleUploadConfig(e, results)}\n        >\n          <Button>\n            <UploadOutlined /> Click to Upload\n          </Button>\n        </FileReaderInput>\n      </FormItem>\n\n      <FormItem\n        {...(formItemLayout)}\n        label={(\n          <span>\n            Background&nbsp;\n            <Tooltip title=\"General introductions, the objective of this study, etc.\" >\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n        required={true}\n      >\n        {getFieldDecorator(`generic_introduction`, {\n          initialValue: this.state.generic_introduction,\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please write background\",\n          }],\n        })(\n          <Input.TextArea placeholder=\"The objective of this study is ...\"\n            style={{ width: '90%', marginRight: 8 }} />\n        )}\n      </FormItem>\n      <p style={{ \"padding-left\": \"25%\" }}>\n        This <a href=\"https://mturkpublic.s3.amazonaws.com/docs/MTURK_BP.pdf\">guide </a>\n        provides helpful tips in creating clear, concise instructions for the workers.\n      </p>\n      <FormItem\n        {...(formItemLayout)}\n        label={(\n          <span>\n            General Instructions&nbsp;\n            <Tooltip title={\n              <div>\n                <div>\n                  Overall steps, what to label, etc.\n                </div>\n                <div>\n                  Instructions should be specific, easy to read, and address any specific\n                  actions workers should do when completing your HIT.\n                </div>\n                <div>\n                  Stating any evaluation criteria that you are looking for in each HIT may\n                  also prevent the need for HIT rejections and attract workers who will\n                  complete the HIT accordingly.\n                </div>\n              </div>}>\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n        required={true}\n      >\n        {getFieldDecorator(`generic_instructions`, {\n          initialValue: this.state.generic_instructions,\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please write instructions\",\n          }],\n        })(\n          <Input.TextArea placeholder=\"Please talk to the systems.\" style={{ width: '90%', marginRight: 8 }} />\n        )}\n      </FormItem>\n\n      <FormItem\n        {...formItemLayout}\n        label={(\n          <span>\n            Enable Markdown (<a href=\"https://commonmark.org/help/\">reference</a>) &nbsp;\n            <Tooltip title={(\n              'If Markdown is enabled, the background description '\n              + ' and the instruction will be rendered as Markdown.'\n              + 'Markdown is a lightweight text formating language. '\n              + 'You can format a span of text in italic face or bold face '\n              + 'and add hyperlinks as well as images with simple syntax. '\n              + 'Bullet points are also supported. Please check the reference '\n              + 'for more information.'\n            )}\n            >\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n      >\n        {getFieldDecorator('enableMarkdown',\n          {\n            initialValue: this.state.enableMarkdown || false,\n            valuePropName: 'checked',\n            onChange: (e) => { this.setState({ enableMarkdown: e }) }\n          }\n        )(\n          <Switch />\n        )}\n      </FormItem>\n\n      <FormItem\n        {...(formItemLayout)}\n        label={(\n          <span>\n            Time (minutes/HIT) &nbsp;\n            <Tooltip title=\"Fill out the amount of time you expect the HIT to take in minutes\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n        required={true}\n      >\n        {getFieldDecorator(`time`, {\n          initialValue: this.state.time,\n          validateTrigger: ['onChange', 'onBlur'],\n          onChange: this._onChangeTime,\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please fill out time in minutes\",\n          }],\n        })(\n          <Input.TextArea placeholder=\"20 (in minutes)\" style={{ width: '90%', marginRight: 8 }} />\n        )}\n      </FormItem>\n      <p style={{ \"padding-left\": \"25%\", \"padding-right\": \"8%\" }}>\n        To estimate the time required for a HIT, you can ask your colleagues to do some HITs,\n        then average the time they spend.\n      </p>\n\n      <FormItem\n        {...(formItemLayout)}\n        label={(\n          <span>\n            Payment (USD/HIT) &nbsp;\n            <Tooltip title=\"Fill out the amount you will pay for the HIT\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n        required={true}\n      >\n        {getFieldDecorator(`payment`, {\n          initialValue: this.state.payment,\n          onChange: (\n            (e) => { e.preventDefault(); this.setState({ payment: parseFloat(e.target.value) }); }\n          ),\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [{\n            required: true,\n            whitespace: true,\n            message: \"Please fill out payment\",\n          }],\n        })(\n          <Input.TextArea placeholder=\"$8.00\" style={{ width: '90%', marginRight: 8 }} />\n        )}\n      </FormItem>\n      {/* Show info when payment is undefined */\n        (this.state.recommendedPayment !== undefined\n          && (isNaN(this.state.payment) || this.state.payment === \"\")) ?\n          <p style={{ \"margin-left\": \"25%\", \"color\": \"black\", \"font-weight\": \"bolder\" }}>\n            The recommended minimum payment is <b>{this.state.recommendedPayment}.</b>\n          </p>\n          : null}\n\n      {/* Show with warning style when the payment < recommended */\n        (this.state.recommendedPayment !== undefined\n          && parseFloat(this.state.payment) < parseFloat(this.state.recommendedPayment)) ?\n          <p style={{ \"margin-left\": \"25%\", \"color\": \"darkorange\", \"font-weight\": \"bolder\" }}>\n            <b>The recommended minimum payment is <u>{this.state.recommendedPayment}</u>. </b> <br />\n         The workers need a living wage $15/hr to meet their basic needs.\n       </p>\n          : null}\n\n      {/*\n          <FormItem\n          {...formItemLayout}\n          label={(\n          <span>\n          Speech mode&nbsp;\n          <Tooltip title=\"Workers will talk to systems using automatic speech recognition.\">\n          <QuestionCircleOutlined />\n          </Tooltip>\n          </span>\n          )}\n          >\n          {getFieldDecorator('speech',\n          {\n          initialValue: this.props.session.speech,\n          valuePropName: 'checked'\n          }\n          )(\n          <Switch/>\n          )}\n          </FormItem>\n        */}\n\n      {this.taskName === \"interactive\" ?\n        <FormItem\n          label=\"Interface\"\n          {...formItemLayout}\n        >\n          {getFieldDecorator('interface', { initialValue: this.state.interface })(\n            <Radio.Group>\n              <Radio.Button value=\"text\">Text</Radio.Button>\n              <Radio.Button value=\"speech\">Speech</Radio.Button>\n              <Radio.Button value=\"both\">Both text and speech</Radio.Button>\n              <Radio.Button value=\"continuous\">Continuous speech</Radio.Button>\n            </Radio.Group>\n          )}\n        </FormItem>\n        : null}\n    </>\n    );\n  }\n\n  _onChangeTime = (event) => {\n    event.preventDefault()\n    const time = event.target.value;\n    this.setState({ recommendedPayment: calcRecommendedPayment(time) });\n  }\n\n  _onChangeTaskNo = (event) => {\n    event.preventDefault()\n    const tasks = event.target.value;\n    this.setState({ noHits: calcNoHits(tasks, this.state.nAssignment, convoLength), nUnit: tasks })\n  }\n\n  _onChangeAssignmentNo = (event) => {\n    event.preventDefault()\n    const tasks = event.target.value;\n    this.setState({ noHits: calcNoHits(this.state.nUnit, tasks, convoLength), nAssignment: tasks })\n  }\n\n  _showAnnotationConfig(textTask, dataLength) {\n    /* Params:\n     * @{String} TextSample: the thing to be annotated in this task, e.g. \"conversation\".\n     * This will be used to fill the help text in the configuration fields.\n     */\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const { helpTextNAnnotation } = this.constructor;\n\n    convoLength = dataLength\n\n    return (<>\n      <div style={{ \"padding-left\": \"1%\" }}>\n        <FormItem\n          {...(formItemLayout)}\n          label={(\n            <span>\n              # of {textTask}/HIT &nbsp;\n              <Tooltip title={(\n                `Specify the number of ${textTask}(s) the `\n                + \"worker needs to annotate in each HIT. \"\n                + \"For example, if 5 is specified, then the worker \"\n                + `will need to annotation 5 ${textTask}s before they `\n                + \"can submit the annotations.\"\n              )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={true}\n        >\n          {getFieldDecorator(`nUnit`, {\n            initialValue: this.state.nUnit,\n            onChange: this._onChangeTaskNo,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: (\n                `Please specify the number of ${textTask}(s) in each HIT.`\n              )\n            }],\n          })(\n            <Input.TextArea placeholder=\"5\" style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </FormItem>\n        <FormItem\n          {...(formItemLayout)}\n          label={(\n            <span>\n              # of annotations/{textTask} &nbsp;\n              <Tooltip title={(\n                `Please specify the number of workers you want a ${textTask} to be annotated by. `\n                + `For example, if 5 is specified, each ${textTask} will be shown to 5 different workers, `\n                + `and so each ${textTask} will be annotated 5 times.`\n              )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={true}\n        >\n          {getFieldDecorator(`nAssignment`, {\n            initialValue: this.state.nAssignment,\n            onChange: this._onChangeAssignmentNo,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please specify the number of annotations per ${textTask}.\",\n            }],\n          })(\n            <Input.TextArea placeholder=\"5\" style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </FormItem>\n        {this.state.noHits !== undefined ?\n          <div style={{ \"margin-left\": \"25%\", \"color\": \"darkorange\" }}>\n            <span>You should deploy a total of {this.state.noHits} HITs on Amazon Mechanical Turk.</span>\n          </div> : null}\n      </div>\n    </>);\n  }\n\n  _showQualityControlConfig(textTask) {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>Task Units for Quality Control</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>\n        In this section, you can configure whether or not you want to include\n        some task units in each HIT for quality control.\n        Theses task units can help you dectect bots or low-quality workers.\n        Two types of task units are available for quality control:\n        <ul>\n          <li>\n            Duplicated task units: These are used to compare the worker to\n            themself. If you decide to use duplicated task\n            units, the specified number of randomly selected task units in the\n            HIT will be duplicated. That is to say, the worker will have to\n            annotate some of the task units twice. A responsible worker should\n            provide the same annotation for the duplicated question as before.\n            By checking the consistency of their answers, bots and low-quality workers\n            can be detected.\n          </li>\n          <li>\n            Golden task units: These are used to compare the worker to an \"expert\" whose\n            answers are confirmed as correct. If you decide to use golden task units and upload\n            some data with golden answers, the specified number of randomly selected task\n            units in the golden data will be given to the workers in each HIT.\n            With these golden task units, DialCrowd can compare the annotations of a worker\n            and the golden answers. Workers of low-quality, who usually answer incorrectly,\n            can be detected accordingly.\n          </li>\n        </ul>\n        <b>The number of task units for quality control is recommended to be 10% of the number of\n          task units in a HIT.</b>\n      </p>\n      <div style={{\n        border: \"2px solid black\",\n        margin: \"10px\",\n        padding: 24\n      }}>\n        <FormItem\n          {...(formItemLayout)}\n          label={(\n            <span>\n              # of duplicated task units &nbsp;\n              <Tooltip title={(\n                `Specify the number of duplicated ${textTask}(s) the `\n                + \"to be included in each HIT. \"\n                + \"These duplicated task units can be used to detect \"\n                + \"annotators of low quality. \"\n                + \"When the number of duplicated tasks is greater than 0, \"\n                + \"in each HIT, randomly selected task units will be \"\n                + \"duplicated. With those duplicated task units, \"\n                + \"the DialCrowd system can automatically \"\n                + \"check whether a worker answered them consistently. \"\n                + \"A bad worker may be detected if the worker simply \"\n                + \"answered the questions randomly and annotated the \"\n                + \"duplicated questions with different answers.\"\n              )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={true}\n        >\n          {getFieldDecorator(`nUnitDuplicated`, {\n            initialValue: `${this.state.nUnitDuplicated || 0}`,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: (\n                `Please specify the number of duplicated ${textTask}(s) in each HIT.`\n              )\n            }],\n          })(\n            <InputNumber style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </FormItem>\n        <FormItem\n          {...(formItemLayout)}\n          label={(\n            <span>\n              # of golden task units &nbsp;\n              <Tooltip title={(\n                `Specify the number of golden task units `\n                + \"to be included in each HIT. \"\n                + \"A golden task unit is a unit with golden answer that you know is correct. \"\n                + \"These golden task units can be used to detect \"\n                + \"annotators of low quality. Specifically, with those \"\n                + \"golden task units, DialCrowd can automatically \"\n                + \"check whether a worker answered them correctly by comparing \"\n                + \"their annotation with the golden answer. \"\n                + \"A bad worker may be detected if the worker simply \"\n                + \"answered the questions randomly and annotated \"\n                + \"golden task units incorrectly.\"\n              )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={true}\n        >\n          {getFieldDecorator(`nUnitGolden`, {\n            initialValue: `${this.state.nUnitGolden || 0}`,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: (\n                `Please specify the number of ${textTask}(s) in each HIT.`\n              )\n            }],\n          })(\n            <InputNumber placeholder=\"0\" style={{ width: '90%', marginRight: 8 }}\n              defaultValue={this.state.nUnitGolden || 0} />\n          )}\n        </FormItem>\n        {this._showDataUpload(true)}\n      </div>\n    </>);\n  }\n\n  _showConsentConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>Consent Form</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>\n        You can have a consent form and some checkboxes that the workers must agree with before they\n        can start working.\n        For example, you may want to inform the workers of their rights, or possible risks when doing\n        the task.\n        When a worker opens the web page of the task, this consent form will be shown in\n        a pop-up window. The workers must agree with it to proceed.\n      </p>\n      <div style={{ border: \"2px solid black\", margin: \"10px\", padding: 24 }} >\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Consent form &nbsp;\n              <Tooltip title=\"Upload the consent form you want to show to the workers.\">\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n        >\n          <FileReaderInput\n            as='url'\n            onChange={(e, results) => this.handlePdfInputChange(e, results)}\n          >\n            <Button\n              style={{ width: '90%' }}\n            >\n              <UploadOutlined /> Click to Upload\n            </Button>\n          </FileReaderInput>\n          {this.state.consent && this.state.consent.length > 0 ?\n            <span>{this.state.consent[0]}</span> : null}\n        </FormItem>\n        <FormItem {...formItemLayoutWithOutLabel}>\n          {this.state.consent && this.state.consent.length > 0 ?\n            <PreviewButton consent={this.state.consent[1]} /> :\n            <PreviewButton consent={\"hi\"} />}\n        </FormItem>\n        <DynamicItems\n          form={this.props.form}\n          formItemLayout={formItemLayout}\n          removeByKey={this.removeByKey}\n          addByKey={this.addByKey}\n          updateByKey={this.updateByKey}\n          rootKeys={[\"requirements\"]}\n          items={this.state.requirements}\n          title=\"Consent Checkboxes\"\n          textHelp={(\n            \"A checkbox a workers must agree with before working on \"\n            + 'the task, e.g. \"I am over 18 years old.\" It can also be '\n            + 'a statement, e.g. \"I understand my answer will be published.\"'\n          )}\n          textAdd=\"Add consent checkbox\"\n          placeholder=\"I am over 18 years old.\"\n        />\n\n        <PreviewConsent consent={this.state.consent ? this.state.consent[1] || \"\" : \"\"}\n          requirements={this.state.requirements} />\n      </div>\n    </>);\n  }\n\n  _showSurveyConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const { instructionSurvey, helpTextSurveyQuestion } = this.constructor;\n    return (<>\n      {/* Surveys */}\n      <h3 style={{ \"padding-left\": \"1%\" }}>General Questions</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>{instructionSurvey}</p>\n      <QuestionList\n        form={this.props.form}\n        formItemLayout={formItemLayout}\n        removeByKey={this.removeByKey}\n        addByKey={this.addByKey}\n        updateByKey={this.updateByKey}\n        questions={this.state.questionSurveys}\n        rootKey={[\"questionSurveys\"]}\n        questionFieldLabel=\"Question\"\n        questionHelpText={helpTextSurveyQuestion}\n        textAddQuestion=\"Add \"\n        textInstruction={instructionSurvey}\n        placeholderQuestion=\"Can you identify the difference between the systems?\"\n        placeholderExample=\"Yes, system A reacts like a real human most.\"\n        placeholderCounterexample=\"I want the system to be more sociable.\"\n        placeholderOption=\"Yes, somewhat.\"\n      />\n    </>);\n  }\n\n  _showFeedbackConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>Feedback</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>\n        You can decide whether or not you want the optional feedback question of\n        <span style={{ \"font-weight\": \"800\" }}> \"Please let us know if you have any feedback.\" </span>\n        This question will be shown after the worker finishes the task.\n        Feedback can be very important in improving the quality of your task.\n        Although not all workers will give you feedback, usually you can get some\n        useful feedback that will help you improve your task, so you can collect\n        data of higher quality.</p>\n      <div style={{ border: \"2px solid black\", margin: \"10px\", padding: 24 }} >\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Have a Feedback Question &nbsp;\n              <Tooltip title='Set whether you want to have an optional feedback question.'>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n        >\n          {getFieldDecorator('hasFeedbackQuestion',\n            {\n              initialValue: this.state.hasFeedbackQuestion,\n              valuePropName: 'checked'\n            }\n          )(\n            <Switch />\n          )}\n        </FormItem>\n\n      </div>\n    </>);\n  }\n\n  _showAppearanceConfig(textStyleExtras = []) {\n    /* Params:\n       {@Array} textStyleExtras: Specify extra text style configuration. \n       Check the variable `textStyles` for the format of its elements.\n     */\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const style = this.state.style || { global: {} };\n    const textStyles = [\n      {\n        name: 'Title',\n        fieldName: 'tabTitle',\n        explain: \"Set the titles styles of the tabs in the worker's view\"\n      }, {\n        name: 'Background',\n        fieldName: 'background',\n        explain: \"Set the text style for the background description part.\"\n      }, {\n        name: 'Instruction',\n        fieldName: 'instruction',\n        explain: \"Set the text style for the instruction part.\"\n      }, {\n        name: 'Examples',\n        fieldName: 'example',\n        explain: \"Set the style of the text in the example/counterexample table in the worker's view.\"\n      },\n    ].concat(textStyleExtras);\n\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>Appearance</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>\n      </p>\n      <div style={{ border: \"2px solid black\", margin: \"10px\", padding: 24 }} >\n        {/* Background color. */}\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Background Color &nbsp;\n              <Tooltip title='Set the background color that workers see.'>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n        >\n          <ColorPicker\n            form={this.props.form}\n            name=\"['style']['global']['backgroundColor']\"\n            initialValue={style.global.backgroundColor || \"#FFFFFF\"}\n          />\n        </FormItem>\n\n        {textStyles.map(\n          textStyle => (\n            <FormItem\n              {...formItemLayout}\n              label={(\n                <span>\n                  Text Style - {textStyle.name} &nbsp;\n                  <Tooltip title={textStyle.explain}>\n                    <QuestionCircleOutlined />\n                  </Tooltip>\n                </span>\n              )}\n            >\n              <FontPicker\n                form={this.props.form}\n                keys={['style', textStyle.fieldName]}\n                previewText=\"Preview Text\"\n                updateByKey={this.updateByKey}\n                {...(style[textStyle.fieldName] || {})}\n              />\n            </FormItem>\n          )\n        )}\n\n        {/* Spacing */}\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Spacing Adjustment &nbsp;\n              <Tooltip title={(\"Adjust the space between elements in the worker's view. \"\n                + \"If you want a denser view, you can give a minus value. \"\n                + \"Be aware that lines may overlap with each other when the spacing is too small.\")}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n        >\n          {getFieldDecorator(`['style']['global']['spacing']`, {\n            initialValue: `${style.global.spacing || 0}`,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: (\n                `Please specify adjustment.`\n              )\n            }],\n          })(\n            <InputNumber placeholder=\"0\" style={{ width: '10%', marginRight: 8 }}\n              defaultValue={style.global.spacing || 0} />\n          )}\n        </FormItem>\n\n      </div>\n    </>);\n  }\n\n  _showButtons() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <br />\n      <div style={{ \"text-align\": \"center\", \"padding-left\": \"60px\" }}>\n        <span>Please save before you preview/download</span>\n      </div>\n      <FormItem {...formItemLayoutWithOutLabel}>\n        <Button\n          type=\"primary\" style={{ width: '90%' }} htmlType=\"submit\">Save</Button>\n        <Button\n          onClick={() => window.open(clientUrl + \"/worker_interactive?MID=dialcrowd&ID=\" + this.props.session._id)}\n          type=\"primary\" style={{ width: '90%' }} icon=\"EyeOutlined\">\n          Preview\n        </Button>\n\n        <br />\n        {/* {this._showVisibility()} */}\n        <Button type=\"primary\" style={{ width: '90%' }}\n          onClick={() => this._saveAsJSON()}\n        >\n          Download the Configuration as JSON\n        </Button>\n\n        <div style={{ \"padding-top\": \"5px\" }}>\n          {this._showTemplate()}\n        </div>\n      </FormItem>\n    </>);\n  }\n\n  _showTemplate() {\n    /* Ex. return <QualityTemplate thisstate={this.props.session}/>; */\n    throw \"Not implemented!\";\n  }\n\n  _saveAsJSON() {\n    let config = {};\n    const keys = [\n      'consent', 'generic_instructions', 'generic_introduction', 'hasFeedbackQuestion',\n      'interface', 'payment', 'requirements', 'time',\n      'questionSurveys', 'questionSystems',\n      'category_data', 'sequence_data', 'quality_data',\n      'dataGolden', 'nAssignment', 'numofsent',\n      'nUnit', 'nUnitDuplicated', 'nUnitGolden', 'payment',\n      'questionCategories', 'questionEntities', 'questionQualities', 'style'\n    ];\n    for (const key of keys) {\n      if (this.state[key] !== undefined) {\n        config[key] = this.state[key];\n      }\n    }\n    var blob = new Blob(\n      [JSON.stringify(config, null, 2)],\n      { type: 'text/plain;charset=utf-8' },\n    )\n    saveAs(blob, `${this.props.session.name}.json`)\n  }\n\n  _showVisibility() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout } = this;\n    return (<>\n      <div style={{ \"padding-left\": \"35%\" }}>\n        <FormItem\n          {...formItemLayout}\n          label={(\n            <span>\n              Visible to Workers &nbsp;\n              <Tooltip title='Set the visibility of this task in the list of public DialCrowd HITs (\"Worker\" in the navigation menu).'>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n        >\n          {getFieldDecorator('deploy',\n            {\n              initialValue: this.state.deploy,\n              valuePropName: 'checked',\n              onChange: (e) => { this.handleDeploy(e); }\n            }\n          )(\n            <Switch />\n          )}\n        </FormItem>\n      </div>\n    </>);\n  }\n};\n\nfunction calcRecommendedPayment(time) {\n  time = parseFloat(time)\n  if (isNaN(time)) {\n    return undefined;\n  } else {\n    return (15 * time / 60).toFixed(2);\n  }\n}\n\nfunction calcNoHits(nUnit, nAssignment, nconvo) {\n  if (isNaN(nUnit) || isNaN(nAssignment) || isNaN(nconvo)) {\n    return undefined;\n  } else {\n    return (nconvo * nAssignment / nUnit);\n  }\n}\n\n\nexport default Configure;\n","import React from \"react\";\nimport { Form, Divider, Input, Select, Tooltip, Button } from 'antd'\nimport { MinusCircleOutlined, PlusOutlined, QuestionCircleOutlined } from '@ant-design/icons'\nimport QuestionList from \"../QuestionList.js\"\n\n\nfunction lists2Systems(names, instructions, queries, types,\n  exampless, counterexampless) {\n  const _addKey = (xs) => (\n    xs.filter((x) => (x !== null))\n      .map((x, i) => ({ key: i, content: x }))\n  );\n  let systems = [];\n  for (let i = 0; i < names.length; i += 1) {\n    // Workaround: in case exampless[i] is not an array.\n    let examples = Array.isArray(exampless[i]) ? exampless[i] : [exampless[i]];\n    let counterexamples = (\n      Array.isArray(exampless[i]) ? counterexampless[i] : [counterexampless[i]]\n    );\n\n    systems.push({\n      \"key\": i,\n      \"name\": names[i],\n      \"instruction\": instructions[i],\n      \"questions\": [\n        {\n          key: 0,\n          title: queries[i],\n          type: types[i],\n          examples: _addKey(examples),\n          counterexamples: _addKey(counterexamples)\n        }\n      ]\n    });\n  }\n  return systems;\n}\n\n\nclass System extends React.Component {\n  /* Props:\n   * @{object}\tform:\n   * @{style}\tformItemLayout:\n   * @{function} removeByKey: Function that can remove a element by id.\n   * @{function} addByKey: Function that can remove a element by id.\n   * @{function} updateByKey: Function that can update a element by id.\n   * @{string}\tfieldNameSystem: HTML form name for the field of the system.\n   * @{string}\thelpText: Help text to shown when hovering over the question mark.\n   * @{Array}\tsystems: Check `this.newSystem` for the structure of the element.\n   * @{Array}\tagents: Available agents to choose from.\n   */\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n\n    return (\n      <>\n        <div>\n          {\n            this.props.systems.map(\n              (system) => (this._showSystem(system))\n            )\n          }\n        </div>\n        <Form.Item {...formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\" onClick={this.addSystem} style={{ width: '90%' }}>\n            <PlusOutlined /> Add System\n          </Button>\n        </Form.Item>\n      </>\n    );\n  }\n\n  addSystem = () => {\n    this.props.addByKey([this.props.fieldNameSystem], this.constructor.newSystem());\n  }\n\n  static newSystem() {\n    /* Factory a new empty initialized system object. */\n    return {\n      name: \"\",\n      agent: \"\",\n      instruction: \"\",\n      questions: [\n        { key: 0, ...QuestionList.newQuestion() }\n      ]\n    };\n  }\n\n  _showSystem(system) {\n    const { formItemLayout, fieldNameSystem } = this.props;\n    const { getFieldDecorator } = this.props.form;\n    const updateSystemName = (event) => {\n      this.props.updateByKey(\n        [fieldNameSystem, system.key],\n        { name: event.target.value }\n      )\n    };\n    return (\n      <div key={system.key}\n        style={{ border: \"2px solid black\", margin: \"10px\", padding: 24, display: \"block\" }}\n      >\n        {/* instruction tooltip that show instruction when mouse hovering over it. */}\n        <span style={{\n          float: \"left\",\n          \"margin-bottom\": \"-30px\"\n        }}\n          class=\"instruction-tooltip\">\n          <Tooltip\n            title={this.props.textInstruction}>\n            <QuestionCircleOutlined /> &nbsp; Tips\n          </Tooltip>\n        </span>\n\n        {/* Removal Button */}\n        <Form.Item>\n          <span style={{ float: \"right\", \"margin-bottom\": \"-30px\", \"margin-top\": \"-20px\", \"margin-right\": \"-10px\" }}>\n            {this.props.systems.length > 1 ? (\n              <MinusCircleOutlined\n                className=\"dynamic-delete-button\"\n                disabled={this.props.systems.length === 1}\n                onClick={() => this.props.removeByKey([fieldNameSystem, system.key])}\n              />\n            ) : null}\n          </span>\n        </Form.Item>\n\n        {/* System name. */}\n        <Form.Item\n          {...formItemLayout}\n          label={(\n            <span>\n              System Display Name &nbsp;\n              <Tooltip\n                title={(\n                  \"Please write the name of your dialog system. DO NOT write \"\n                  + \"'Baseline' or 'Proposed System'.  This name will be shown \"\n                  + \"to workers (e.g., System A)\"\n                )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={true}\n        >\n          {getFieldDecorator(`${fieldNameSystem}[${system.key}][name]`, {\n            initialValue: system.name,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please input the name of the dialog system to show to workers.\",\n            }],\n            onChange: updateSystemName\n          })(\n            <Input placeholder=\"System A\" style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </Form.Item>\n\n        {/* Agent */}\n        <Form.Item\n          {...formItemLayout}\n          label=\"System\"\n          hasFeedback\n        >\n          {getFieldDecorator(`${fieldNameSystem}[${system.key}][agent]`, {\n            initialValue: system.agent,\n            rules: [\n              { required: true, message: 'Please select an agent!' },\n            ],\n          })(\n            <Select placeholder=\"Please choose your system\">\n              {this.props.agents.map((x, l) =>\n                <Select.Option key={l} value={x._id}> {x.name} </Select.Option>\n              )}\n            </Select>\n          )}\n        </Form.Item>\n\n        {/* Instruction */}\n        <Form.Item\n          {...(formItemLayout)}\n          label={(\n            <span>\n              Specific Instructions&nbsp;\n              <Tooltip\n                title={(\n                  \"Please note any instructions for interacting with the system \"\n                  + \"(e.g., 'please interact with the system for more \"\n                  + \"than 10 turns', 'please ask about the weather tomorrow in Pittsburgh', etc)\"\n                )}>\n                <QuestionCircleOutlined />\n              </Tooltip>\n            </span>\n          )}\n          required={false}\n        >\n          {getFieldDecorator(`${fieldNameSystem}[${system.key}][instruction]`, {\n            initialValue: system.instruction,\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please write instructions for interacting with the system\",\n            }],\n          })(\n            <Input placeholder=\"Please talk about weather and more than 10 turns! \"\n              style={{ width: '90%', marginRight: 8 }} />\n          )}\n        </Form.Item>\n\n        <Divider />\n\n        <QuestionList\n          form={this.props.form}\n          formItemLayout={formItemLayout}\n          removeByKey={this.props.removeByKey}\n          addByKey={this.props.addByKey}\n          updateByKey={this.props.updateByKey}\n          questions={system.questions}\n          rootKey={[fieldNameSystem, system.key, \"questions\"]}\n          questionFieldLabel=\"Question\"\n          questionHelpText={(\n            \"Ask questions about this system. For example, you can ask the worker \"\n            + \"to assess the quality of this system.\"\n          )}\n          textAddQuestion=\"Add a System Specific Question\"\n          textInstruction={this.props.helpText}\n          placeholderQuestion=\"Do you think it is a good system?\"\n          placeholderExample=\"Yes, it was always on topic.\"\n          placeholderCounterexample=\"I want to get paid more.\"\n          placeholderOption=\"Input your option here.\"\n          listStyle=\"divider\"\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default System;\nexport { lists2Systems };\n\n","import React from 'react'\nimport { Button, Form, message, Spin, Tooltip, Table } from 'antd';\nimport { QuestionCircleOutlined, UploadOutlined } from '@ant-design/icons';\nimport { connect } from \"react-redux\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport InteractiveTemplate from \"./InteractiveTemplate\";\nimport FileReaderInput from 'react-file-reader-input';\nimport Configure from \"../Configure.js\"\nimport { SurveyQuestionList, addKeys } from \"../QuestionList.js\"\nimport System, { lists2Systems } from \"./System.js\"\n\n\nconst FormItem = Form.Item;\n\nlet sys_index = 0;\nlet survey_index = 0;\nlet feedback_index = 0;\n\n\nclass InteractiveConfigure extends Configure {\n  handleSubmit = (e) => {\n    /* Called when the submit button is clicked. */\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        values[\"interactive_task_data\"] = this.state.interactive_task_data\n        values[\"consent\"] = this.state.consent;\n        this.submit(values, this.props.session._id);\n      }\n      else {\n        console.log(err);\n      }\n    });\n  };\n  handleFileInputChange(_, results, targetStateProperty) {\n    const [e, file] = results[0]\n    var data1 = []\n    var lines = e.target.result.split(\"\\n\");\n    for (var i = 0; i < lines.length; i++) {\n      if (lines[i] == \"\")\n        continue;\n      var dic = {};\n      dic[\"sentence\"] = lines[i];\n      dic[\"sentid\"] = i + 1;\n      dic[\"entity\"] = []\n      data1.push(dic);\n    }\n    if (data1.length > 0) {\n      message.success(data1.length + ' tasks are loaded!');\n    }\n    this.setState({ [targetStateProperty]: data1 });\n    //console.log(this.state.cluster_data);\n\n  }\n\n  static instructionSurvey = (\n    \"In this section, you can add, remove and edit questions regarding the \"\n    + \"above systems. Different from the questions in the previous section, questions \"\n    + \"here are not specific to a certain system. For example, you can ask the worker \"\n    + \"to compare the above systems they have interacted with.\"\n  );\n\n  static helpTextSurveyQuestion = (\n    \"Add a question that is to be answered after the worker talks to all of your \"\n    + \"interactive agents. You can, for example, ask the worker to compare\"\n    + \"the agents they have interacted with.\"\n  );\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.state,\n      interactive_task_data: [],\n    }\n    this.saveURL = '/api/save/task/interactive/';\n    this.taskName = 'interactive';\n  }\n\n  componentDidMount() {\n    this.makeProps();\n  }\n\n  makeProps() {\n    if (this.props.session.questionSystems === undefined) {\n      // Workaround\n      let systems = lists2Systems(\n        this.props.session.name_of_dialog || [],\n        this.props.session.generic_instructions,\n        this.props.session.subpoll,\n        this.props.session.subtypeofpoll,\n        this.props.session.dialog_examples,\n        this.props.session.dialog_counterexamples,\n      );\n      this.setState({ \"questionSystems\": systems });\n    } else {\n      this.setState(\n        { \"questionSystems\": addKeys(this.props.session.questionSystems) }\n      );\n    }\n    this.setState({\n      interactive_task_data: this.props.session.interactive_task_data\n    });\n    super.makeProps();\n  };\n\n  render() {\n    const textStyleExtras = [\n      {\n        name: 'Specific Instructions',\n        fieldName: 'dialogInstruction',\n        explain: \"Set the text style of specific instructions for each dialogue system.\"\n      },\n      {\n        name: 'Questions',\n        fieldName: 'question',\n        explain: \"Set the style of the text in each question.\"\n      }\n    ];\n    return (\n      <div>\n        <h2 style={{ \"padding-left\": \"1%\" }}>Template for an Interactive Task</h2>\n        <p style={{ \"padding-left\": \"1%\" }}>This template is used for the creation of tasks that require the workers to interact with an agent.\n          You can have one or more agents for the workers to interact, and ask questions about those agents.</p>\n        {this.loading ? <Spin /> :\n          <Form onSubmit={(e) => { this.handleSubmit(e) }}>\n            {this._showGeneralConfig()}\n            {this._showDataConfig()}\n            {this._showConsentConfig()}\n            {this._showSystemConfig()}\n            {this._showSurveyConfig()}\n            {this._showFeedbackConfig()}\n            {this._showAppearanceConfig(textStyleExtras)}\n            {this._showButtons()}\n          </Form>\n        }\n      </div>\n    );\n  }\n  _showDataConfig() {\n    const { formItemLayout } = this;\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>Task</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>The Tasks you want the workers to follow.</p>\n      <div style={{\n        border: \"2px solid black\",\n        margin: \"10px\",\n        padding: 24\n      }}>\n        {this._showDataUpload(false)}\n      </div>\n\n    </>);\n  }\n  _showDataUpload(golden = false) {\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    let columns_dialog = [\n      {\n        title: 'ID',\n        dataIndex: 'sentid',\n        key: 'sendid',\n        width: 100,\n      },\n      {\n        title: 'Text',\n        dataIndex: 'sentence',\n        key: 'sentence',\n      },\n    ];\n    if (golden) {\n      columns_dialog.push({\n        title: 'Answer',\n        dataIndex: 'answer',\n        key: 'answer'\n      });\n    }\n\n    const explain = golden ? (<>\n      <div>\n        Please format your data as below, separated with new lines:\n      </div>\n      <div>\"taskID\":1, \"tasks\":[\"Cons\": \"area=south\"]</div>\n      <div>...</div>\n    </>) : 'Please split the tasks by new line.';\n    const targetStateProperty = golden ? 'dataGolden' : 'interactive_task_data';\n\n    return (<>\n      <FormItem\n        {...formItemLayout}\n        label={(\n          <span>\n            Upload your data&nbsp;\n            <Tooltip title={explain}>\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n      >\n        <FileReaderInput\n          as='text'\n          onChange={(e, results) => this.handleFileInputChange(e, results, targetStateProperty)}\n        >\n          <Button\n            style={{ width: '90%' }}\n          >\n            <UploadOutlined /> Click to Upload\n          </Button>\n        </FileReaderInput>\n      </FormItem>\n\n      {(this.state[targetStateProperty] || []).length > 0 ? <div height={500}>\n        <Table rowKey=\"sentence\" dataSource={this.state[targetStateProperty]} columns={columns_dialog} pagination={{ hideOnSinglePage: true }} size=\"small\" />\n      </div> : null\n      }\n\n    </>);\n  }\n\n  _showSurveyConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const { instructionSurvey, helpTextSurveyQuestion } = this.constructor;\n    return (<>\n      {/* Surveys */}\n      <h3 style={{ \"padding-left\": \"1%\" }}>General Questions</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>{instructionSurvey}</p>\n      <SurveyQuestionList\n        form={this.props.form}\n        formItemLayout={formItemLayout}\n        removeByKey={this.removeByKey}\n        addByKey={this.addByKey}\n        updateByKey={this.updateByKey}\n        questions={this.state.questionSurveys}\n        rootKey={[\"questionSurveys\"]}\n        systemNames={this.state.questionSystems.map(q => q.name)}\n        questionFieldLabel=\"Question\"\n        questionHelpText={helpTextSurveyQuestion}\n        textAddQuestion=\"Add \"\n        textInstruction={instructionSurvey}\n        placeholderQuestion=\"Can you identify the difference between the systems?\"\n        placeholderExample=\"Yes, system A reacts like a real human most.\"\n        placeholderCounterexample=\"I want the system to be more sociable.\"\n        placeholderOption=\"Yes, somewhat.\"\n      />\n    </>);\n  }\n\n\n  _showSystemConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const instructionSystem = (\n      \"In this section, you can add, remove and edit the interactive agents you want \"\n      + \"the workers interact with. For each system, you can set up one or more \"\n      + \"questions specific to the system. For example, you can ask the worker to \"\n      + \"assess the quality of a system. To make your task as clear as possible, \"\n      + \"remember to provide some example answers and counter example answers to the \"\n      + \"questions. These examples and counterexamples are important to let workers understand \"\n      + \"what responses are acceptable and what the limitations are.\"\n    );\n    return (<>\n      {/* Systems. */}\n      <h3 style={{ \"padding-left\": \"1%\" }}>Interactive Agents</h3>\n      <p style={{ \"padding-left\": \"1%\" }}> {instructionSystem} </p>\n      <System\n        form={this.props.form}\n        formItemLayout={formItemLayout}\n        removeByKey={this.removeByKey}\n        addByKey={this.addByKey}\n        updateByKey={this.updateByKey}\n        fieldNameSystem=\"questionSystems\"\n        systems={this.state.questionSystems}\n        agents={this.props.agents}\n        helpText={instructionSystem}\n      />\n    </>);\n  }\n\n  _showTemplate() {\n    return <InteractiveTemplate thisstate={this.props.session} />;\n  }\n\n};\n\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_interactive,\n    agents: state.system,\n  };\n}\n\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(InteractiveConfigure));\n","import React from \"react\";\nimport { Button, Modal, Table } from \"antd\";\nimport { FileTextOutlined, DownloadOutlined } from \"@ant-design/icons\";\nimport { saveAs } from \"file-saver\";\nimport { ChatFeed, Message } from \"react-chat-ui\";\nimport { deleteResult, getResult } from \"../../../../actions/crowdAction\";\nimport { connect } from \"react-redux\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_interactive_results(t) {\n  fetch(\n    serverUrl +\n      \"/api/get/result/interactive/\" +\n      t.props.session._id +\n      \"/flyingbroom\"\n  )\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let system_survey = {};\n      let overall_survey = {};\n      let system_survey_type = [];\n      let overall_survey_type = [];\n\n      json.survey.forEach(function (data, index) {\n        data.survey.forEach(function (question, index2) {\n          if (question.Name === \"EXIT\") {\n            if (question.Q in overall_survey) {\n              overall_survey[question.Q].push({\n                userId: data.userID,\n                answer: question.A,\n              });\n            } else {\n              overall_survey[question.Q] = [\n                { userId: data.userID, answer: question.A },\n              ];\n            }\n            if (question.Type.indexOf(\"Likert\") >= 0) {\n              overall_survey_type.push(question.Q);\n            }\n          } else if (question.Name !== \"FEEDBACK\") {\n            if (question.Q in system_survey) {\n              system_survey[question.Q].push({\n                userId: data.userID,\n                answer: question.A,\n                system: question.Name,\n              });\n            } else {\n              system_survey[question.Q] = [\n                {\n                  userId: data.userID,\n                  answer: question.A,\n                  system: question.Name,\n                },\n              ];\n            }\n            if (question.Type.indexOf(\"Likert\") >= 0) {\n              system_survey_type.push(question.Q);\n            }\n          }\n        });\n      });\n\n      let new_system_survey = [];\n      let new_overall_survey = [];\n      Object.keys(overall_survey).forEach(function (key) {\n        let avg_rate = \"\";\n        if (overall_survey_type.includes(key)) {\n          avg_rate = 0;\n          overall_survey[key].forEach(function (data, index) {\n            avg_rate += data.answer;\n          });\n          avg_rate /= overall_survey[key].length;\n        }\n        new_overall_survey.push({\n          survey_question: key,\n          detail: overall_survey[key],\n          num: overall_survey[key].length,\n          rating: avg_rate,\n        });\n      });\n      Object.keys(system_survey).forEach(function (key) {\n        let avg_rate = \"\";\n        if (system_survey_type.includes(key)) {\n          avg_rate = 0;\n          system_survey[key].forEach(function (data, index) {\n            avg_rate += data.answer;\n          });\n          avg_rate /= system_survey[key].length;\n        }\n        new_system_survey.push({\n          survey_question: key,\n          detail: system_survey[key],\n          num: system_survey[key].length,\n          rating: avg_rate,\n        });\n      });\n\n      let dialog = [];\n      let int = {};\n      json.dialog.forEach(function (data, index) {\n        let messages = [];\n        data.dialog.forEach(function (data2, index2) {\n          if (data2.utter !== \"START\") {\n            if (data2.role === \"Bot\") {\n              messages.push(new Message({ id: 1, message: data2.utter }));\n            }\n            if (data2.role === \"You\") {\n              messages.push(new Message({ id: 0, message: data2.utter }));\n            }\n          }\n        });\n        if (data.name_of_dialog in int) {\n          int[data.name_of_dialog].push({\n            userID: data.userID,\n            dialog: messages,\n          });\n        } else {\n          int[data.name_of_dialog] = [\n            { userID: data.userID, dialog: messages },\n          ];\n        }\n      });\n\n      Object.keys(int).forEach(function (key) {\n        dialog.push({\n          name_of_dialog: key,\n          num: int[key].length,\n          detail: int[key],\n        });\n      });\n\n      t.setState({\n        system_survey: new_system_survey,\n        overall_survey: new_overall_survey,\n        dialog: dialog,\n      });\n    });\n}\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      system_survey: [],\n      overall_survey: [],\n      dialog: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.getResult(\"interactive\", this.props.session._id);\n    get_interactive_results(this);\n  }\n\n  viewdialog = (e) => {\n    this.setState({ messages: e });\n    this.setState({ visible: true });\n  };\n\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    const system_survey_col = [\n      {\n        title: \"survey question\",\n        dataIndex: \"survey_question\",\n        key: \"survey_question\",\n      },\n      {\n        title: \"submissions\",\n        dataIndex: \"num\",\n        key: \"num\",\n      },\n      {\n        title: \"average rating\",\n        dataIndex: \"rating\",\n        key: \"rating\",\n      },\n    ];\n    const system_survey_detail_col = [\n      {\n        title: \"user id\",\n        dataIndex: \"userId\",\n        key: \"userId\",\n      },\n      {\n        title: \"answer\",\n        dataIndex: \"answer\",\n        key: \"answer\",\n      },\n      {\n        title: \"system\",\n        dataIndex: \"system\",\n        key: \"system\",\n      },\n    ];\n    const overall_survey_col = [\n      {\n        title: \"survey question\",\n        dataIndex: \"survey_question\",\n        key: \"survey_question\",\n      },\n      {\n        title: \"submissions\",\n        dataIndex: \"num\",\n        key: \"num\",\n      },\n      {\n        title: \"average rating\",\n        dataIndex: \"rating\",\n        key: \"rating\",\n      },\n    ];\n    const overall_survey_detail_col = [\n      {\n        title: \"user id\",\n        dataIndex: \"userId\",\n        key: \"userId\",\n      },\n      {\n        title: \"answer\",\n        dataIndex: \"answer\",\n        key: \"answer\",\n      },\n    ];\n\n    const columns_dialog = [\n      {\n        title: \"Name of Bot\",\n        dataIndex: \"name_of_dialog\",\n        key: \"name_of_dialog\",\n      },\n      {\n        title: \"submissions\",\n        dataIndex: \"num\",\n        key: \"num\",\n      },\n    ];\n    const columns_dialog_sub = [\n      {\n        title: \"submissionID\",\n        dataIndex: \"userID\",\n        key: \"userID\",\n      },\n      {\n        title: \"View\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        render: (text, record) => (\n          <span className=\"table-operation\">\n            {\n              <span>\n                <a onClick={() => this.viewdialog(record.dialog)}>\n                  <FileTextOutlined />\n                  &nbsp; View Dialogs\n                </a>\n                <span className=\"ant-divider\" />\n              </span>\n            }\n          </span>\n        ),\n      },\n    ];\n\n    let final_survey = {\n      system_survey: this.state.system_survey,\n      overall_survey: this.state.overall_survey,\n    };\n\n    return (\n      <div>\n        <Modal\n          title=\"Dialog View\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <ChatFeed\n            messages={this.state.messages} // Boolean: list of message objects\n            hasInputField={false} // Boolean: use our input, or use your own\n            showSenderName // show the name of the user who sent the message\n            bubblesCentered={false} //Boolean should the bubbles be centered in the feed?\n            // JSON: Custom bubble styles\n            bubbleStyles={{\n              text: {\n                fontSize: 20,\n              },\n              chatbubble: {\n                borderRadius: 35,\n                padding: 20,\n              },\n            }}\n          />\n        </Modal>\n        {/*<Button onClick={() => this.props.getResult(\"interactive\", this.props.session._id)}>Refresh</Button>*/}\n        <Button\n          onClick={() => {\n            var blob = new Blob([JSON.stringify(this.props.dialog, null, 2)], {\n              type: \"text/plain;charset=utf-8\",\n            });\n            saveAs(blob, \"dialog.json\");\n          }}\n        >\n          <DownloadOutlined /> Download dialog\n        </Button>\n        <Button\n          onClick={() => {\n            var blob = new Blob([JSON.stringify(final_survey, null, 2)], {\n              type: \"text/plain;charset=utf-8\",\n            });\n            saveAs(blob, \"interactive_survey.json\");\n          }}\n        >\n          <DownloadOutlined /> Download Survey\n        </Button>\n        <br></br>\n        <br></br>\n        <h1>Results</h1>\n        <br></br>\n        <br></br>\n        <h1>Dialog</h1>\n        <Table\n          rowKey=\"userId\"\n          dataSource={this.state.dialog}\n          columns={columns_dialog}\n          size=\"small\"\n          expandedRowRender={(record) => (\n            <Table dataSource={record.detail} columns={columns_dialog_sub} />\n          )}\n        />\n        <h1>System Survey </h1>\n        <Table\n          rowKey=\"userId\"\n          dataSource={this.state.system_survey}\n          columns={system_survey_col}\n          size=\"small\"\n          expandedRowRender={(record) => (\n            <Table\n              dataSource={record.detail}\n              columns={system_survey_detail_col}\n            />\n          )}\n        />\n        <h1>Overall Survey </h1>\n        <Table\n          rowKey=\"userId\"\n          dataSource={this.state.overall_survey}\n          columns={overall_survey_col}\n          size=\"small\"\n          expandedRowRender={(record) => (\n            <Table\n              dataSource={record.detail}\n              columns={overall_survey_detail_col}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    dialog: state.result.dialog,\n    survey: state.result.survey,\n    session: state.session_interactive,\n  };\n}\n\nconst mapDispatchToProps = {\n  getResult: getResult,\n  deleteResult: deleteResult,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n","import React, { Component } from 'react'\nimport { Table } from 'antd';\nimport { PlusSquareOutlined, MinusSquareOutlined } from '@ant-design/icons';\n\nclass DataStatistics extends Component {\n  /* Props:\n   * {@String} url: Url from which statistics can be fetched.\n   * {@String} urlResults: Url from which results can be fetched.\n   * {@Array} questions: Array of questions. `propertyNameQuestions` \n   * is used only when this prop is not given.\n   * {@String} propertyNameQuestions: Name of the question list, e.g. questionSurveys.\n   */\n  static columns = [\n    {\n      title: 'Question',\n      dataIndex: 'question',\n      key: 'question'\n    },\n    {\n      title: \"Cohen's Kappa\",\n      dataIndex: \"Cohen's Kappa\",\n      key: \"Cohen's Kappa\",\n      render: renderWithColor\n    }\n  ];\n  static subColumns = [\n    {\n      title: 'Response',\n      dataIndex: 'response',\n      key: 'response'\n    },\n    {\n      title: \"Cohen's Kappa\",\n      dataIndex: \"Cohen's Kappa\",\n      key: \"Cohen's Kappa\"\n    }\n  ];\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      agreements: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getResults();\n    this.getStatistics();\n    setInterval(() => this.getStatistics(), 5000);\n    setInterval(() => this.getResults(), 5000);\n  }\n\n  getStatistics() {\n    /* Retrieve dataAgreements. */\n    fetch(this.props.url).then(res => res.json()).then(res => {\n      this.setState({\n        questions: this.props.questions || res[this.props.propertyNameQuestions].map(q => q.title),\n        agreements: res.dataAgreements || [],\n        task: res\n      });\n    });\n  }\n\n  getResults() {\n    /* Retrieve agreements for each individual task unit. */\n    fetch(this.props.urlResult).then(res => res.json()).then(res => {\n      this.setState({\n        result: res\n      });\n    });\n  }\n\n  makeDataSource() {\n    if (this.state.task === undefined) {\n      return undefined;\n    }\n\n    // calculate mean of each agreement metric\n    let mean = {};\n    let dataSource = [];\n    if (this.state.agreements) {\n      for (const metric in this.state.agreements[0]) {\n        mean[metric] = (this.state.agreements.map(x => x[metric]).reduce(\n          (a, b) => (a + b), 0\n        ) / this.state.agreements.length).toFixed(3);\n      }\n\n      // prepare data to show\n      dataSource = this.state.agreements.map(\n        (agree, index) => {\n          // Convert to fixed-point strings.\n          let fixedAgree = {};\n          for (const [metric, value] of Object.entries(agree)) {\n            if (value === null) {\n              fixedAgree[metric] = '-';\n            } else {\n              fixedAgree[metric] = value.toFixed(3);\n            }\n          }\n          return {\n            question: this.state.questions[index],\n            units: this.makeSubDataSource(index),\n            ...fixedAgree\n          };\n        }\n      );\n\n      // Append mean to the last row.\n      if (dataSource.length > 1) {\n        dataSource.push({ ...mean, question: <b>Average</b> });\n      }\n    }\n    return dataSource;\n  }\n\n  makeSubDataSource(indexQuestion) {\n    if (this.state.task === undefined || this.state.result === undefined) {\n      return undefined;\n    }\n    let id2Unit = {};\n    for (const unit of this.state.task.units) {\n      id2Unit[unit.id] = unit;\n    }\n    let dataSource = [];\n    for (const [idUnit, unit] of Object.entries(this.state.result.unit)) {\n      if (id2Unit[idUnit] === undefined) { continue; }\n      let agreements = { ...unit.agreements[indexQuestion] };\n      for (const metric in agreements) {\n        if (agreements[metric] === null) {\n          agreements[metric] = '-';\n        } else {\n          agreements[metric] = agreements[metric].toFixed(2);\n        }\n      }\n      let entry = { ...agreements, ...id2Unit[idUnit] };\n      dataSource.push(entry);\n    }\n    return dataSource;\n  }\n\n  render() {\n    const { columns, subColumns } = this.constructor;\n    const dataSource = this.makeDataSource();\n    const expandedRowRender = (\n      // For interactive task, where subcolumns won't be given.\n      subColumns === undefined ?\n        undefined\n        : record => <Table dataSource={record.units} columns={subColumns}\n          pagination={{ hideOnSinglePage: true }} />\n    );\n    const expandIcon = ({ expanded, onExpand, record }) => {\n      // Make the Average row not expandable.\n      if (record.units !== undefined) {\n        return expanded ? (\n          <MinusSquareOutlined onClick={e => onExpand(record, e)} />\n        ) : (\n            <PlusSquareOutlined onClick={e => onExpand(record, e)} />\n          )\n      } else {\n        return undefined;\n      }\n    }\n\n    const hasCohensKappa = columns.map(c => c.title).indexOf(\"Cohen's Kappa\") != -1;\n    return (<>\n      <Table dataSource={dataSource} columns={columns}\n        expandedRowRender={expandedRowRender}\n        expandIcon={expandIcon}\n        pagination={{ hideOnSinglePage: true }}\n      />\n      <br />\n      {hasCohensKappa ? this.showCohensColorCode() : null}\n    </>);\n  }\n\n  showCohensColorCode() {\n    return (<>\n      <div> Cohen's Kappa indicates worker agreement of different levels:\n        <ul>\n          <li> <span style={{ color: \"#595959\", \"font-weight\": \"bold\" }}> {\"< 0.00\"} </span> : Poor </li>\n          <li> <span style={{ color: \"#940004\", \"font-weight\": \"bold\" }}> 0.00 - 0.20 </span> : Slight </li>\n          <li> <span style={{ color: \"#d15700\", \"font-weight\": \"bold\" }}> 0.20 - 0.40 </span> : Fair </li>\n          <li> <span style={{ color: \"#e6b314\", \"font-weight\": \"bold\" }}> 0.40 - 0.60 </span> : Moderate </li>\n          <li> <span style={{ color: \"#90ad00\", \"font-weight\": \"bold\" }}> 0.60 - 0.80 </span> : Substantial </li>\n          <li> <span style={{ color: \"#00b31a\", \"font-weight\": \"bold\" }}> 0.80 - 1.00 </span> : Almost Perfect </li>\n        </ul>\n      </div>\n    </>);\n  }\n}\n\nfunction renderWithColor(score) {\n  let color;\n  score = parseFloat(score);\n  if (score < 0 || isNaN(score)) { color = '#595959'; }\n  else if (score < 0.2) { color = '#940004'; }\n  else if (score < 0.4) { color = '#d15700'; }\n  else if (score < 0.6) { color = '#e6b314'; }\n  else if (score < 0.8) { color = '#90ad00'; }\n  else { color = '#00b31a'; }\n  return {\n    props: {},\n    children: <span style={{ color: color, \"font-weight\": \"bold\" }}> {score} </span>\n  };\n}\n\n\nexport default DataStatistics;\nexport { renderWithColor };\n","import {serverUrl} from \"../../../../configs\";\nimport DataStatistics, {renderWithColor} from \"../DataStatistics\";\n\n\nclass InteractiveDataStatistics extends DataStatistics {\n  /* Params:\n   * {@String} url: Url from which statistics can be fetched.\n   * {@Array} questions: Array of questions. `propertyNameQuestions` \n   * is used only when this prop is not given.\n   * {@String} propertyNameQuestions: Name of the question list, e.g. questionSurveys.\n   * {@String} id: id of the project.\n   */\n\n  static columns = [\n    {\n      title: 'Question',\n      dataIndex: 'question',\n      key: 'question'\n    },\n    {\n      title: \"Cohen's Kappa\",\n      dataIndex: \"Cohen's Kappa\",\n      key: \"Cohen's Kappa\",\n      render: renderWithColor\n    }\n  ];\n  static subColumns = undefined;\n\n  constructor (props) {\n    super(props);\n  }\n\n  getResults () {\n    /* Interactive task does not have task units, \n       and this function is to retrieve agreements for each unit.\n       Therefore, we simply do nothing here. */\n  }\n  \n  getStatistics () {\n    /* Retrieve dataAgreements. */\n    fetch(this.props.url).then(res => res.json()).then(res => {\n      this.setState({\n        questions: res[this.props.propertyNameQuestions].map(\n          q => q.systemName ? q.title + ` (${q.systemName})` : q.title\n        ),\n        agreements: res.dataAgreements || [],\n        task: res\n      });\n    });    \n  }\n\n}\n\n\nexport default InteractiveDataStatistics\n","import {Hint, HorizontalGridLines, LineMarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis, ChartLabel} from 'react-vis';\nimport \"react-vis/dist/style.css\";\nimport React, {Component} from 'react'\nimport {Popconfirm, Table, Tooltip} from 'antd';\nimport {connect} from \"react-redux\";\n\nimport {new_project_data} from \"../../../../actions/crowdAction\";\nimport {loadData} from \"../../../../actions/sessionActions\";\nimport {serverUrl} from \"../../../../configs\";\nimport DataStatistics from \"../DataStatistics\";\n\nlet DicUser = {};\n\n\nfunction getWorkerQuality (url) {\n  /* Fetch worker quality metrics, e.g. agreeSelf, agreeGold.\n   * Return: {@Promise}\n   */\n  return fetch(url).then(\n    res => res.json()\n  ).then(res => {\n    // Collect annotations done by each worker.\n    let workerUnits = {};  // workerUnits[workerId] = [annotations]\n    for (const [idUnit, unit] of Object.entries(res.unit)) {\n      for (const annotation of unit.annotations) {\n        const idWorker = annotation.submissionID;\n        workerUnits[idWorker] = workerUnits[idWorker] || [];\n        workerUnits[idWorker].push(annotation);\n      }\n    }\n    \n    // Construct table rows for the workers.\n    let workerQuality = {};\n    for (const [idWorker, annotations] of Object.entries(workerUnits)) {\n      let quality = {};  // A row for the worker.\n\n      // aggregate for `abnormal` from annotations\n      let abnormal = annotations.map(\n        a => a.patternPeriod > 0\n      ).reduce(\n        (a, b) => (a || b), false\n      );\n      quality['abnormal'] = abnormal ? 'Yes' : 'No';\n\n      // aggregate for `agreeSelf` and `agreeGold`.\n      for (const metric of ['agreeSelf', 'agreeGold']) {\n        // count where annotation[metric] is not undefined.\n        let denominator = annotations.map(\n          a => a[metric] !== null ? 1 : 0\n        ).reduce(\n          (a, b) => (a + b), 0\n        );\n        // count where annotation[metric] is yes.\n        let numerator = annotations.map(\n          a => a[metric] === true ? 1 : 0\n        ).reduce(\n          (a, b) => (a + b), 0\n        );\n        // convert result to the string to show.\n        if (denominator === 0) {\n          quality[metric] = '-/-';\n        } else {\n          quality[metric] = `${numerator} / ${denominator}`;\n        }\n      }\n      // aggregate for `agreeMajor`.\n      for (const metric of ['agreeMajor']) {\n        // count where annotation[metric] is not undefined.\n        let denominator = annotations.map(\n          a => a[metric] !== undefined ? 1 : 0\n        ).reduce(\n          (a, b) => (a + b), 0\n        );\n        // count where annotation[metric] is yes.\n        let numerator = annotations.map(\n          a => a[metric] || 0\n        ).reduce(\n          (a, b) => (a + b), 0\n        );\n        // convert result to the string to show.\n        if (denominator === 0) {\n          quality[metric] = '-/-';\n        } else {\n          quality[metric] = (numerator / denominator).toFixed(2);\n        }\n      }\n      workerQuality[idWorker] = quality;\n    }\n    return workerQuality;\n  });    \n}\n\n\nfunction get_category_results(t) {\n  fetch(serverUrl + '/api/get/result/category/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n        let grid = [];\n        let row = [{readOnly: true, value: ''}];\n        let new_response = [];\n        let feedback = {};\n        \n        if (json.response.length > 0){\n          Object.keys(json.kappa).forEach(x => {\n            row.push({value: x, readOnly: true})\n          });\n          grid.push(row);\n          Object.keys(json.kappa).forEach(user1 => {\n            let row = [{readOnly: true, value: user1}];\n            Object.keys(json.kappa).forEach(user2 => {\n              if (typeof json.kappa[user1][user2] === 'number') {\n                row.push({value: json.kappa[user1][user2]})\n              }\n              else {\n                row.push({value: null})\n              }\n            });\n            grid.push(row);\n          });\n          console.log(grid);\n  \n          let sentids = [];\n          Object.keys(json.response).forEach(x => {\n            if (!(sentids.includes(json.response[x].sentid))){\n              sentids.push(json.response[x].sentid);\n              new_response.push(json.response[x]);\n            }\n          })\n  \n          let feedback_results = json.response[0].result;\n          Object.keys(feedback_results).forEach(x => {\n            Object.keys(feedback_results[x].feedback).forEach(y => {\n              let q_index = feedback_results[x].feedback[y][\"Q\"];\n              if (feedback_results[x].feedback_questions[q_index] in feedback){\n                feedback[feedback_results[x].feedback_questions[q_index]].push({\"feedback\": feedback_results[x].feedback[y][\"A\"], \"userId\": feedback_results[x].submissionID})\n              }\n              else{\n                feedback[feedback_results[x].feedback_questions[q_index]] = [{\"feedback\": feedback_results[x].feedback[y][\"A\"], \"userId\": feedback_results[x].submissionID}]\n              }\n            })\n          })\n        }\n      \n        let new_feedback = [];\n        Object.keys(feedback).forEach(function(key){\n          new_feedback.push({\"feedback_question\": key, \"detail\": feedback[key]})\n        })\n\n        t.setState({\n          results: new_response,\n          grid: grid,\n          feedback: new_feedback\n        });\n      });\n}\n\nfunction remove_category_results(userId) {\n  fetch(serverUrl + '/api/delete/result/category/' + userId)\n      .then(function (response) {\n        return response.json();\n      })\n}\n\n// gaussian graph\nfunction gaussian(arg) {\n  let items = [];\n  arg.map((item, i) => {\n    let avg = item[\"average_duration\"];\n    let total = item[\"total_duration\"];\n    let userId = item[\"userId\"];\n    DicUser[total] = userId;\n    items.push(total);\n  });\n\n  let getMean = function (data) {\n    return data.reduce(function (a, b) {\n      return Number(a) + Number(b);\n    }) / data.length;\n  };\n  let getSD = function (data) {\n    let m = getMean(data);\n    return Math.sqrt(data.reduce(function (sq, n) {\n      return sq + Math.pow(n - m, 2);\n    }, 0) / (data.length - 1));\n  };\n\n  if (items.length > 0) {\n    let m = getMean(items);\n    let std = getSD(items);\n    let a = 1 / Math.sqrt(2 * Math.PI);\n    let f = a / std;\n    let p = -1 / 2;\n    let finallist = [];\n    if (isNaN(std)){\n      std = 1;\n    }\n    items.sort(function (a, b) {\n      return a - b\n    });\n    items.map((z, i) => {\n      let c = (z - m) / std;\n      c *= c;\n      p *= c;\n      let result = 1 / (Math.sqrt(2 * Math.PI) * std) * Math.E ** (-0.5 * ((z - m) / std) ** 2);\n      finallist.push({x: z, y: result});\n    });\n    return finallist;\n  }\n  return [{x: 1, y: 11}];\n}\n\nfunction getDetail(t) {\n  const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;\n  fetch(serverUrl + '/api/get/detail_result/category/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n        let avg = []\n        json[\"response\"].forEach(x => {\n          avg.push(x[\"total_duration\"]);\n        });\n\n        const url = serverUrl + '/api/result/category/' + t.props.session._id;\n        getWorkerQuality(url).then(workerQuality => {\n          let detailResults = json.response;\n          detailResults = detailResults.map(\n            result => ({\n              ...result,\n              ...workerQuality[result.userId]\n            })\n          );\n          t.setState({\n            results_detail: detailResults,\n            cost: 15 * average(avg) / 3600\n          });\n        });\n      });\n}\n\nfunction buildValue(hoveredCell) {\n  const {v, userId} = hoveredCell;\n  return {\n    x: v.x,\n    y: v.y,\n    userId: userId\n  };\n}\n\nclass CategoryQuality extends Component {\n  handleDelete = (key) => {\n    const dataSource = [...this.state.results_detail];\n    const dataSource2 = [...this.state.results];\n    const dataSource3 = [...this.state.feedback];\n\n    dataSource3.forEach(function(data, index){\n      let new_detail = [];\n      data.detail.forEach(function(data2, index2){\n        if (data2.userId !== parseInt(key)){\n          new_detail.push(data2);\n        }\n      })\n      dataSource3[index].detail = new_detail;\n    })\n\n    this.setState({results_detail: dataSource.filter(item => item.userId !== key)});\n    this.setState({results: dataSource2.filter(item => item.userId !== key)});\n    this.setState({feedback: dataSource3.filter(item => item.userId !== key)});\n\n    remove_category_results(key);\n\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results_detail: [],\n      survey: [],\n      results: [],\n      grid: [],\n      cost: 0,\n      visible_kappa: false,\n      feedback: []\n    }\n  }\n\n  updateWorkerQuality () {\n    /* Attach worker quality metrics, e.g. agreeSelf, agreeGold, to \n     * `this.state.results_detail`. \n     */\n    const url = serverUrl + '/api/result/category/' + this.props.session._id;\n    getWorkerQuality(url).then(workerQuality => {\n      let detailResults = this.state.results_detail.slice();  // copy from state.\n      detailResults = detailResults.map(\n        result => ({\n          ...result,\n          ...workerQuality[result.userId]\n        })\n      );\n      this.setState({results_detail: detailResults});\n    });\n  }\n      \n  componentDidMount() {\n    getDetail(this);\n    this.updateWorkerQuality();\n    /* get_category_results(this); */\n    \n    setInterval(() => {\n      getDetail(this);\n      this.updateWorkerQuality();\n    }, 2000);\n    \n  }\n\n  render() {\n    const detail_subcolums = [\n      {\n        title: 'Sentence',\n        dataIndex: 'sentence',\n        key: 'sentence'\n      },\n      {\n        title: 'label',\n        dataIndex: 'label',\n        key: 'label'\n      },\n      {\n        title: 'duration',\n        dataIndex: 'duration',\n        key: 'duration'\n      },\n      {\n        title: 'timestamp',\n        dataIndex: 'timestamp',\n        key: 'timestamp'\n      },\n    ];\n    const detail_colums = [\n      {\n        title: 'user id',\n        dataIndex: 'userId',\n        key: 'userId'\n      },\n      {\n        title: 'total',\n        dataIndex: 'total_duration',\n        key: 'total_duration',\n      },\n      {\n        title: 'average',\n        dataIndex: 'average_duration',\n        key: 'average_duration'\n      },\n      {\n        title: 'std',\n        dataIndex: 'std_duration',\n        key: 'std_duration'\n      },\n      {\n        title: <>outlier\n          <Tooltip title='Whether the time spent on the task is 2 standard deviations above or below the average time taken.' >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'outlier',\n        key: 'outlier'\n      },\n      {\n        title: <>abnormal\n          <Tooltip title='Whether some repeating pattern, like answering A, B, A, B ..., or A, A, A is detected.' >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'abnormal',\n        key: 'abnormal',\n      },\n      {\n        title: <>intra-user\n          <Tooltip title={(\n            'The number of times the worker responded consistently'\n            + '/ the number of duplicated task units given in each HIT.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeSelf',\n        key: 'agreeSelf'     \n      },\n      {\n        title: <>agree-gold\n          <Tooltip title={(\n            'The number of correctly answered golden task units '\n            + '/ the number of golden task units given in each HIT.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeGold',\n        key: 'agreeGold'     \n      },\n      {\n        title: <>inter-user\n          <Tooltip title={(\n            'The ratio of annotations that agree with the majority.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeMajor',\n        key: 'agreeMajor'     \n      },\n      {\n        title: 'submissions',\n        dataIndex: 'num',\n        key: 'num'\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) => {\n          return (\n              this.state.results_detail.length > 1\n                  ? (\n                      <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.userId)}>\n                        <a href=\"javascript:;\">Delete</a>\n                      </Popconfirm>\n                  ) : null\n          );\n        }\n      }\n\n    ];\n\n    return <div>\n      <p>We calculate the worker's time according to how long they take in selecting the intent for each question. \n        Abnormality is described as any worker who selects the same intent for every sentence and outlier is calculated \n        by any worker who takes more than 2 standard deviations longer or shorter than the mean time taken for the task. \n        These two metrics can be used to help determine if a worker may be a bot; however, we suggest that you pay the bot, \n        block them from completing future HITs for you, and <a href=\"https://support.aws.amazon.com/#/contacts/aws-mechanical-turk\">report</a> it to Amazon,\n        which can also be done through \"Report this HIT\" on the MTurk interface. This is because rejecting the bot may hurt your \n        requester reputation. Be sure to accept and reject your HITs in a timely manner and communicate with the workers if they have any questions. \n        You can monitor your requester reputation on sites such as <a href=\"https://turkopticon.ucsd.edu/\">Turkopticon</a>.\n      </p>\n      <h1>Workers' Timestamps Logs</h1>\n      <Table rowKey=\"userId\" dataSource={this.state.results_detail} columns={detail_colums} size=\"small\"\n             expandedRowRender={record => <Table dataSource={record.detail} columns={detail_subcolums}/>}\n      />\n      \n      <h1>Agreement between Workers</h1>\n      <DataStatistics\n        url={serverUrl + '/api/task/category/' + this.props.session._id}\n        questions={['Intent']}\n      />\n\n      <h1>Gaussian of Timestamps</h1>\n      <XYPlot\n        width={300}\n        height={300}>\n        <VerticalGridLines/>\n        <HorizontalGridLines/>\n        <XAxis/>\n        <YAxis/>\n        <ChartLabel\n          text=\"total time to select intents\"\n          className=\"alt-x-label\"\n          includeMargin={false}\n          xPercent={0.25}\n          yPercent={1.01}\n        />\n        <ChartLabel\n          text=\"probability density\"\n          className=\"alt-y-label\"\n          includeMargin={false}\n          xPercent={0.06}\n          yPercent={0.06}\n          style={{\n            transform: 'rotate(-90)',\n            textAnchor: 'end'\n          }}\n        />\n        <LineMarkSeries\n          className=\"linemark-series-example-2\"\n          curve={'curveMonotoneX'}\n          data={\n          gaussian(this.state.results_detail)\n          }\n          onValueMouseOver={v => this.setState({hoveredCell: v.x && v.y ? {v: v, userId: DicUser[v.x]} : false})}\n        />\n        {this.state.hoveredCell ? <Hint value={buildValue(this.state.hoveredCell)}>\n          <div style={{\"color\": \"black\"}}>\n            <b><strong> {\"userId: \" + this.state.hoveredCell.userId}</strong></b>\n          </div>\n          </ Hint> : null}\n      </XYPlot>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryQuality);\nexport {getWorkerQuality};\n\n","import {\n  Hint,\n  HorizontalGridLines,\n  LineMarkSeries,\n  VerticalGridLines,\n  XAxis,\n  XYPlot,\n  YAxis,\n  ChartLabel,\n} from \"react-vis\";\nimport React from \"react\";\nimport { Popconfirm, Table, Tooltip } from \"antd\";\n\nimport { deleteResult, getResult } from \"../../../../actions/crowdAction\";\nimport { connect } from \"react-redux\";\nimport { message } from \"antd/lib/index\";\nimport { serverUrl } from \"../../../../configs\";\nimport InteractiveDataStatistics from \"./InteractiveDataStatistics\";\nimport { getWorkerQuality } from \"../category/CategoryQuality.js\";\n\nlet DicUser = {};\n\nlet getMean = function (data) {\n  return (\n    data.reduce(function (a, b) {\n      return Number(a) + Number(b);\n    }) / data.length\n  );\n};\nlet getSD = function (data) {\n  let m = getMean(data);\n  return Math.sqrt(\n    data.reduce(function (sq, n) {\n      return sq + Math.pow(n - m, 2);\n    }, 0) /\n      (data.length - 1)\n  );\n};\n\nfunction get_interactive_results(t) {\n  fetch(serverUrl + \"/api/get/result/interactive/\" + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let times = [];\n      let results_detail = [];\n      let all_times = [];\n      let cost = 0;\n      let likert_responses = [];\n      let radio_responses = [];\n\n      if (json.survey.length > 0) {\n        let user_abnormal = [];\n\n        json.survey.forEach(function (data, index) {\n          if (data.times.length > 0) {\n            times.push({ userId: data.userID, times: data.times });\n\n            likert_responses = [];\n            radio_responses = [];\n            data.survey.forEach(function (data2, index2) {\n              if (data2[\"Type\"].includes(\"Likert\")) {\n                likert_responses.push(data2[\"A\"]);\n              } else if (data2[\"Type\"].includes(\"Radio\")) {\n                radio_responses.push(data2[\"A\"]);\n              }\n            });\n\n            if (\n              (likert_responses.length > 1 &&\n                likert_responses.every((val, i, arr) => val === arr[0])) ||\n              (radio_responses.length > 1 &&\n                radio_responses.every((val, i, arr) => val === arr[0]))\n            ) {\n              user_abnormal.push(true);\n            } else {\n              user_abnormal.push(false);\n            }\n          }\n        });\n\n        times.forEach(function (data, index) {\n          let detail = [];\n          let durations = [];\n          data.times.forEach(function (data2, index2) {\n            detail.push({\n              system: data2.system,\n              duration: data2.time / 1000,\n              userId: data.userId,\n            });\n            durations.push(data2.time / 1000);\n          });\n\n          let sum_x = durations.reduce((a, b) => a + b, 0);\n          all_times.push(sum_x);\n\n          results_detail.push({\n            allsame: \"no\",\n            userId: data.userId,\n            total_duration: sum_x,\n            average_duration: getMean(durations),\n            outlier: \"no\",\n            std_duration: getSD(durations),\n            detail: detail,\n          });\n        });\n\n        let stdev = getSD(all_times);\n        let mean = getMean(all_times);\n        results_detail.forEach(function (data, index) {\n          if (\n            data[\"total_duration\"] > mean + 2 * stdev ||\n            data[\"total_duration\"] < mean - 2 * stdev\n          ) {\n            results_detail[index][\"outlier\"] = \"yes\";\n          }\n          if (user_abnormal[index]) {\n            results_detail[index][\"allsame\"] = \"yes\";\n          }\n        });\n\n        cost = (15 * getMean(all_times)) / 3600;\n      }\n\n      const url =\n        serverUrl +\n        \"/api/result/interactive/\" +\n        t.props.session._id +\n        \"/flyingbroom\";\n      return getWorkerQuality(url).then((workerQuality) => {\n        let results = json.response;\n        results_detail = results_detail.map((result) => ({\n          ...result,\n          ...workerQuality[result.userId],\n        }));\n        t.setState({\n          times: times,\n          results_detail: results_detail,\n          cost: cost,\n        });\n      });\n    });\n}\n\n// takes in this.state.results_detail\nfunction gaussian(arg) {\n  let items = [];\n  arg.map((item, i) => {\n    let avg = item[\"average_duration\"];\n    let total = item[\"total_duration\"];\n    let userId = item[\"userId\"];\n    DicUser[total] = userId;\n    items.push(total);\n  });\n\n  if (items.length > 0) {\n    let m = getMean(items);\n    let std = getSD(items);\n    let a = 1 / Math.sqrt(2 * Math.PI);\n    let f = a / std;\n    let p = -1 / 2;\n    let finallist = [];\n    if (isNaN(std)) {\n      std = 1;\n    }\n    items.sort(function (a, b) {\n      return a - b;\n    });\n    items.map((z, i) => {\n      let c = (z - m) / std;\n      c *= c;\n      p *= c;\n      let result =\n        (1 / (Math.sqrt(2 * Math.PI) * std)) *\n        Math.E ** (-0.5 * ((z - m) / std) ** 2);\n      finallist.push({ x: z, y: result });\n    });\n    return finallist;\n  }\n  return [{ x: 1, y: 11 }];\n}\n\nfunction buildValue(hoveredCell) {\n  const { v, userId } = hoveredCell;\n  return {\n    x: v.x,\n    y: v.y,\n    userId: userId,\n  };\n}\n\nfunction remove_interactive_results(userId) {\n  fetch(serverUrl + \"/api/delete/result/interactive/\" + userId).then(function (\n    response\n  ) {\n    return response.json();\n  });\n}\n\nclass InteractiveQuality extends React.Component {\n  handleDelete = (key) => {\n    const dataSource = [...this.state.results_detail];\n    const dataSource2 = [...this.state.system_survey];\n    const dataSource3 = [...this.state.overall_survey];\n    const dataSource4 = [...this.state.times];\n    const dataSource5 = [...this.state.feedback];\n\n    dataSource2.forEach(function (data, index) {\n      let new_detail = [];\n      data.detail.forEach(function (data2, index2) {\n        if (data2.userId !== key) {\n          new_detail.push(data2);\n        }\n      });\n      dataSource2[index].detail = new_detail;\n    });\n\n    dataSource3.forEach(function (data, index) {\n      let new_detail = [];\n      data.detail.forEach(function (data2, index2) {\n        if (data2.userId !== key) {\n          new_detail.push(data2);\n        }\n      });\n      dataSource3[index].detail = new_detail;\n    });\n\n    dataSource5.forEach(function (data, index) {\n      let new_detail = [];\n      data.detail.forEach(function (data2, index2) {\n        if (data2.userId !== key) {\n          new_detail.push(data2);\n        }\n      });\n      dataSource5[index].detail = new_detail;\n    });\n\n    this.setState({\n      results_detail: dataSource.filter((item) => item.userId !== key),\n    });\n    this.setState({\n      system_survey: dataSource2.filter((item) => item.userId !== key),\n    });\n    this.setState({\n      overall_survey: dataSource3.filter((item) => item.userId !== key),\n    });\n    this.setState({ times: dataSource4.filter((item) => item.userId !== key) });\n    this.setState({\n      feedback: dataSource5.filter((item) => item.userId !== key),\n    });\n\n    remove_interactive_results(key);\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      visible: false,\n      visible_survey: false,\n      system_survey: [],\n      overall_survey: [],\n      feedback: [],\n      times: [],\n      results_detail: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.getResult(\"interactive\", this.props.session._id);\n    get_interactive_results(this);\n    setInterval(() => get_interactive_results(this), 5000);\n  }\n\n  handleOkSurvey = (e) => {\n    console.log(e);\n    this.setState({\n      visible_survey: false,\n    });\n  };\n  handleCancelSurvey = (e) => {\n    console.log(e);\n    this.setState({\n      visible_survey: false,\n    });\n  };\n\n  confirm = (record) => {\n    this.props.deleteResult(\"interactive\", this.props.session._id, record._id);\n    message.success(\"Delete Success\");\n  };\n\n  cancel = (e) => {\n    console.log(e);\n  };\n\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    // get_interactive_results(this);\n    const detail_subcolumns = [\n      {\n        title: \"system\",\n        dataIndex: \"system\",\n        key: \"system\",\n      },\n      {\n        title: \"duration\",\n        dataIndex: \"duration\",\n        key: \"duration\",\n      },\n    ];\n    const detail_columns = [\n      {\n        title: \"user id\",\n        dataIndex: \"userId\",\n        key: \"userId\",\n      },\n      {\n        title: \"total\",\n        dataIndex: \"total_duration\",\n        key: \"total_duration\",\n      },\n      {\n        title: \"average\",\n        dataIndex: \"average_duration\",\n        key: \"average_duration\",\n      },\n      {\n        title: \"std\",\n        dataIndex: \"std_duration\",\n        key: \"std_duration\",\n      },\n      {\n        title: (\n          <>\n            outlier\n            <Tooltip title=\"Whether the time spent on the task is 2 standard deviations above or below the average time taken.\">\n              <a>\n                <sub>?</sub>\n              </a>\n            </Tooltip>\n          </>\n        ),\n        dataIndex: \"outlier\",\n        key: \"outlier\",\n      },\n      {\n        title: (\n          <>\n            abnormal\n            <Tooltip title=\"Whether some repeating pattern, like answering A, B, A, B ..., or A, A, A is detected.\">\n              <a>\n                <sub>?</sub>\n              </a>\n            </Tooltip>\n          </>\n        ),\n        dataIndex: \"abnormal\",\n        key: \"abnormal\",\n      },\n      {\n        title: (\n          <>\n            inter-user\n            <Tooltip\n              title={\"The ratio of annotations that agree with the majority.\"}\n            >\n              <a>\n                <sub>?</sub>\n              </a>\n            </Tooltip>\n          </>\n        ),\n        dataIndex: \"agreeMajor\",\n        key: \"agreeMajor\",\n      },\n      {\n        title: \"operation\",\n        dataIndex: \"operation\",\n        render: (text, record) => {\n          return this.state.results_detail.length > 1 ? (\n            <Popconfirm\n              title=\"Sure to delete?\"\n              onConfirm={() => this.handleDelete(record.userId)}\n            >\n              <a href=\"javascript:;\">Delete</a>\n            </Popconfirm>\n          ) : null;\n        },\n      },\n    ];\n\n    return (\n      <div>\n        <p>\n          We calculate the worker's time according to how long they interact\n          with each system. Outlier is calculated by any worker who takes more\n          than 2 standard deviations longer or shorter than the mean time taken\n          for the task. This metric can be used to help determine if a worker\n          may be a bot; however, we suggest that you pay the bot, block them\n          from completing future HITs for you, and{\" \"}\n          <a href=\"https://support.aws.amazon.com/#/contacts/aws-mechanical-turk\">\n            report\n          </a>{\" \"}\n          it to Amazon, which can also be done through \"Report this HIT\" on the\n          MTurk interface. This is because rejecting the bot may hurt your\n          requester reputation. Be sure to accept and reject your HITs in a\n          timely manner and communicate with the workers if they have any\n          questions. You can monitor your requester reputation on sites such as{\" \"}\n          <a href=\"https://turkopticon.ucsd.edu/\">Turkopticon</a>.\n        </p>\n        <h1>Workers' Timestamps Logs</h1>\n        <Table\n          rowKey=\"userId\"\n          dataSource={this.state.results_detail}\n          columns={detail_columns}\n          size=\"small\"\n          expandedRowRender={(record) => (\n            <Table dataSource={record.detail} columns={detail_subcolumns} />\n          )}\n        />\n        <h1>Agreements between Workers</h1>\n        <InteractiveDataStatistics\n          url={serverUrl + \"/api/task/interactive/\" + this.props.session._id}\n          propertyNameQuestions=\"questions\"\n        />\n\n        <h1>Gaussian of Timestamps</h1>\n        <XYPlot width={300} height={300}>\n          <VerticalGridLines />\n          <HorizontalGridLines />\n          <XAxis />\n          <YAxis />\n          <ChartLabel\n            text=\"total time interacted with system\"\n            className=\"alt-x-label\"\n            includeMargin={false}\n            xPercent={0.25}\n            yPercent={1.01}\n          />\n          <ChartLabel\n            text=\"probability density\"\n            className=\"alt-y-label\"\n            includeMargin={false}\n            xPercent={0.06}\n            yPercent={0.06}\n            style={{\n              transform: \"rotate(-90)\",\n              textAnchor: \"end\",\n            }}\n          />\n          <LineMarkSeries\n            className=\"linemark-series-example-2\"\n            curve={\"curveMonotoneX\"}\n            data={gaussian(this.state.results_detail)}\n            onValueMouseOver={(v) =>\n              this.setState({\n                hoveredCell:\n                  v.x && v.y ? { v: v, userId: DicUser[v.x] } : false,\n              })\n            }\n          />\n          {this.state.hoveredCell ? (\n            <Hint value={buildValue(this.state.hoveredCell)}>\n              <div style={{ color: \"black\" }}>\n                <b>\n                  <strong> {\"userId: \" + this.state.hoveredCell.userId}</strong>\n                </b>\n              </div>\n            </Hint>\n          ) : null}\n        </XYPlot>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    dialog: state.result.dialog,\n    survey: state.result.survey,\n    session: state.session_interactive,\n  };\n}\n\nconst mapDispatchToProps = {\n  getResult: getResult,\n  deleteResult: deleteResult,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InteractiveQuality);\n","import React from \"react\";\nimport {Table} from 'antd';\nimport {deleteResult, getResult} from '../../../../actions/crowdAction';\nimport {connect} from \"react-redux\";\nimport {serverUrl} from \"../../../../configs\";\n\nlet getMean = function (data) {\n  return data.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  }) / data.length;\n};\nlet getSD = function (data) {\n  let m = getMean(data);\n  return Math.sqrt(data.reduce(function (sq, n) {\n    return sq + Math.pow(n - m, 2);\n  }, 0) / (data.length - 1));\n};\n\nfunction get_interactive_results(t){\n  fetch(serverUrl + '/api/get/result/interactive/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json){\n      let times = [];\n      let bonuses = [];\n      let cost = 0;\n\n      if (json.survey.length > 0){\n        json.survey.forEach(function(data, index){\n          if (data.times.length > 0){\n            times.push({\"userId\": data.userID, \"times\": data.times});\n          }\n        })\n  \n        let all_times = [];\n        let bonus_times = [];\n  \n        times.forEach(function(data, index){\n          let durations = [];\n          data.times.forEach(function(data2, index2){\n            durations.push(data2.time/1000);\n          })\n  \n          let sum_x = durations.reduce((a, b) => a + b, 0);\n          all_times.push(sum_x);\n          bonus_times[data.userId] = sum_x;\n        })\n  \n        let average_time = getMean(all_times);\n        Object.keys(bonus_times).forEach(function(key){\n          if (bonus_times[key] > average_time){\n            bonuses.push({\"submissionID\": key, \"bonus\": \"$\" + Number(Math.round(15 * (bonus_times[key] - average_time) / 3600+'e2') + 'e-2').toString()})\n          }\n          else{\n            bonuses.push({\"submissionID\": key, \"bonus\": \"$0.00\"})\n          }\n        })\n        cost = 15 * getMean(all_times) / 3600;\n      }\n      \n  \n      t.setState({\n        cost: cost,\n        bonus: bonuses\n      })\n    })\n}\n\nclass InteractivePayment extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cost: 0\n    }\n  }\n\n  componentDidMount() {\n    this.props.getResult(\"interactive\", this.props.session._id);\n    get_interactive_results(this);\n  }\n\n  render() {\n    get_interactive_results(this);\n\n    const bonus_col = [\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID',\n      },\n      {\n        title: 'Suggested Bonus',\n        dataIndex: 'bonus',\n        key: 'bonus',\n      }\n    ]\n    return <div>\n      <h1>Recommend Reward per Assignment </h1>\n      <p> = hourly wage ($15.00) * average time (sec) / (60 sec * 60 min)</p>\n      <div style={{'text-align': 'center', 'font-size': '30px'}}>\n          ${Math.round(this.state.cost * 100) / 100}\n      </div>\n      <br></br>\n      <br></br>\n      <h1>Suggested Bonuses</h1>\n      <Table rowKey=\"submissionID\" dataSource={this.state.bonus} columns={bonus_col} size=\"small\"\n        />\n    </div>\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    dialog: state.result.dialog,\n    survey: state.result.survey,\n    session: state.session_interactive\n  };\n}\n\n\nconst mapDispatchToProps = {\n  getResult: getResult,\n  deleteResult: deleteResult\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InteractivePayment);\n\n\n\n","import React from \"react\";\nimport { deleteResult, getResult } from \"../../../../actions/crowdAction\";\nimport { connect } from \"react-redux\";\nimport { serverUrl } from \"../../../../configs\";\nimport { Button, Table } from \"antd\";\nimport { DownloadOutlined } from \"@ant-design/icons\";\nimport { saveAs } from \"file-saver\";\n\nfunction get_interactive_results(t) {\n  fetch(\n    serverUrl +\n      \"/api/result/interactive/\" +\n      t.props.session._id +\n      \"/flyingbroom\"\n  )\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let feedbacks = [];\n      for (const annotation of json.unit[0].annotations) {\n        for (const survey of annotation.survey) {\n          if (survey.Name === \"FEEDBACK\") {\n            feedbacks.push({ userID: annotation.userID, feedback: survey.A });\n          }\n        }\n      }\n      t.setState({\n        feedbacks: feedbacks,\n      });\n    });\n}\n\nclass InteractiveFeedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      feedbacks: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.getResult(\"interactive\", this.props.session._id);\n    get_interactive_results(this);\n    setInterval(() => get_interactive_results(this), 5000);\n  }\n\n  render() {\n    const feedback_detail_col = [\n      {\n        title: \"user id\",\n        dataIndex: \"userID\",\n        key: \"userID\",\n      },\n      {\n        title: \"feedback\",\n        dataIndex: \"feedback\",\n        key: \"feedback\",\n      },\n    ];\n\n    return (\n      <div>\n        <Button\n          onClick={() => {\n            var blob = new Blob(\n              [JSON.stringify(this.state.feedbacks, null, 2)],\n              { type: \"text/plain;charset=utf-8\" }\n            );\n            saveAs(blob, \"interactive_feedback.json\");\n          }}\n        >\n          <DownloadOutlined /> Download Feedback\n        </Button>\n        <br></br>\n        <br></br>\n\n        <h1>Feedback </h1>\n        <Table\n          rowKey=\"userId\"\n          dataSource={this.state.feedbacks}\n          columns={feedback_detail_col}\n          size=\"small\"\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    dialog: state.result.dialog,\n    survey: state.result.survey,\n    session: state.session_interactive,\n  };\n}\n\nconst mapDispatchToProps = {\n  getResult: getResult,\n  deleteResult: deleteResult,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InteractiveFeedback);\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Tabs } from 'antd';\nimport { HomeOutlined, AreaChartOutlined, MessageOutlined, BarChartOutlined, PayCircleOutlined } from '@ant-design/icons'\n\nimport InteractiveConfigure from \"./InteractiveConfigure.js\";\nimport Results from \"./Results.js\";\nimport { newInteractive } from \"../../../../actions/interactiveActions\";\nimport InteractiveQuality from \"./InteractiveQuality\";\nimport InteractivePayment from \"./InteractivePayment\";\nimport InteractiveFeedback from \"./InteractiveFeedback\";\n\nconst TabPane = Tabs.TabPane;\n\n\nclass Interactive extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"interactive open\");\n  }\n\n  render() {\n    return <div>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab={<span><HomeOutlined />Configure</span>} key=\"1\">\n          {this.props.interactive !== \"text\" ?\n            <InteractiveConfigure session={this.props.interactive} />\n            : null\n          }\n        </TabPane>\n        <TabPane tab={<span><AreaChartOutlined />Raw Results</span>} key=\"2\">\n          <Results session={this.props.interactive} />\n        </TabPane>\n        <TabPane tab={<span><MessageOutlined />Feedback</span>} key=\"5\">\n          <InteractiveFeedback session={this.props.interactive} />\n        </TabPane>\n        <TabPane tab={<span><BarChartOutlined />Quality</span>} key=\"3\">\n          <InteractiveQuality session={this.props.interactive} />\n        </TabPane>\n        <TabPane tab={<span><PayCircleOutlined />Payment</span>} key=\"4\">\n          <InteractivePayment session={this.props.interactive} />\n        </TabPane>\n      </Tabs>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    interactive: state.session_interactive,\n  }\n}\n\n\nconst mapDispatchToProps = {\n  newInteractive: newInteractive,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Interactive);\n","export function newInteractive(interactive) {\n  return {\n    type: 'NEW_INTERACTIVE',\n    interactive\n  }\n}","import React from \"react\";\nimport { Button, Drawer, Form, Input, Row, Tabs } from 'antd';\nimport { EditOutlined } from '@ant-design/icons'\nimport { clientUrl } from '../../../../configs'\n\n\nconst TabPane = Tabs.TabPane;\nconst FormItem = Form.Item;\n\nclass CategoryTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false, username: '', showlink: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  generate = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.setState({\n          username: values.username,\n          showlink: true\n        })\n      }\n    });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"left\", width: \"90%\" }} onClick={this.showDrawer}>\n          <EditOutlined />Amazon Mechanical Turk Template\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Template\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"preview\">\n                <TabPane tab={<span>Preview</span>} key=\"preview\">\n                  <div>\n                    <div style={{ \"border-style\": \"solid\" }}>\n                      <div style={{ \"text-align\": \"center\" }}>\n                        <p>Preview</p>\n                      </div>\n                      <p style={{ \"padding-left\": \"2%\" }}>Background: {this.props.thisstate.generic_introduction} </p>\n                      <p style={{ \"padding-left\": \"2%\" }}>Instructions: {this.props.thisstate.generic_instructions} </p>\n                    </div>\n                    <br></br>\n                    <p>Input a username and generate the HIT link</p>\n\n                    <Form onSubmit={this.generate}>\n                      <FormItem {...formItemLayout}>\n                        {getFieldDecorator(`username`)(\n                          <Input.TextArea placeholder={\"Username\"} style={{ width: '60%', marginRight: 8, float: \"left\" }}\n                            autoSize={{ minRows: 1, maxRows: 1 }} />\n                        )}\n                        <Button type=\"primary\" htmlType=\"submit\" style={{ float: \"left\" }}>Generate Link</Button>\n                      </FormItem>\n                    </Form>\n\n                    {this.state.showlink ?\n                      <p>Please go to {clientUrl}/worker_category?MID={this.state.username}ID={this.props.thisstate._id} in a separate window to complete the HIT</p>\n                      : null}\n\n                    <br></br>\n                    <p>When you are done, input the confirmation code here: <input type=\"text\" style={{ \"border\": \"1px solid gray\", \"padding-left\": \"5px\" }} /></p>\n                  </div>\n                </TabPane>\n                <TabPane tab={<span>Code</span>} key=\"code\">\n                  <pre>\n                    <code>\n                      &lt;style&gt;<br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>table, th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>border: 1px solid black;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>padding: 15px;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                            &lt;/style&gt;<br></br>\n                      <br></br>\n                            &lt;!-- Unique turker script --&gt; <br></br>\n                            &lt;script src=\"//uniqueturker.myleott.com/lib.js\" type=\"text/javascript\"&gt;&lt;/script&gt;<br></br>\n                            &lt;script&gt;<br></br>\n                            (function() {\"{\"}\n                      <p style={{ \"margin-left\": \"20px\" }}>var ut_id = \"e776c2408d15bc01e2f380e30759f24b\";<br></br>\n                                                                    if (UTWorkerLimitReached(ut_id)) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('mturk_form').style.display = 'none';<br></br>\n                                                                        document.getElementsByTagName('body')[0].innerHTML = \"You have already completed the maximum number of HITs allowed by this requester. Please click 'Return HIT' to avoid any impact on your approval rating.\";</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      {\"}\"});<br></br>\n                            &lt;/script&gt;<br></br>\n                      <br></br>\n                            &lt;!-- You must include this Javascript file --&gt; <br></br>\n                            &lt;script src=\"https://assets.crowd.aws/crowd-html-elements.js\"&gt;&lt;/script&gt; <br></br>\n                      <br></br>\n                            &lt;!-- For the full list of available Crowd HTML Elements and their input/output documentation, please refer to https://docs.aws.amazon.com/sagemaker/latest/dg/sms-ui-template-reference.html --&gt; <br></br>\n                      <br></br>\n                            &lt;!-- You must include crowd-form so that your task submits answers to MTurk --&gt; <br></br>\n                            &lt;crowd-form answer-format=\"flatten-objects\"&gt; <br></br>\n                      <br></br>\n                            &lt;div&gt; <br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div style=\"border-style: solid\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;div style=\"text-align: center\"&gt;</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>&lt;p&gt;Preview&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Background: {this.props.thisstate.generic_introduction} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Instructions: {this.props.thisstate.generic_instructions} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p&gt;Input a username and generate the HIT link&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;input id=\"workerid\" type=\"text\" name=\"username\" placeholder=\"Username\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;button id=\"submit\"&gt;Generate Link&lt;/button&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;br&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;&lt;span id=\"dialcrowd_link\"&gt; - &lt;/span&gt;&lt;/div&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('submit').onclick = function(event) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>event.preventDefault();</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>document.getElementById(\"dialcrowd_link\").textContent = \"Please go to {clientUrl}/worker_category/?ID=5f0b6fe49878971ce8ab83c9&MID=\" + document.getElementById(\"workerid\").value + \" in a separate window to complete the HIT\"</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/script&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;p&gt;When you are done, input the confirmation code here: &lt;input type=\"text\" name=\"confirmation_code\"&gt;&lt;/p&gt;</p>\n                            &lt;/div&gt; <br></br>\n                            &lt;/crowd-form&gt; <br></br>\n                    </code>\n                  </pre>\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default Form.create()(CategoryTemplate);\n","import React from 'react';\nimport { Button, Form, InputNumber, message, Table, Tooltip } from 'antd';\nimport { QuestionCircleOutlined, UploadOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport FileReaderInput from 'react-file-reader-input';\nimport { clientUrl, serverUrl } from \"../../../../configs\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport CategoryTemplate from \"./CategoryTemplate\";\nimport Configure from \"../Configure.js\"\nimport QuestionList, { addKeys, lists2Questions } from \"../QuestionList.js\";\n\n\nconst FormItem = Form.Item;\n\nlet label_index = 0;\nlet feedback_index = 0;\n\nfunction Submit(t, data, id) {\n  fetch(serverUrl + '/api/save/task/category/' + id, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      if (json.message === \"success\") {\n        message.success(\"Success\");\n        t.props.loadData(t.props.session.createdAt, t.props.session.password, \"category\");\n        t.props.new_project_data(\"category\");\n      }\n      else {\n        message.success(\"Fail\");\n      }\n    });\n}\n\nfunction get_category_results(t) {\n  fetch(serverUrl + '/api/get/result/category/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      var responses = [];\n      var sentence_ids = [];\n      let grid = [];\n      let row = [{ readOnly: true, value: '' }]\n      Object.keys(json.kappa).forEach(x => {\n        row.push({ value: x, readOnly: true })\n      });\n      grid.push(row);\n      Object.keys(json.kappa).forEach(user1 => {\n        let row = [{ readOnly: true, value: user1 }];\n        Object.keys(json.kappa).forEach(user2 => {\n          row.push({ value: json.kappa[user1][user2] })\n        });\n        grid.push(row);\n      });\n      console.log(grid);\n\n      json.response.forEach(function (data, index) {\n        if (!sentence_ids.includes(data.sentid)) {\n          sentence_ids.push(data.sentid);\n          responses.push(data);\n        }\n      });\n\n      console.log(json.response);\n\n      t.setState({\n        results: responses,\n        grid: grid\n      });\n    });\n}\n\nclass CategoryConfigure extends Configure {\n  handleSubmit = (e) => {\n    /* Called when the submit button is clicked. */\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        values[\"category_data\"] = this.state.category_data;\n        values[\"dataGolden\"] = this.state.dataGolden;\n        values[\"consent\"] = this.state.consent;\n        this.submit(values, this.props.session._id);\n      }\n      else {\n        console.log(err);\n      }\n    });\n  };\n\n  handleFileInputChange(_, results, targetStateProperty) {\n    const [e, file] = results[0];\n    let data1 = [];\n    let lines = e.target.result.split(\"\\n\");\n    if (targetStateProperty === 'category_data') {\n      for (let i = 0; i < lines.length; i++) {\n        if (lines[i] === \"\")\n          continue;\n        let dic = {};\n        dic[\"sentence\"] = lines[i];\n        dic[\"sentid\"] = i + 1;\n        dic[\"category\"] = [];\n        data1.push(dic);\n      }\n    } else {\n      for (let i = 0; i < lines.length; i += 2) {\n        if (lines[i] === \"\")\n          continue;\n        let dic = {};\n        dic[\"sentence\"] = lines[i];\n        dic[\"sentid\"] = i + 1;\n        dic[\"answer\"] = lines[i + 1];\n        data1.push(dic);\n      }\n    }\n\n    if (data1.length > 0) {\n      message.success(data1.length + ' sentences are loaded!');\n    }\n    this.setState({ [targetStateProperty]: data1 });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.state,\n      results_detail: [],\n      hoveredCell: false,\n      visible: false,\n      visible_survey: false,\n      taskid: \"\",\n      generic_introduction: \"\",\n      generic_instructions: \"\",\n      category_data: [],\n      results: [],\n      visible_kappa: false,\n      questionCategories: []\n    }\n    this.saveURL = '/api/save/task/category/';\n    this.taskName = 'category';\n  }\n\n  makeProps() {\n    if (this.props.session.questionCategories === undefined) {\n      // Workaround\n      const categories = this.props.session.classLabel || [];\n      let questions = lists2Questions(\n        categories,\n        categories.map((_) => ('')),\n        categories.map((_) => ([])),\n        this.props.session.classExample,\n        this.props.session.classCounterexample\n      );\n      this.setState({ questionCategories: questions });\n    } else {\n      this.setState(\n        { \"questionCategories\": addKeys(this.props.session.questionCategories) }\n      );\n    }\n    this.setState({\n      category_data: this.props.session.category_data,\n      dataGolden: this.props.session.dataGolden\n    });\n    super.makeProps();\n  }\n\n  render() {\n    const textStyleExtras = [\n      {\n        name: 'Utterance',\n        fieldName: 'utterance',\n        explain: \"Set the style of utterance to be annotated.\"\n      },\n    ];\n\n    return (<div>\n      <h2 style={{ \"padding-left\": \"1%\" }} >Template for an Intent Classification Task </h2>\n      <p style={{ \"padding-left\": \"1%\" }} >\n        This template is used for the creation of tasks that require the workers to\n        label the intent of utterances.\n      </p>\n      <form onSubmit={this.handleSubmit}>\n        {this._showGeneralConfig()}\n        {this._showAnnotationConfig(\"utterance\")}\n        {this._showDataConfig()}\n        {this._showQualityControlConfig('utterance')}\n        {this._showConsentConfig()}\n        {this._showCategoryConfig()}\n        {this._showFeedbackConfig()}\n        {this._showAppearanceConfig(textStyleExtras)}\n        {this._showButtons()}\n      </form>\n    </div>);\n  }\n\n  _showDataConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <FormItem\n        {...formItemLayout}\n        label={(\n          <span>\n            Num of sentences per page&nbsp;\n            <Tooltip title=\"Sentences per worker per task\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n      >\n        {getFieldDecorator('numofsent', { initialValue: this.state.numofsent })(\n          <InputNumber min={1} max={100} style={{ height: \"100%\" }} />\n        )}\n      </FormItem>\n      {/*\n          <FormItem\n          {...formItemLayout}\n          label={(\n          <span>\n          Num of workers per sentence&nbsp;\n          <Tooltip title=\"How many workers do you want to label per sentence?\">\n          <QuestionCircleOutlined />\n          </Tooltip>\n          </span>\n          )}\n          >\n          {getFieldDecorator('numoflabel', {initialValue: this.props.session.numoflabel})(\n          <InputNumber min={1} max={10}/>\n          )}\n          <span className=\"ant-form-text\"> workers per sentence</span>\n          </FormItem>\n        */}\n      {this._showDataUpload()}\n    </>);\n  }\n\n  _showDataUpload(golden = false) {\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    let columns_dialog = [\n      {\n        title: 'ID',\n        dataIndex: 'sentid',\n        key: 'sendid',\n        width: 100,\n      },\n      {\n        title: 'Text',\n        dataIndex: 'sentence',\n        key: 'sentence',\n      },\n    ];\n    if (golden) {\n      columns_dialog.push({\n        title: 'Answer',\n        dataIndex: 'answer',\n        key: 'answer'\n      });\n    }\n\n    const explain = golden ? (<>\n      <div>\n        Please format your data as below, separated with new lines:\n      </div>\n      <div>Utterance 1. (Ex. I want to buy a ticket.)</div>\n      <div>Intent of utterance 1. (Ex. Purchase)</div>\n      <div>Utterance 2. (Ex. I want to buy a ticket.)</div>\n      <div>Intent of utterance 2. (Ex. Purchase)</div>\n      <div>...</div>\n    </>) : 'Please split the utterances by new line.';\n    const targetStateProperty = golden ? 'dataGolden' : 'category_data';\n\n    return (<>\n      <FormItem\n        {...formItemLayout}\n        label={(\n          <span>\n            Upload your data&nbsp;\n            <Tooltip title={explain}>\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n      >\n        <FileReaderInput\n          as='text'\n          onChange={(e, results) => this.handleFileInputChange(e, results, targetStateProperty)}\n        >\n          <Button\n            style={{ width: '90%' }}\n          >\n            <UploadOutlined /> Click to Upload\n          </Button>\n        </FileReaderInput>\n      </FormItem>\n\n      {(this.state[targetStateProperty] || []).length > 0 ? <div height={500}>\n        <Table rowKey=\"sentence\" dataSource={this.state[targetStateProperty]} columns={columns_dialog} pagination={{ hideOnSinglePage: true }} size=\"small\" />\n      </div> : null\n      }\n    </>);\n  }\n\n  _showCategoryConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const instruction = (\n      \"In this section, you can set up the types of intents the worker can choose from. \"\n      + \"Remember to include examples and counterexamples. They help the worker get a \"\n      + \"better idea what should be labeled as what type of intent, so you can collect data \"\n      + \"of better quality.\"\n    );\n    return (<>\n      <h3>Intent Type Configuration</h3>\n      <p>{instruction}</p>\n      <CategoryQuestionList\n        form={this.props.form}\n        formItemLayout={formItemLayout}\n        removeByKey={this.removeByKey}\n        addByKey={this.addByKey}\n        updateByKey={this.updateByKey}\n        questions={this.state.questionCategories}\n        rootKey={[\"questionCategories\"]}\n        questionFieldLabel=\"Intent type\"\n        questionHelpText={(\n          \"Add an intent type that the worker can select.\"\n        )}\n        textAddQuestion=\"Add an Intent Type\"\n        textInstruction={instruction}\n        placeholderQuestion=\"order_food\"\n        placeholderExample=\"I would like to order a pizza from Domino's.\"\n        placeholderCounterexample=\"What's the temperature now?\"\n        noPreview={true}\n      />\n    </>\n    );\n  }\n\n  _showButtons() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <div style={{ \"text-align\": \"center\", \"padding-left\": \"10%\" }}>\n        <span>Please save before you preview</span>\n      </div>\n      <FormItem {...formItemLayoutWithOutLabel}>\n        <Button type=\"primary\" style={{ width: '90%' }} htmlType=\"submit\">Save</Button>\n        <Button onClick={() => window.open(clientUrl + \"/worker_category?MID=unknown&ID=\" + this.props.session._id)}\n          type=\"primary\" style={{ width: '90%' }}>Preview</Button>\n\n        <br />\n        {/* {this._showVisibility()} */}\n        <Button type=\"primary\" style={{ width: '90%' }}\n          onClick={() => this._saveAsJSON()}\n        >\n          Save Configuration as JSON\n        </Button>\n\n        <div style={{ \"padding-top\": \"5px\" }}>\n          <CategoryTemplate thisstate={this.props.session} />\n        </div>\n      </FormItem>\n    </>);\n  }\n}\n\n\nclass CategoryQuestionList extends QuestionList {\n  static questionTypes = [];\n}\n\n\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(CategoryConfigure));\n","import \"react-vis/dist/style.css\";\nimport React, { Component } from 'react'\nimport { Button, Table } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport { saveAs } from 'file-saver';\n\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_category_results(t) {\n  fetch(serverUrl + '/api/get/result/category/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      var initial = {};\n      var responses = [];\n\n      json.response.forEach(function (data, index) {\n        if (!(data.sentid in initial)) {\n          initial[data.sentid] = data\n        }\n      });\n\n      var keys = Object.keys(initial);\n      keys.sort();\n\n      for (var i = 0; i < keys.length; i++) {\n        initial[keys[i]].result.forEach(function (data, index) {\n          delete initial[keys[i]].result[index][\"feedback\"];\n          delete initial[keys[i]].result[index][\"feedback_questions\"];\n        })\n        responses.push(initial[keys[i]])\n      }\n      t.setState({\n        results: responses,\n      });\n    });\n}\n\nclass CategoryResult extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: []\n    }\n  }\n\n  componentDidMount() {\n    get_category_results(this);\n  }\n\n  render() {\n    get_category_results(this);\n\n    const columns_results = [\n      {\n        title: 'SentID',\n        dataIndex: 'sentid',\n        key: 'sendid',\n        width: 100,\n      },\n      {\n        title: 'Text',\n        dataIndex: 'sentence',\n        key: 'sentence',\n      },\n      {\n        title: 'Num of Submissions',\n        dataIndex: 'num',\n        key: 'num',\n      },\n    ];\n\n    const subcolumns = [\n      {\n        title: 'Intent',\n        dataIndex: 'category',\n        key: 'category',\n      },\n      {\n        title: 'Annotator',\n        dataIndex: 'annotator',\n        key: 'annotator',\n      },\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID',\n      },\n    ];\n\n    return <div>\n      <div title={\"Your Data\"} height={500}>\n        <Button\n          onClick={() => {\n            var blob = new Blob(\n              [JSON.stringify(this.state.results, null, 2)],\n              { type: 'text/plain;charset=utf-8' },\n            )\n            saveAs(blob, \"result.json\")\n          }}\n        >\n          <DownloadOutlined />Download Submissions\n        </Button>\n        <br></br>\n        <br></br>\n        <h1>Results</h1>\n        <Table rowKey=\"sentid\" dataSource={this.state.results} columns={columns_results} size=\"small\"\n          expandedRowRender={record => <Table dataSource={record.result} columns={subcolumns} pagination={false} />}\n        />\n      </div>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryResult);\n\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\";\nimport {Table} from 'antd';\n\nimport {new_project_data} from \"../../../../actions/crowdAction\";\nimport {loadData} from \"../../../../actions/sessionActions\";\nimport {serverUrl} from \"../../../../configs\";\n\nfunction getDetail(t) {\n  const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;\n  fetch(serverUrl + '/api/get/detail_result/category/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n        let bonuses = []\n        let avg = []\n        let cost = 0\n\n        if (json[\"response\"].length > 0){\n          json[\"response\"].forEach(x => {\n            avg.push(x[\"total_duration\"]);\n          });\n  \n          let average_time = average(avg)\n  \n          json[\"response\"].forEach(x =>{\n            if (x[\"total_duration\"] > average_time){\n              bonuses.push({\"submissionID\": x[\"userId\"], \"bonus\": \"$\" + Number(Math.round(15 * (x[\"total_duration\"] - average_time) / 3600+'e2') + 'e-2').toString()})\n            }\n            else{\n              bonuses.push({\"submissionID\": x[\"userId\"], \"bonus\": \"$0.00\"})\n            }\n          })\n\n          cost = 15 * average_time / 3600\n        }\n\n        t.setState({\n          cost: cost,\n          bonus: bonuses\n        });\n\n      });\n}\n\nclass CategoryPayment extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      feedback: []\n    }\n  }\n\n  componentDidMount() {\n    getDetail(this);\n  }\n\n  render() {\n    getDetail(this);\n\n    const bonus_col = [\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID',\n      },\n      {\n        title: 'Suggested Bonus',\n        dataIndex: 'bonus',\n        key: 'bonus',\n      }\n    ]\n    return <div>\n      <h1>Recommend Reward per Assignment </h1>\n      <p> = hourly wage ($15.00) * average time (sec) / (60 sec * 60 min)</p>\n      <br></br>\n      <br></br>\n      <div style={{'text-align': 'center', 'font-size': '30px'}}>\n          ${Math.round(this.state.cost * 100) / 100}\n      </div>\n      <br></br>\n      <br></br>\n      <h1>Suggested Bonuses</h1>\n      <Table rowKey=\"submissionID\" dataSource={this.state.bonus} columns={bonus_col} size=\"small\"\n        />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryPayment);\n\n","import React, { Component } from 'react'\nimport { Button, Table } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport { saveAs } from 'file-saver';\n\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_category_results(t) {\n  fetch(serverUrl + '/api/get/result/category/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let workerFeedback = {};\n\n      for (const unit of json.response) {\n        for (const annotation of unit.result) {\n          if (annotation.feedback !== null) {\n            workerFeedback[annotation.submissionID] = annotation.feedback;\n          }\n        }\n      }\n      let feedbacks = [];\n      for (const [uid, feedback] of Object.entries(workerFeedback)) {\n        feedbacks.push({ userId: uid, feedback: feedback })\n      }\n      t.setState({\n        feedbacks: feedbacks\n      });\n    });\n}\n\nclass CategoryFeedback extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      feedback: []\n    }\n  }\n\n  componentDidMount() {\n    get_category_results(this);\n  }\n\n  render() {\n    get_category_results(this);\n    const columns = [\n      {\n        title: 'user id',\n        dataIndex: 'userId',\n        key: 'userId'\n      },\n      {\n        title: 'feedback',\n        dataIndex: 'feedback',\n        key: 'feedback'\n      }\n    ];\n\n    return <div>\n      <Button\n        onClick={() => {\n          var blob = new Blob(\n            [JSON.stringify(this.state.feedbacks, null, 2)],\n            { type: 'text/plain;charset=utf-8' },\n          )\n          saveAs(blob, \"category_feedback.json\")\n        }}\n      >\n        <DownloadOutlined /> Download Feedback\n      </Button>\n      <br></br>\n      <br></br>\n      <h1>Feedback </h1>\n      <Table rowKey=\"userId\" dataSource={this.state.feedbacks} columns={columns} size=\"small\" />\n    </div>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryFeedback);\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Tabs } from 'antd';\nimport { HomeOutlined, PayCircleOutlined, AreaChartOutlined, MessageOutlined, BarChartOutlined } from '@ant-design/icons';\nimport CategoryConfigure from \"./CategoryConfigure.js\";\nimport CategoryResult from \"./CategoryResult.js\";\nimport CategoryQuality from \"./CategoryQuality.js\";\nimport CategoryPayment from \"./CategoryPayment.js\";\nimport CategoryFeedback from \"./CategoryFeedback.js\";\n\nconst TabPane = Tabs.TabPane;\n\nclass Category extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"Category open\")\n  }\n\n  render() {\n    return <div>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab={<span><HomeOutlined />Configure</span>} key=\"1\">\n          {this.props.session.hasOwnProperty('classLabel') ?\n            <CategoryConfigure data={this.props.session} />\n            : null}\n        </TabPane>\n        <TabPane tab={<span><AreaChartOutlined />Raw Results</span>} key=\"2\">\n          <CategoryResult data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><MessageOutlined />Feedback</span>} key=\"5\">\n          <CategoryFeedback data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><BarChartOutlined />Quality</span>} key=\"3\">\n          <CategoryQuality data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><PayCircleOutlined />Payment</span>} key=\"4\">\n          <CategoryPayment data={this.props.session} />\n        </TabPane>\n        {/*\n        <TabPane tab={<span><HomeOutlined />Make Golden Answers</span>} key=\"3\">\n          <Iframe style={{\"margin-right\": \"10px\"}} url={clientUrl + \"/worker_category?MID=golden&ID=\" + this.props.session._id}\n                  width=\"100%\"\n                  height=\"1000px\"\n                  display=\"initial\"\n                  position=\"relative\"\n                  allowFullScreen/>\n        </TabPane>\n        */}\n      </Tabs>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  }\n}\n\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Category);\n","import React from \"react\";\nimport { Button, Drawer, Form, Input, Row, Tabs } from 'antd';\nimport { EditOutlined } from '@ant-design/icons'\nimport { clientUrl } from '../../../../configs'\n\n\nconst TabPane = Tabs.TabPane;\nconst FormItem = Form.Item;\n\nclass SequenceTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false, username: '', showlink: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  generate = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.setState({\n          username: values.username,\n          showlink: true\n        })\n      }\n    });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"left\", width: \"90%\" }} onClick={this.showDrawer}>\n          <EditOutlined />Amazon Mechanical Turk Template\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Template\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"preview\">\n                <TabPane tab={<span>Preview</span>} key=\"preview\">\n                  <div>\n                    <div style={{ \"border-style\": \"solid\" }}>\n                      <div style={{ \"text-align\": \"center\" }}>\n                        <p>Preview</p>\n                      </div>\n                      <p style={{ \"padding-left\": \"2%\" }}>Background: {this.props.thisstate.generic_introduction} </p>\n                      <p style={{ \"padding-left\": \"2%\" }}>Instructions: {this.props.thisstate.generic_instructions} </p>\n                    </div>\n                    <br></br>\n                    <p>Input a username and generate the HIT link</p>\n\n                    <Form onSubmit={this.generate}>\n                      <FormItem {...formItemLayout}>\n                        {getFieldDecorator(`username`)(\n                          <Input.TextArea placeholder={\"Username\"} style={{ width: '60%', marginRight: 8, float: \"left\" }}\n                            autoSize={{ minRows: 1, maxRows: 1 }} />\n                        )}\n                        <Button type=\"primary\" htmlType=\"submit\" style={{ float: \"left\" }}>Generate Link</Button>\n                      </FormItem>\n                    </Form>\n\n                    {this.state.showlink ?\n                      <p>Please go to {clientUrl}/worker_sequence?MID={this.state.username}&ID={this.props.thisstate._id} in a separate window to complete the HIT</p>\n                      : null}\n                    <br></br>\n                    <p>When you are done, input the confirmation code here: <input type=\"text\" style={{ \"border\": \"1px solid gray\", \"padding-left\": \"5px\" }} /></p>\n                  </div>\n                </TabPane>\n                <TabPane tab={<span>Code</span>} key=\"code\">\n                  <pre>\n                    <code>\n                      &lt;style&gt;<br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>table, th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>border: 1px solid black;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>padding: 15px;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                            &lt;/style&gt;<br></br>\n                      <br></br>\n                            &lt;!-- Unique turker script --&gt; <br></br>\n                            &lt;script src=\"//uniqueturker.myleott.com/lib.js\" type=\"text/javascript\"&gt;&lt;/script&gt;<br></br>\n                            &lt;script&gt;<br></br>\n                            (function() {\"{\"}\n                      <p style={{ \"margin-left\": \"20px\" }}>var ut_id = \"e776c2408d15bc01e2f380e30759f24b\";<br></br>\n                                                                    if (UTWorkerLimitReached(ut_id)) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('mturk_form').style.display = 'none';<br></br>\n                                                                        document.getElementsByTagName('body')[0].innerHTML = \"You have already completed the maximum number of HITs allowed by this requester. Please click 'Return HIT' to avoid any impact on your approval rating.\";</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      {\"}\"});<br></br>\n                            &lt;/script&gt;<br></br>\n                      <br></br>\n                            &lt;!-- You must include this Javascript file --&gt; <br></br>\n                            &lt;script src=\"https://assets.crowd.aws/crowd-html-elements.js\"&gt;&lt;/script&gt; <br></br>\n                      <br></br>\n                            &lt;!-- For the full list of available Crowd HTML Elements and their input/output documentation, please refer to https://docs.aws.amazon.com/sagemaker/latest/dg/sms-ui-template-reference.html --&gt; <br></br>\n                      <br></br>\n                            &lt;!-- You must include crowd-form so that your task submits answers to MTurk --&gt; <br></br>\n                            &lt;crowd-form answer-format=\"flatten-objects\"&gt; <br></br>\n                      <br></br>\n                            &lt;div&gt; <br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div style=\"border-style: solid\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;div style=\"text-align: center\"&gt;</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>&lt;p&gt;Preview&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Background: {this.props.thisstate.generic_introduction} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Instructions: {this.props.thisstate.generic_instructions} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p&gt;Input a username and generate the HIT link&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;input id=\"workerid\" type=\"text\" name=\"username\" placeholder=\"Username\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;button id=\"submit\"&gt;Generate Link&lt;/button&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;br&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;&lt;span id=\"dialcrowd_link\"&gt; - &lt;/span&gt;&lt;/div&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('submit').onclick = function(event) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>event.preventDefault();</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>document.getElementById(\"dialcrowd_link\").textContent = \"Please go to {clientUrl}/worker_sequence/?ID=5f0b6fe49878971ce8ab83c9&MID=\" + document.getElementById(\"workerid\").value + \" in a separate window to complete the HIT\"</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/script&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;p&gt;When you are done, input the confirmation code here: &lt;input type=\"text\" name=\"confirmation_code\"&gt;&lt;/p&gt;</p>\n                            &lt;/div&gt; <br></br>\n                            &lt;/crowd-form&gt; <br></br>\n                    </code>\n                  </pre>\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default Form.create()(SequenceTemplate);\n","import React from 'react'\nimport { Button, Form, Table, Tooltip } from 'antd';\nimport { connect } from \"react-redux\";\nimport { QuestionCircleOutlined, UploadOutlined } from '@ant-design/icons'\nimport FileReaderInput from 'react-file-reader-input'\nimport { clientUrl, serverUrl } from \"../../../../configs\";\nimport { message } from \"antd/lib/index\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { getResult, new_project_data } from \"../../../../actions/crowdAction\";\nimport SequenceTemplate from \"./SequenceTemplate\";\nimport Configure from \"../Configure.js\";\nimport QuestionList, { addKeys, lists2Questions } from \"../QuestionList.js\";\n\n\nconst FormItem = Form.Item;\nlet label_index = 0;\nlet feedback_index = 0;\n\nfunction getresults(t) {\n  fetch(serverUrl + '/api/get/result/sequence/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      t.setState({\n        results: json.response,\n      });\n    });\n}\n\n\nclass SequenceConfigure extends Configure {\n  handleSubmit = (e) => {\n    /* Called when the submit button is clicked. */\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        values[\"sequence_data\"] = this.state.sequence_data;\n        values[\"dataGolden\"] = this.state.dataGolden;\n        values[\"consent\"] = this.state.consent;\n        this.submit(values, this.props.session._id);\n      }\n      else {\n        console.log(err);\n      }\n    });\n  };\n\n  handleFileInputChange(_, results, targetStateProperty) {\n    if (targetStateProperty !== 'dataGolden') {\n      const [e, file] = results[0]\n      let data\n      var data1 = []\n      var lines = e.target.result.split(\"\\n\");\n      for (var i = 0; i < lines.length; i++) {\n        if (lines[i] == \"\")\n          continue;\n        var dic = {};\n        dic[\"sentence\"] = lines[i];\n        dic[\"sentid\"] = i + 1;\n        dic[\"entity\"] = []\n        data1.push(dic);\n      }\n      if (data1.length > 0) {\n        message.success(data1.length + ' sentences are loaded!');\n      }\n      this.setState({ sequence_data: data1 });\n    } else {\n      const [e, file] = results[0];\n      let lines = e.target.result.split(\"\\n\");\n      let data = [];\n      for (var i = 0; i < lines.length / 2; i += 1) {\n        if (lines[i * 2] == \"\")\n          continue;\n        // extract sentence\n        const sent = lines[i * 2];\n        // extract answers\n        let entities = [];\n        for (const seg of lines[i * 2 + 1].split(';')) {\n          if (seg === '') continue;\n          const entityType = seg.split(':')[0];\n          const [start, end] = seg.split(':')[1].split(',');\n          entities.push({\n            start: parseInt(start), end: parseInt(end),\n            entity: entityType\n          })\n        }\n        data.push({\n          sentid: i,\n          sentence: sent,\n          answer: entities\n        });\n      }\n      this.setState({ dataGolden: data });\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.state,\n      sequence_data: [],\n      survey: [],\n      numofhit: 10,\n      numoflabel: 3,\n      results: [],\n      questionEntities: []\n    }\n    this.saveURL = '/api/save/task/sequence/';\n    this.taskName = 'sequence';\n  }\n\n  makeProps() {\n    if (this.props.session.questionEntities === undefined) {\n      // Workaround\n      const labels = this.props.session.Label || [];\n      let questions = lists2Questions(\n        labels,\n        labels.map((_) => ('')),\n        labels.map((_) => ([])),\n        this.props.session.Example,\n        this.props.session.Counterexample\n      );\n      this.setState({ \"questionEntities\": questions });\n    } else {\n      this.setState(\n        { \"questionEntities\": addKeys(this.props.session.questionEntities) }\n      );\n    }\n    this.setState({\n      sequence_data: this.props.session.sequence_data,\n      dataGolden: this.props.session.dataGolden\n    });\n    super.makeProps();\n  }\n\n  render() {\n    const textStyleExtras = [\n      {\n        name: 'Utterance',\n        fieldName: 'utterance',\n        explain: \"Set the style of utterance to be annotated.\"\n      },\n      {\n        name: 'Answer',\n        fieldName: 'answer',\n        explain: \"Set the text style in workers' answer field.\"\n      },\n    ];\n\n    return (<div>\n      <h2 style={{ \"padding-left\": \"1%\" }} >Template for an Entity Labeling Task </h2>\n      <p style={{ \"padding-left\": \"1%\" }} >\n        This template is used for the creation of tasks that require the workers to\n        annotate the entities present in an utterance.\n        {/* You can have give the worker one or more conversations, and ask questions about\n            those conversations. */}\n      </p>\n      <form onSubmit={this.handleSubmit}>\n        {this._showGeneralConfig()}\n        {this._showAnnotationConfig(\"sentence\")}\n        {this._showDataUpload()}\n        {this._showQualityControlConfig('sentence')}\n        {this._showConsentConfig()}\n        {this._showEntityConfig()}\n        {this._showFeedbackConfig()}\n        {this._showAppearanceConfig(textStyleExtras)}\n        {this._showButtons()}\n      </form>\n    </div>);\n  }\n\n  _showEntityConfig() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    const instruction = (\n      \"In this section, you can set up the types of entities the worker can choose from. \"\n      + \"Remember to include examples and counterexamples. They help the worker get a \"\n      + \"better idea what should be labeled as what type of entity, so you can collect data \"\n      + \"of better quality.\"\n    );\n    return (<>\n      <h3>Entity Types Configuration</h3>\n      <p>{instruction}</p>\n      <IntentQuestionList\n        form={this.props.form}\n        formItemLayout={formItemLayout}\n        removeByKey={this.removeByKey}\n        addByKey={this.addByKey}\n        updateByKey={this.updateByKey}\n        questions={this.state.questionEntities}\n        rootKey={[\"questionEntities\"]}\n        questionFieldLabel=\"Entity type\"\n        questionHelpText={(\n          \"Add an entity type that the worker may choose from.\"\n        )}\n        textAddQuestion=\"Add an Entity Type\"\n        textInstruction={instruction}\n        placeholderQuestion=\"Food\"\n        placeholderExample=\"Pizza\"\n        placeholderCounterexample=\"Car\"\n        noPreview={true}\n      />\n    </>);\n  }\n\n  _showDataUpload(golden = false) {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    let columns = [\n      {\n        title: 'ID',\n        dataIndex: 'sentid',\n        key: 'sendid',\n        width: 100,\n      },\n      {\n        title: 'Text',\n        dataIndex: 'sentence',\n        key: 'sentence',\n      },\n    ];\n    if (golden) {\n      columns.push({\n        title: 'Answer',\n        dataIndex: 'answer',\n        key: 'answer',\n        render: answer => (answer.map(\n          entity => `${entity.entity}:${entity.start},${entity.end};`\n        ).join(''))\n      });\n    }\n\n    const explain = golden ? (<>\n      <div>Please format your data as below, separated with new lines:</div>\n      <div>Sentence 1 (Ex. I want to have some thai food at cheap price.)</div>\n      <div>Starta and end positions of the entities in sentence 1, with format entity_type1:start_pos,end_pos;entity_type2:start_pos,end_pos; (Ex. food_type:20,24;price_range:33:38;)</div>\n      <div>Sentence 2 (Ex. I want to have some thai food at cheap price.)</div>\n      <div>Starta and end positions of the entities in sentence 2, with format entity_type1:start_pos,end_pos;entity_type2:start_pos,end_pos;(Ex. food_type:20,24;price_range:33:38;)</div>\n    </>) : 'Sentences should be split by new line. Please check the file format below';\n    const targetStateProperty = golden ? 'dataGolden' : 'sequence_data';\n    return (<>\n      <FormItem {...formItemLayout} label={(\n        <span>\n          {golden ? 'Upload your golden data' : 'Upload your data'} &nbsp;\n          <Tooltip title={explain}>\n            <QuestionCircleOutlined />\n          </Tooltip>\n        </span>\n      )} >\n        <FileReaderInput\n          as='text'\n          onChange={(e, results) => this.handleFileInputChange(e, results, targetStateProperty)}\n        >\n          <Button style={{ width: '90%' }}>\n            <UploadOutlined /> Click to Upload\n          </Button>\n        </FileReaderInput>\n      </FormItem>\n\n      {(this.state[targetStateProperty] || []).length > 0 ? <div title={\"Your Data\"} height={500}>\n        <Table rowKey=\"sentence\" dataSource={this.state[targetStateProperty]} columns={columns}\n          pagination={{ hideOnSinglePage: true }} size=\"small\" />\n      </div> : null}\n    </>);\n  }\n\n  _showButtons() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <div style={{ \"text-align\": \"center\", \"padding-left\": \"60px\" }}>\n        <span>Please save before you preview</span>\n      </div>\n      <FormItem {...formItemLayoutWithOutLabel}>\n        <Button type=\"primary\" style={{ width: '90%' }} htmlType=\"submit\">Save</Button>\n        <Button onClick={() => window.open(clientUrl + \"/worker_sequence?MID=unknown&ID=\" + this.props.session._id)}\n          type=\"primary\" style={{ width: '90%' }}>Preview</Button>\n\n        <br />\n        {/* {this._showVisibility()} */}\n        <Button type=\"primary\" style={{ width: '90%' }}\n          onClick={() => this._saveAsJSON()}\n        >\n          Save Configuration as JSON\n        </Button>\n\n        <div style={{ \"padding-top\": \"5px\" }}>\n          <SequenceTemplate thisstate={this.props.session} />\n        </div>\n      </FormItem>\n    </>);\n  }\n\n}\n\nclass IntentQuestionList extends QuestionList {\n  static questionTypes = [];\n  render() {\n    return (<>\n      {super.render()}\n      {/* <Form.Item {...this.formItemLayoutWithOutLabel}>\n          <PreviewEntity questions={this.props.questions} />\n          </Form.Item> */}\n    </>);\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_sequence,\n    result: state.result,\n\n  };\n}\n\n\nconst mapDispatchToProps = {\n  getResult: getResult,\n  new_project_data: new_project_data,\n  loadData: loadData,\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(SequenceConfigure));\n","import React, { Component } from 'react'\nimport { Button, Table } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport { saveAs } from 'file-saver';\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_sequence_results(t) {\n  fetch(serverUrl + '/api/get/result/sequence/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      console.log(\"json\", json);\n\n      let detail = [];\n      let subsubdetail = [];\n      let annotators = [];\n      let intermediate = {};\n      let sentence_dic = {};\n      let ids = [];\n\n      json.response.forEach(function (data, index) {\n        //each sentence\n        annotators = [];\n        let sentence = data.sentence;\n        data.meta.forEach(function (data1, index1) {\n          //each annotator\n          if (!(annotators.includes(data1.submissionID))) {\n            annotators.push(data1.submissionID);\n            subsubdetail = [];\n            data.entity[index1].forEach(function (data2, index2) {\n              subsubdetail.push({ \"entity\": data2.type, \"label\": data2.value })\n            })\n            if (sentence in intermediate) {\n              intermediate[sentence].push({ \"submissionID\": data1.submissionID, \"annotator\": data1.annotator, \"detail\": subsubdetail });\n            }\n            else {\n              sentence_dic[data.sentid] = sentence\n              ids.push(data.sentid);\n              intermediate[sentence] = [{ \"submissionID\": data1.submissionID, \"annotator\": data1.annotator, \"detail\": subsubdetail }];\n            }\n          }\n        })\n      })\n\n      ids.sort();\n\n      ids.forEach(function (id) {\n        detail.push({ \"sentence\": sentence_dic[id], \"sentid\": id, \"num\": intermediate[sentence_dic[id]].length, \"detail\": intermediate[sentence_dic[id]] })\n      })\n\n      t.setState({\n        results: json.response,\n        results_detail: detail\n      });\n    });\n}\n\nclass SequenceResult extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results_detail: [],\n      results: []\n    }\n  }\n\n  componentDidMount() {\n    get_sequence_results(this);\n  }\n\n  render() {\n    const detail_subcolumns = [\n      {\n        title: 'Annotator',\n        dataIndex: 'annotator',\n        key: 'annotator'\n      },\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID'\n      },\n    ];\n    const detail_subsubcolumns = [\n      {\n        title: 'entity',\n        dataIndex: 'entity',\n        key: 'entity'\n      },\n      {\n        title: 'label',\n        dataIndex: 'label',\n        key: 'label'\n      }\n    ]\n    const detail_columns = [\n      {\n        title: 'SentID',\n        dataIndex: 'sentid',\n        key: 'sentid',\n        width: 100,\n      },\n      {\n        title: 'Sentence',\n        dataIndex: 'sentence',\n        key: 'sentence'\n      },\n      {\n        title: 'submissions',\n        dataIndex: 'num',\n        key: 'num'\n      }\n\n    ];\n\n    return <div>\n      <Button\n        onClick={() => {\n          var blob = new Blob(\n            [JSON.stringify(this.state.results_detail, null, 2)],\n            { type: 'text/plain;charset=utf-8' },\n          )\n          saveAs(blob, \"result.json\")\n        }}\n      >\n        <DownloadOutlined /> Download Submissions\n      </Button>\n      <br></br>\n      <br></br>\n      <h1>Results</h1>\n      <Table rowKey=\"userId\" dataSource={this.state.results_detail} columns={detail_columns} size=\"small\"\n        expandedRowRender={record => <Table dataSource={record.detail} columns={detail_subcolumns}\n          expandedRowRender={record2 => <Table dataSource={record2.detail} columns={detail_subsubcolumns} />} />}\n      />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_sequence,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SequenceResult);\n\n","import {Hint, HorizontalGridLines, LineMarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis, ChartLabel} from 'react-vis';\nimport \"react-vis/dist/style.css\";\nimport React, {Component} from 'react';\nimport {Popconfirm, Table, Tooltip} from 'antd';\nimport {connect} from \"react-redux\";\n\nimport {new_project_data} from \"../../../../actions/crowdAction\";\nimport {loadData} from \"../../../../actions/sessionActions\";\nimport {serverUrl} from \"../../../../configs\";\nimport {getWorkerQuality} from \"../category/CategoryQuality.js\";\nimport DataStatistics from \"../DataStatistics\";\n\nlet DicUser = {};\n\nlet getMean = function (data) {\n  return data.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  }) / data.length;\n};\nlet getSD = function (data) {\n  let m = getMean(data);\n  return Math.sqrt(data.reduce(function (sq, n) {\n    return sq + Math.pow(n - m, 2);\n  }, 0) / (data.length - 1));\n};\n\nfunction get_sequence_results(t) {\n  fetch(serverUrl + '/api/get/result/sequence/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n        let detail = [];\n        let subsubdetail = [];\n        let annotators = [];\n        let intermediate = {};\n        let all_times = [];\n\n        if (json.response.length > 0){\n          json.response.forEach(function(data, index){\n            //each sentence\n            annotators = [];\n            let sentence = data.sentence;\n            data.meta.forEach(function(data1, index1){\n              //each annotator\n              if (!(annotators.includes(data1.submissionID))){\n                annotators.push(data1.submissionID);\n                let duration = data1.time/1000;\n                subsubdetail = data1.answer.map(a => ({entity: a.type, label: a.value}));\n                if (data1.submissionID in intermediate){\n                  intermediate[data1.submissionID].push({\"sentence\": data1.sentence, \"duration\": duration, \"detail\": subsubdetail});\n                }\n                else{\n                  intermediate[data1.submissionID] = [{\"sentence\": data1.sentence, \"duration\": duration, \"detail\": subsubdetail}];\n                }\n              }\n            })\n          })\n          Object.keys(intermediate).forEach(function(key){\n            let times = [];\n            intermediate[key].forEach(function(data, index){\n              times.push(data.duration);\n            })\n            \n            let sum_x = times.reduce((a, b) => a + b, 0);\n            let mean = getMean(times);\n            let stdev = getSD(times);\n            all_times.push(sum_x);\n  \n            detail.push({\"userId\": key, \"total_duration\": sum_x.toFixed(3), \"average_duration\": mean.toFixed(3), \"std_duration\": stdev.toFixed(3), \"detail\": intermediate[key], \"allsame\": \"no\", \"outlier\": \"no\", \"num\": intermediate[key].length})\n          })\n  \n          let stdev = getSD(all_times);\n          let mean = getMean(all_times);\n          detail.forEach(function(data, index){\n            if (data[\"total_duration\"] > (mean + 2*stdev) || data[\"total_duration\"] < (mean - 2*stdev)){\n              detail[index][\"outlier\"] = \"yes\";\n            }\n          })\n        } \n\n        const url = serverUrl + '/api/result/sequence/' + t.props.session._id;\n        return getWorkerQuality(url).then(workerQuality => {\n          let results = json.response;\n          detail = detail.map(\n            result => ({\n              ...result,\n              ...workerQuality[result.userId]\n            })\n          );\n          t.setState({\n            results: json.response,\n            results_detail: detail,\n          });\n        });\n        /* t.setState({\n         *   results: json.response,\n         *   results_detail: detail,\n         * }); */\n      });\n}\n\nfunction remove_category_results(userId) {\n  fetch(serverUrl + '/api/delete/result/sequence/' + userId)\n      .then(function (response) {\n        return response.json();\n      })\n}\n\n// gaussian graph\nfunction gaussian(arg) {\n  let items = [];\n  arg.map((item, i) => {\n    let avg = item[\"average_duration\"];\n    let total = item[\"total_duration\"];\n    let userId = item[\"userId\"];\n    DicUser[total] = userId;\n    items.push(total);\n  });\n\n  let getMean = function (data) {\n    return data.reduce(function (a, b) {\n      return Number(a) + Number(b);\n    }) / data.length;\n  };\n  let getSD = function (data) {\n    let m = getMean(data);\n    return Math.sqrt(data.reduce(function (sq, n) {\n      return sq + Math.pow(n - m, 2);\n    }, 0) / (data.length - 1));\n  };\n\n  if (items.length > 0) {\n    let m = getMean(items);\n    let std = getSD(items);\n    let a = 1 / Math.sqrt(2 * Math.PI);\n    let f = a / std;\n    let p = -1 / 2;\n    let finallist = [];\n    if (isNaN(std)){\n      std = 1;\n    }\n    items.sort(function (a, b) {\n      return a - b\n    });\n    items.map((z, i) => {\n      let c = (z - m) / std;\n      c *= c;\n      p *= c;\n      let result = 1 / (Math.sqrt(2 * Math.PI) * std) * Math.E ** (-0.5 * ((z - m) / std) ** 2);\n      finallist.push({x: z, y: result});\n    });\n    return finallist;\n  }\n  return [{x: 1, y: 11}];\n}\n\nfunction buildValue(hoveredCell) {\n  const {v, userId} = hoveredCell;\n  return {\n    x: v.x,\n    y: v.y,\n    userId: userId\n  };\n}\n\nclass SequenceQuality extends Component {\n  handleDelete = (key) => {\n    /* const dataSource = [...this.state.results_detail];\n     * const dataSource2 = [...this.state.results];\n     * const dataSource3 = [...this.state.feedback]; */\n    //const dataSource3 = [...this.state.grid];\n\n    /* dataSource3.forEach(function(data, index){\n     *   let new_detail = [];\n     *   data.detail.forEach(function(data2, index2){\n     *     if (data2.userId !== key){\n     *       new_detail.push(data2);\n     *     }\n     *   })\n     *   dataSource3[index].detail = new_detail;\n     * })\n\n     * this.setState({results_detail: dataSource.filter(item => item.userId !== key)});\n     * this.setState({results: dataSource2.filter(item => item.userId !== key)});\n     * this.setState({feedback: dataSource3.filter(item => item.userId !== key)}); */\n    //this.setState({ grid: dataSource3.filter(item => item.userId !== key) });\n\n    remove_category_results(key);\n\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results_detail: [],\n      survey: [],\n      results: [],\n      grid: [],\n      cost: 0,\n      visible_kappa: false,\n    }\n  }\n\n  componentDidMount() {\n    get_sequence_results(this);\n    setInterval(() => {get_sequence_results(this);}, 5000);\n  }\n\n  render() {\n    const detail_subcolumns = [\n      {\n        title: 'Sentence',\n        dataIndex: 'sentence',\n        key: 'sentence'\n      },\n      {\n        title: 'duration',\n        dataIndex: 'duration',\n        key: 'duration'\n      },\n    ];\n    const detail_subsubcolumns = [\n      {\n        title: 'entity',\n        dataIndex: 'entity',\n        key: 'entity'\n      },\n      {\n        title: 'label',\n        dataIndex: 'label',\n        key: 'label'\n      }\n    ]\n    const detail_columns = [\n      {\n        title: 'user id',\n        dataIndex: 'userId',\n        key: 'userId'\n      },\n      {\n        title: 'total',\n        dataIndex: 'total_duration',\n        key: 'total_duration',\n      },\n      {\n        title: 'average',\n        dataIndex: 'average_duration',\n        key: 'average_duration'\n      },\n      {\n        title: 'std',\n        dataIndex: 'std_duration',\n        key: 'std_duration'\n      },\n      {\n        title: <>outlier\n          <Tooltip title='Whether the time spent on the task is 2 standard deviations above or below the average time taken.' >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'outlier',\n        key: 'outlier'\n      },\n      /* {\n       *   title: <>abnormal\n       *     <Tooltip title='Whether some repeating pattern, like answering A, B, A, B ..., or A, A, A is detected.' >\n       *       <a><sub>?</sub></a>\n       *     </Tooltip>\n       *   </>,\n       *   dataIndex: 'abnormal',\n       *   key: 'abnormal',\n       * }, */\n      {\n        title: <>intra-user\n          <Tooltip title={(\n            'The number of times the worker responded consistently'\n            + '/ the number of duplicated task units given in each HIT.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeSelf',\n        key: 'agreeSelf'     \n      },\n      {\n        title: <>agree-gold\n          <Tooltip title={(\n            'The number of correctly answered golden task units '\n            + '/ the number of golden task units given in each HIT.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeGold',\n        key: 'agreeGold'     \n      },\n      {\n        title: <>inter-user\n          <Tooltip title={(\n            'The ratio of annotations that agree with the majority.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeMajor',\n        key: 'agreeMajor'     \n      },\n      {\n        title: 'submissions',\n        dataIndex: 'num',\n        key: 'num'\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) => {\n          return (\n              this.state.results_detail.length > 1\n                  ? (\n                      <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.userId)}>\n                        <a href=\"javascript:;\">Delete</a>\n                      </Popconfirm>\n                  ) : null\n          );\n        }\n      }\n\n    ];\n\n    return <div>\n      <p>We calculate the worker's time according to how long they take in selecting all the categories for the entities in the sentence. \n        Outlier is calculated by any worker who takes more than 2 standard deviations longer or shorter than the mean time taken for the task. \n        This metric can be used to help determine if a worker may be a bot; however, we suggest that you pay the bot, \n        block them from completing future HITs for you, and <a href=\"https://support.aws.amazon.com/#/contacts/aws-mechanical-turk\">report</a> it to Amazon,\n        which can also be done through \"Report this HIT\" on the MTurk interface. This is because rejecting the bot may hurt your \n        requester reputation. Be sure to accept and reject your HITs in a timely manner and communicate with the workers if they have any questions. \n        You can monitor your requester reputation on sites such as <a href=\"https://turkopticon.ucsd.edu/\">Turkopticon</a>.\n      </p>\n      <h1>Workers' Timestamps Logs</h1>\n      <Table rowKey=\"userId\" dataSource={this.state.results_detail} columns={detail_columns} size=\"small\"\n             expandedRowRender={record => <Table dataSource={record.detail} columns={detail_subcolumns} \n                                                 expandedRowRender={record2 => <Table dataSource={record2.detail} columns={detail_subsubcolumns}/>}/>}\n      />\n\n      <h1>Agreement between Workers</h1>\n      <SequenceDataStatistics\n        url={serverUrl + '/api/task/sequence/' + this.props.session._id}\n        propertyNameQuestions=\"questionEntities\"\n      />\n      \n      <h1>Gaussian of Timestamps</h1>\n      <XYPlot\n        width={300}\n        height={300}>\n        <VerticalGridLines/>\n        <HorizontalGridLines/>\n        <XAxis/>\n        <YAxis/>\n        <ChartLabel\n          text=\"total time to label sequences\"\n          className=\"alt-x-label\"\n          includeMargin={false}\n          xPercent={0.25}\n          yPercent={1.01}\n        />\n        <ChartLabel\n          text=\"probability density\"\n          className=\"alt-y-label\"\n          includeMargin={false}\n          xPercent={0.06}\n          yPercent={0.06}\n          style={{\n            transform: 'rotate(-90)',\n            textAnchor: 'end'\n          }}\n        />\n        <LineMarkSeries\n          className=\"linemark-series-example-2\"\n          curve={'curveMonotoneX'}\n          data={\n          gaussian(this.state.results_detail)\n          }\n          onValueMouseOver={v => this.setState({hoveredCell: v.x && v.y ? {v: v, userId: DicUser[v.x]} : false})}\n        />\n        {this.state.hoveredCell ? <Hint value={buildValue(this.state.hoveredCell)}>\n          <div style={{\"color\": \"black\"}}>\n            <b><strong> {\"userId: \" + this.state.hoveredCell.userId}</strong></b>\n          </div>\n          </ Hint> : null}\n      </XYPlot>\n    </div>\n  }\n}\n\n\nclass SequenceDataStatistics extends DataStatistics {\n  static columns = [\n    {\n      title: 'Entity Type',\n      dataIndex: 'question',\n      key: 'question'\n    },\n    {\n      title: \"Pairwise F1\",\n      dataIndex: \"Pairwise F1\",\n      key: \"Pairwise F1\",\n      /* render: renderWithColor */\n    }\n  ];\n}\n\n\n  function mapStateToProps(state) {\n    return {\n    session: state.session_sequence,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SequenceQuality);\n\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport {Table} from 'antd';\n\nimport {new_project_data} from \"../../../../actions/crowdAction\";\nimport {loadData} from \"../../../../actions/sessionActions\";\nimport {serverUrl} from \"../../../../configs\";\n\nlet getMean = function (data) {\n  return data.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  }) / data.length;\n};\n\nfunction get_sequence_results(t) {\n  fetch(serverUrl + '/api/get/result/sequence/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n\n        let subsubdetail = [];\n        let annotators = [];\n        let intermediate = {};\n        let bonuses = [];\n        let cost = 0;\n\n        if (json.response.length > 0){\n          json.response.forEach(function(data, index){\n            //each sentence\n            annotators = [];\n            let sentence = data.sentence;\n            data.meta.forEach(function(data1, index1){\n              //each annotator\n              if (!(annotators.includes(data1.submissionID))){\n                annotators.push(data1.submissionID);\n                let duration = data1.time/1000;\n                subsubdetail = [];\n                data.entity[index1].forEach(function(data2, index2){\n                  subsubdetail.push({\"entity\": data2.type, \"label\": data2.value})\n                })\n                if (data1.submissionID in intermediate){\n                  intermediate[data1.submissionID].push({\"sentence\": sentence, \"duration\": duration, \"detail\": subsubdetail});\n                }\n                else{\n                  intermediate[data1.submissionID] = [{\"sentence\": sentence, \"duration\": duration, \"detail\": subsubdetail}];\n                }\n              }\n            })\n          })\n  \n          let all_times = [];\n          let id_times = {};\n  \n          Object.keys(intermediate).forEach(function(key){\n            let times = [];\n            intermediate[key].forEach(function(data, index){\n              times.push(data.duration);\n            })\n            \n            let sum_x = times.reduce((a, b) => a + b, 0);\n            all_times.push(sum_x);\n            id_times[key] = sum_x;\n          })\n  \n          let average_time = getMean(all_times);\n  \n          Object.keys(id_times).forEach(function(key){\n            if (id_times[key] > average_time){\n              bonuses.push({\"submissionID\": key, \"bonus\": \"$\" + Number(Math.round(15 * (id_times[key] - average_time) / 3600+'e2') + 'e-2').toString()})\n            }\n            else{\n              bonuses.push({\"submissionID\": key, \"bonus\": \"$0.00\"})\n            }\n          })\n          cost = 15 * getMean(all_times) / 3600\n        }\n        \n        \n        t.setState({\n          cost: cost,\n          bonus: bonuses\n        });\n      });\n}\n\nclass SequencePayment extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cost: 0\n    }\n  }\n\n  componentDidMount() {\n    get_sequence_results(this);\n  }\n\n  render() {\n    get_sequence_results(this);\n    const bonus_col = [\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID',\n      },\n      {\n        title: 'Suggested Bonus',\n        dataIndex: 'bonus',\n        key: 'bonus',\n      }\n    ]\n    return <div>\n      <h1>Recommend Reward per Assignment </h1>\n      <p> = hourly wage ($15.00) * average time (sec) / (60 sec * 60 min)</p>\n      <div style={{\"text-align\": \"center\", \"font-size\": \"30px\"}}>\n        ${Math.round(this.state.cost * 100) / 100}\n      </div>\n      <br></br>\n      <br></br>\n      <h1>Suggested Bonuses</h1>\n      <Table rowKey=\"submissionID\" dataSource={this.state.bonus} columns={bonus_col} size=\"small\"\n        />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_sequence,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SequencePayment);\n\n","import React, { Component } from 'react'\nimport { Button, Table } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport { saveAs } from 'file-saver';\n\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_sequence_results(t) {\n  fetch(serverUrl + '/api/get/result/sequence/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let workerFeedback = {};\n\n      for (const unit of json.response) {\n        for (const annotation of unit.meta) {\n          if (annotation.feedback !== null) {\n            workerFeedback[annotation.submissionID] = annotation.feedback;\n          }\n        }\n      }\n      let feedbacks = [];\n      for (const [uid, feedback] of Object.entries(workerFeedback)) {\n        feedbacks.push({ userId: uid, feedback: feedback })\n      }\n      t.setState({\n        feedbacks: feedbacks\n      });\n    });\n}\n\nclass SequenceFeedback extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      feedback: []\n    }\n  }\n\n  componentDidMount() {\n    get_sequence_results(this);\n    setInterval(\n      () => get_sequence_results(this),\n      5000\n    );\n  }\n\n  render() {\n\n    const columns = [\n      {\n        title: 'user id',\n        dataIndex: 'userId',\n        key: 'userId'\n      },\n      {\n        title: 'feedback',\n        dataIndex: 'feedback',\n        key: 'feedback'\n      }\n    ];\n\n    return <div>\n      <Button\n        onClick={() => {\n          var blob = new Blob(\n            [JSON.stringify(this.state.feedbacks, null, 2)],\n            { type: 'text/plain;charset=utf-8' },\n          )\n          saveAs(blob, \"sequence_feedback.json\")\n        }}\n      >\n        <DownloadOutlined /> Download Feedback\n      </Button>\n      <br></br>\n      <br></br>\n\n      <h1>Feedback </h1>\n      <Table rowKey=\"userId\"\n        dataSource={this.state.feedbacks}\n        columns={columns}\n        size=\"small\"\n      />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_sequence,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SequenceFeedback);\n\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Tabs } from 'antd';\nimport { HomeOutlined, AreaChartOutlined, MessageOutlined, BarChartOutlined, PayCircleOutlined } from '@ant-design/icons'\n\n\nimport SequenceConfigure from \"./SequenceConfigure.js\";\nimport SequenceResult from \"./SequenceResult.js\";\nimport SequenceQuality from \"./SequenceQuality.js\";\nimport SequencePayment from \"./SequencePayment.js\";\nimport SequenceFeedback from \"./SequenceFeedback.js\";\n\nconst TabPane = Tabs.TabPane;\n\n\nclass Sequence extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"Sequence open\")\n  }\n\n  render() {\n    return <div>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab={<span><HomeOutlined />Configure</span>} key=\"1\">\n          {this.props.session.hasOwnProperty('Label') ?\n            <SequenceConfigure data={this.props.session} />\n            : null}\n        </TabPane>\n        <TabPane tab={<span><AreaChartOutlined />Raw Results</span>} key=\"2\">\n          <SequenceResult data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><MessageOutlined />Feedback</span>} key=\"5\">\n          <SequenceFeedback data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><BarChartOutlined />Quality</span>} key=\"3\">\n          <SequenceQuality data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><PayCircleOutlined />Payment</span>} key=\"4\">\n          <SequencePayment data={this.props.session} />\n        </TabPane>\n      </Tabs>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_sequence,\n  }\n}\n\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sequence);\n","import React from \"react\";\nimport { Button, Drawer, Form, Input, Row, Tabs } from 'antd';\nimport { EditOutlined } from '@ant-design/icons'\nimport { clientUrl } from '../../../../configs'\n\n\nconst TabPane = Tabs.TabPane;\nconst FormItem = Form.Item;\n\nclass QualityTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false, username: '', showlink: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  generate = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.setState({\n          username: values.username,\n          showlink: true\n        })\n      }\n    });\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"left\", width: \"90%\" }} onClick={this.showDrawer}>\n          <EditOutlined />Amazon Mechanical Turk Template\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Template\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"preview\">\n                <TabPane tab={<span>Preview</span>} key=\"preview\">\n                  <div>\n                    <div style={{ \"border-style\": \"solid\" }}>\n                      <div style={{ \"text-align\": \"center\" }}>\n                        <p>Preview</p>\n                      </div>\n                      <p style={{ \"padding-left\": \"2%\" }}>Background: {this.props.thisstate.generic_introduction} </p>\n                      <p style={{ \"padding-left\": \"2%\" }}>Instructions: {this.props.thisstate.generic_instructions} </p>\n                    </div>\n                    <br></br>\n                    <p>Input a username and generate the HIT link</p>\n\n                    <Form onSubmit={this.generate}>\n                      <FormItem {...formItemLayout}>\n                        {getFieldDecorator(`username`)(\n                          <Input.TextArea placeholder={\"Username\"} style={{ width: '60%', marginRight: 8, float: \"left\" }}\n                            autoSize={{ minRows: 1, maxRows: 1 }} />\n                        )}\n                        <Button type=\"primary\" htmlType=\"submit\" style={{ float: \"left\" }}>Generate Link</Button>\n                      </FormItem>\n                    </Form>\n\n                    {this.state.showlink ?\n                      <p>Please go to {clientUrl}/worker_quality?MID={this.state.username}&ID={this.props.thisstate._id} in a separate window to complete the HIT</p>\n                      : null}\n\n                    <br></br>\n                    <p>When you are done, input the confirmation code here: <input type=\"text\" style={{ \"border\": \"1px solid gray\", \"padding-left\": \"5px\" }} /></p>\n                  </div>\n                </TabPane>\n                <TabPane tab={<span>Code</span>} key=\"code\">\n                  <pre>\n                    <code>\n                      &lt;style&gt;<br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>table, th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>border: 1px solid black;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>th, td {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>padding: 15px;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                            &lt;/style&gt;<br></br>\n                      <br></br>\n                            &lt;!-- Unique turker script --&gt; <br></br>\n                            &lt;script src=\"//uniqueturker.myleott.com/lib.js\" type=\"text/javascript\"&gt;&lt;/script&gt;<br></br>\n                            &lt;script&gt;<br></br>\n                            (function() {\"{\"}\n                      <p style={{ \"margin-left\": \"20px\" }}>var ut_id = \"e776c2408d15bc01e2f380e30759f24b\";<br></br>\n                                                                    if (UTWorkerLimitReached(ut_id)) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('mturk_form').style.display = 'none';<br></br>\n                                                                        document.getElementsByTagName('body')[0].innerHTML = \"You have already completed the maximum number of HITs allowed by this requester. Please click 'Return HIT' to avoid any impact on your approval rating.\";</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>{\"}\"}</p>\n                      {\"}\"});<br></br>\n                            &lt;/script&gt;<br></br>\n                      <br></br>\n                            &lt;!-- You must include this Javascript file --&gt; <br></br>\n                            &lt;script src=\"https://assets.crowd.aws/crowd-html-elements.js\"&gt;&lt;/script&gt; <br></br>\n                      <br></br>\n                            &lt;!-- For the full list of available Crowd HTML Elements and their input/output documentation, please refer to https://docs.aws.amazon.com/sagemaker/latest/dg/sms-ui-template-reference.html --&gt; <br></br>\n                      <br></br>\n                            &lt;!-- You must include crowd-form so that your task submits answers to MTurk --&gt; <br></br>\n                            &lt;crowd-form answer-format=\"flatten-objects\"&gt; <br></br>\n                      <br></br>\n                            &lt;div&gt; <br></br>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div style=\"border-style: solid\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;div style=\"text-align: center\"&gt;</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>&lt;p&gt;Preview&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Background: {this.props.thisstate.generic_introduction} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p style=\"padding-left: 2%\"&gt;Instructions: {this.props.thisstate.generic_instructions} &lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;p&gt;Input a username and generate the HIT link&lt;/p&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;input id=\"workerid\" type=\"text\" name=\"username\" placeholder=\"Username\"&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>&lt;button id=\"submit\"&gt;Generate Link&lt;/button&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/div&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;br&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;div&gt;&lt;span id=\"dialcrowd_link\"&gt; - &lt;/span&gt;&lt;/div&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script src=\"https://code.jquery.com/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;script&gt;</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>document.getElementById('submit').onclick = function(event) {\"{\"}</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>event.preventDefault();</p>\n                      <p style={{ \"margin-left\": \"60px\" }}>document.getElementById(\"dialcrowd_link\").textContent = \"Please go to {clientUrl}/worker_quality/?ID=5f0b6fe49878971ce8ab83c9&MID=\" + document.getElementById(\"workerid\").value + \" in a separate window to complete the HIT\"</p>\n                      <p style={{ \"margin-left\": \"40px\" }}>{\"}\"}</p>\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;/script&gt;</p>\n\n                      <p style={{ \"margin-left\": \"20px\" }}>&lt;p&gt;When you are done, input the confirmation code here: &lt;input type=\"text\" name=\"confirmation_code\"&gt;&lt;/p&gt;</p>\n                            &lt;/div&gt; <br></br>\n                            &lt;/crowd-form&gt; <br></br>\n                    </code>\n                  </pre>\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default Form.create()(QualityTemplate);\n","import React from 'react';\nimport { Button, Form, message, Table, Tooltip } from 'antd';\nimport { EyeOutlined, UploadOutlined, QuestionCircleOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport FileReaderInput from 'react-file-reader-input';\nimport { clientUrl } from \"../../../../configs\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport QualityTemplate from \"./QualityTemplate\";\nimport Configure from \"../Configure.js\"\n\nconst FormItem = Form.Item;\n\nlet survey_index = 0;\nlet feedback_index = 0;\n\n\nclass QualityConfigure extends Configure {\n  static instructionSurvey = (\n    \"In this section, you can add, remove and edit questions regarding the \"\n    + \"the conversations presented. The worker will need to answer these questions \"\n    + \"for each conversation you uploaded. For example, you can ask the worker \"\n    + \"to assess the fluency of the conversation.\"\n  );\n\n  static helpTextSurveyQuestion = (\n    \"Add a question that is to be answered for each conversation you uploaded. \"\n    + \"You can, for example, ask the worker to assess the fluency of the conversation.\"\n  );\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.state,\n      quality_data: []\n    };\n    this.saveURL = \"/api/save/task/quality/\";\n    this.taskName = \"quality\";\n  }\n\n  makeProps() {\n    super.makeProps();\n    for (const prop of [\"quality_data\", \"dataGolden\"]) {\n      this.setState({ [prop]: this.props.session[prop] });\n    };\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        values[\"quality_data\"] = this.state.quality_data;\n        values[\"dataGolden\"] = this.state.dataGolden;\n        values[\"consent\"] = this.state.consent;\n        this.submit(values, this.props.session._id);\n      }\n    });\n  };\n\n  handleFileInputChange(_, results, stateProperty) {\n    /* {@String} stateProperty: `this.state[stateProperty]` will store \n     * the uploded and parsed data. */\n    const [e, file] = results[0];\n    let data = [];\n    let lineType;\n    for (const line of e.target.result.replace(/\\r/g, '').split('\\n')) {\n      switch (line) {\n        case 'Context': {\n          lineType = 'context';\n          data.push({ sentid: data.length });\n          break;\n        }\n        case 'Response': {\n          lineType = 'response';\n          break;\n        }\n        case 'Answer': {\n          lineType = 'answer';\n          break;\n        }\n        default: {\n          if (line !== '') {\n            let last = data[data.length - 1];\n            if (lineType === 'response') {\n              last.response = line;\n            } else if (lineType === 'context') {\n              last[lineType] = last[lineType] || [];\n              last[lineType].push(\n                { utterance: line, turn: last[lineType].length + 1 }\n              );\n            } else if (lineType === 'answer') {\n              last[lineType] = last[lineType] || [];\n              last[lineType].push(line);\n            }\n          }\n        }\n      }\n    }\n    if (data.length > 0) {\n      message.success(`${data.length} dialogs are loaded!`);\n    }\n    this.setState({ [stateProperty]: data });\n  }\n\n  render() {\n    const textStyleExtras = [\n      {\n        name: 'Context',\n        fieldName: 'context',\n        explain: \"Set the style of the dialogue context shown to workers.\"\n      },\n      {\n        name: 'Response',\n        fieldName: 'response',\n        explain: \"Set the style of the dialogue response shown to workers.\"\n      },\n      {\n        name: 'Questions',\n        fieldName: 'question',\n        explain: \"Set the style of the text in each question.\"\n      }\n    ];\n    return (\n      <div>\n        <h2 style={{ \"padding-left\": \"1%\" }}>Template for a Quality Task</h2>\n        <p style={{ \"padding-left\": \"1%\" }}>This template is used for the creation of tasks that require the workers to assess the quality of the conversation.\n          You can give the worker one or more conversations, and ask questions about those conversations.</p>\n        <Form onSubmit={this.handleSubmit}>\n          {this._showGeneralConfig()}\n          {this._showConsentConfig()}\n          {this._showDataConfig()}\n          {this._showQualityControlConfig('conversation')}\n          {this._showSurveyConfig()}\n          {this._showFeedbackConfig()}\n          {this._showAppearanceConfig(textStyleExtras)}\n          {this._showButtons()}\n        </Form>\n      </div>\n    );\n  }\n\n  _showDataUpload(golden = false) {\n    const { formItemLayout } = this;\n    let columns_dialog = [\n      {\n        title: 'ID',\n        dataIndex: 'sentid',\n        key: 'sendid',\n        width: 100,\n      },\n      {\n        title: 'Response',\n        dataIndex: 'response',\n        key: 'response',\n      }\n    ];\n    if (golden) {\n      columns_dialog.push({\n        title: 'Answer',\n        dataIndex: 'answer',\n        key: 'answer',\n        render: answers => answers.join('; ')\n      });\n    }\n    const columns_context = [\n      {\n        title: 'Turn',\n        dataIndex: 'turn',\n        key: 'turn',\n      },\n      {\n        title: 'Context Utterance',\n        dataIndex: 'utterance',\n        key: 'utterance'\n      }\n    ];\n    const stateProperty = golden ? 'dataGolden' : 'quality_data';\n    let example;\n    if (!golden) {\n      example = <>\n        <div>Context</div>\n        <div>System: How are you doing today?</div>\n        <div>User: I'm doing great; how about you?</div>\n        <div>Response</div>\n        <div>System: I'm also doing well.</div>\n      </>;\n    } else {\n      example = <>\n        <div>Context</div>\n        <div>System: How are you doing today?</div>\n        <div>User: I'm doing great; how about you?</div>\n        <div>Response</div>\n        <div>System: I'm also doing well.</div>\n        <div>Answer</div>\n        <div>Answer to the 1st question for a dialog.</div>\n        <div>Answer to the 2st question for a dialog.</div>\n      </>;\n    }\n\n    return (<>\n      <FormItem {...formItemLayout}\n        label={(\n          <span>\n            {golden ? \"Upload data with answer\" : \"Upload your data\"} &nbsp;\n            <Tooltip title={\n              <div>\n                <div>Please format your data as below, separated with new lines:</div>\n                {example}\n                {golden ? <div><b>It's is recommended that the number of golden is 10%\n                          of the number of the data to be annotated.</b></div> : null}\n              </div>\n            }>\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        )}\n      >\n        <FileReaderInput\n          as='text'\n          onChange={(e, results) => this.handleFileInputChange(e, results, stateProperty)}\n        >\n          <Button\n            style={{ width: '90%' }}\n          >\n            <UploadOutlined /> Click to Upload\n          </Button>\n        </FileReaderInput>\n        <div>\n          {(this.state.quality_data || []).length > 0 && golden ? <b>\n            It is recommended to have at least {Math.ceil(this.state.quality_data.length / 10)} golden data.</b> : null\n          }\n        </div>\n      </FormItem>\n      {(this.state[stateProperty] || []).length > 0 ? <div>\n        <div title={\"Your Data\"} height={500}>\n          <Table rowKey=\"sentence\" dataSource={this.state[stateProperty]}\n            columns={columns_dialog} pagination={{ hideOnSinglePage: true }} size=\"small\"\n            expandedRowRender={record => <Table dataSource={record.context} pagination={{ hideOnSinglePage: true }} columns={columns_context} />} />\n        </div>\n      </div> : null\n      }\n      <br />\n    </>);\n  }\n\n  _showDataConfig() {\n    const { formItemLayout } = this;\n    return (<>\n      <h3 style={{ \"padding-left\": \"1%\" }}>Data</h3>\n      <p style={{ \"padding-left\": \"1%\" }}>The data you want the workers to annotate.</p>\n      <div style={{\n        border: \"2px solid black\",\n        margin: \"10px\",\n        padding: 24\n      }}>\n        {this._showDataUpload(false)}\n        {this._showAnnotationConfig(\"conversation\", (this.state.quality_data || []).length)}\n      </div>\n\n    </>);\n  }\n\n  _showButtons() {\n    const { getFieldDecorator } = this.props.form;\n    const { formItemLayout, formItemLayoutWithOutLabel } = this;\n    return (<>\n      <div style={{ \"text-align\": \"center\", \"padding-left\": \"60px\", \"padding-top\": \"2%\" }}>\n        <span style={{ \"margin-left\": \"-13%\" }}>Please save before you preview</span>\n      </div>\n      <FormItem {...formItemLayoutWithOutLabel}>\n        <Button\n          type=\"primary\" style={{ width: '71.5%' }} htmlType=\"submit\">Save</Button> {\" \"}\n        <Button\n          onClick={() => window.open(clientUrl + \"/worker_quality?MID=dialcrowd&ID=\" + this.props.session._id)}\n          style={{ width: '18%' }}><EyeOutlined /> Preview\n        </Button>\n\n        <br />\n        {/* {this._showVisibility()} */}\n        <Button type=\"primary\" style={{ width: '90%' }}\n          onClick={() => this._saveAsJSON()}\n        >\n          Save Configuration as JSON\n        </Button>\n\n        <div style={{ \"padding-top\": \"2%\" }}>\n          <QualityTemplate thisstate={this.props.session} />\n        </div>\n      </FormItem>\n\n\n    </>);\n  }\n\n  _showTemplate() { }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_quality,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(QualityConfigure));\n","import React, { Component } from 'react'\nimport { Button, Table } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons'\nimport { connect } from \"react-redux\";\nimport { saveAs } from 'file-saver';\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_quality_results(t) {\n  fetch(serverUrl + '/api/get/result/quality/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      console.log(\"json\", json);\n\n      let detail = [];\n      let subsubdetail = [];\n      let annotators = [];\n      let intermediate = {};\n      let sentence_dic = {};\n      let ids = [];\n\n      json.response.forEach(function (data, index) {\n        //each sentence\n        annotators = [];\n        data.meta.forEach(function (data1, index1) {\n          //each annotator\n          if (!(annotators.includes(data1.submissionID))) {\n            annotators.push(data1.submissionID);\n            subsubdetail = [];\n            Object.keys(data1.responses).forEach(function (key) {\n              subsubdetail.push({ \"question\": key.split(\"|||\")[1], \"response\": data1.responses[key] })\n            })\n            if (data.sentid in intermediate) {\n              intermediate[data.sentid].push({ \"submissionID\": data1.submissionID, \"annotator\": data1.annotator, \"detail\": subsubdetail });\n            }\n            else {\n              sentence_dic[data.sentid] = data1.response\n              ids.push(data.sentid);\n              intermediate[data.sentid] = [{ \"submissionID\": data1.submissionID, \"annotator\": data1.annotator, \"detail\": subsubdetail }];\n            }\n          }\n        })\n      })\n\n      ids.sort();\n\n      ids.forEach(function (id) {\n        detail.push({ \"response\": sentence_dic[id], \"sentid\": id, \"num\": intermediate[id].length, \"detail\": intermediate[id] })\n      })\n\n      t.setState({\n        results: json.response,\n        results_detail: detail\n      });\n    });\n}\n\nclass QualityResult extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results_detail: [],\n      results: []\n    }\n  }\n\n  componentDidMount() {\n    get_quality_results(this);\n  }\n\n  render() {\n    const detail_subcolumns = [\n      {\n        title: 'Annotator',\n        dataIndex: 'annotator',\n        key: 'annotator'\n      },\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID'\n      },\n    ];\n    const detail_subsubcolumns = [\n      {\n        title: 'question',\n        dataIndex: 'question',\n        key: 'question'\n      },\n      {\n        title: 'response',\n        dataIndex: 'response',\n        key: 'response'\n      }\n    ]\n    const detail_columns = [\n      {\n        title: 'Sentence',\n        dataIndex: 'sentid',\n        key: 'sentid'\n      },\n      {\n        title: 'Response',\n        dataIndex: 'response',\n        key: 'response'\n      },\n      {\n        title: 'submissions',\n        dataIndex: 'num',\n        key: 'num'\n      }\n\n    ];\n\n    return <div>\n      <Button\n        onClick={() => {\n          var blob = new Blob(\n            [JSON.stringify(this.state.results_detail, null, 2)],\n            { type: 'text/plain;charset=utf-8' },\n          )\n          saveAs(blob, \"result.json\")\n        }}\n      >\n        <DownloadOutlined /> Download Submissions\n      </Button>\n      <br></br>\n      <br></br>\n      <h1>Results</h1>\n      <Table rowKey=\"userId\" dataSource={this.state.results_detail} pagination={{ hideOnSinglePage: true }} columns={detail_columns} size=\"small\"\n        expandedRowRender={record => <Table dataSource={record.detail} pagination={{ hideOnSinglePage: true }} columns={detail_subcolumns}\n          expandedRowRender={record2 => <Table dataSource={record2.detail} pagination={{ hideOnSinglePage: true }} columns={detail_subsubcolumns} />} />}\n      />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_quality,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QualityResult);\n\n","import {Hint, HorizontalGridLines, LineMarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis, ChartLabel} from 'react-vis';\nimport \"react-vis/dist/style.css\";\nimport React, {Component} from 'react'\nimport {Popconfirm, Table, Tooltip, Icon} from 'antd';\nimport {connect} from \"react-redux\";\n\nimport {new_project_data} from \"../../../../actions/crowdAction\";\nimport {loadData} from \"../../../../actions/sessionActions\";\nimport {serverUrl} from \"../../../../configs\";\nimport DataStatistics from \"../DataStatistics\";\n\nlet DicUser = {};\n\nlet getMean = function (data) {\n  return data.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  }) / data.length;\n};\nlet getSD = function (data) {\n  let m = getMean(data);\n  return Math.sqrt(data.reduce(function (sq, n) {\n    return sq + Math.pow(n - m, 2);\n  }, 0) / (data.length - 1));\n};\n\nfunction get_quality_results(t) {\n  fetch(serverUrl + '/api/get/result/quality/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n\n        let detail = [];\n        let subsubdetail = [];\n        let annotators = [];\n        let intermediate = {};\n        let all_times = [];\n        let likert_responses = {};\n        let radio_responses = {};\n\n        if (json.response.length > 0){\n          let user_abnormal = {};\n          json.response.forEach(function(data, index){\n            //each sentence\n            annotators = [];\n            data.meta.forEach(function(data1, index1){\n              //each annotator\n              if (!(annotators.includes(data1.submissionID))){\n                annotators.push(data1.submissionID);\n                let duration = data1.time/1000;\n                subsubdetail = [];\n                Object.keys(data1.responses).forEach(function(key){\n                  if (key.split(\"|||\")[0].includes(\"Likert\")){\n                    if (!(data1.submissionID in likert_responses)){\n                      likert_responses[data1.submissionID] = [data1.responses[key]]\n                    }\n                    else{\n                      likert_responses[data1.submissionID].push(data1.responses[key])\n                    }\n                    subsubdetail.push({\"question\": key.split(\"|||\")[1], \"response\": data1.responses[key]})\n                  }\n                  else if (key.split(\"|||\")[0].includes(\"Radio\")){\n                    if (!(data1.submissionID in radio_responses)){\n                      radio_responses[data1.submissionID] = [data1.responses[key]]\n                    }\n                    else{\n                      radio_responses[data1.submissionID].push(data1.responses[key])\n                    }\n                    subsubdetail.push({\"question\": key.split(\"|||\")[1], \"response\": data1.responses[key]})\n                  }\n                })\n                const detail = {\n                  response: data1.response,\n                  duration: duration,\n                  detail: subsubdetail,\n                  patternPeriod: data1.patternPeriod,\n                  agreeSelf: data1.agreeSelf,\n                  agreeGold: data1.agreeGold,\n                  agreeMajor: data1.agreeMajor,\n                };\n                if (data1.submissionID in intermediate){\n                  intermediate[data1.submissionID].push(detail);\n                }\n                else{\n                  intermediate[data1.submissionID] = [detail];\n                }                \n              }\n            })\n          })\n\n          // Object.keys(likert_responses).forEach(function(key){\n          //   if (likert_responses[key].length > 1 && likert_responses[key].every( (val, i, arr) => val === arr[0] ) || radio_responses[key].length > 1 && radio_responses[key].every( (val, i, arr) => val === arr[0] )) {\n          //     user_abnormal[key] = true\n          //   }\n          //   else{\n          //     user_abnormal[key] = false\n          //   }\n          // })\n          \n          Object.keys(intermediate).forEach(function(key){\n            let times = [];\n            intermediate[key].forEach(function(data, index){\n              times.push(data.duration);\n            })\n            \n            let sum_x = times.reduce((a, b) => a + b, 0);\n            let mean = getMean(times);\n            let stdev = getSD(times);\n            all_times.push(sum_x);\n\n            // set abnormal to yes if any patternPeriod > 0\n            let abnormal = 'no';\n            let nAgreeUnit = {'agreeSelf': 0, 'agreeGold': 0};\n            let nDisagreeUnit = {'agreeSelf': 0, 'agreeGold': 0};\n            let agreeMajors = intermediate[key].map(a => a.agreeMajor)\n                                               .filter(x => x !== undefined);\n            let agreeMajor = agreeMajors.reduce((a, b) => (a + b), 0) / agreeMajors.length;\n            for (const detail of intermediate[key]) {\n              if (detail.patternPeriod > 0) {\n                abnormal = 'yes';\n              }\n              // update agree test counters\n              for (const agreeTest of Object.keys(nDisagreeUnit)) {\n                if (detail[agreeTest] === false) {\n                  nDisagreeUnit[agreeTest] += 1;\n                } else if (detail[agreeTest] === true) {\n                  nAgreeUnit[agreeTest] += 1;\n                }\n              }\n            }\n\n            let agreeSelfDetail = `${nAgreeUnit.agreeSelf}`\n            + `/ ${nDisagreeUnit.agreeSelf + nAgreeUnit.agreeSelf}`\n            let agreeGoldDetail = `${nAgreeUnit.agreeGold}`\n            + `/ ${nDisagreeUnit.agreeGold + nAgreeUnit.agreeGold}`\n            \n            if (nDisagreeUnit.agreeSelf + nAgreeUnit.agreeSelf === 0){\n              agreeSelfDetail = '--'\n            }\n            if (nDisagreeUnit.agreeGold + nAgreeUnit.agreeGold === 0){\n              agreeGoldDetail = '--'\n            }\n            if (isNaN(agreeMajor)){\n              agreeMajor = '--'\n            }\n            detail.push({\n              \"userId\": key,\n              \"total_duration\": sum_x.toFixed(3),\n              \"average_duration\": mean.toFixed(3),\n              \"std_duration\": stdev.toFixed(3),\n              \"detail\": intermediate[key],\n              \"abnormal\": abnormal,\n              \"agreeSelf\": agreeSelfDetail,\n              \"agreeGold\": agreeGoldDetail,\n              \"agreeMajor\": agreeMajor,\n              \"outlier\": \"no\",\n              \"num\": intermediate[key].length\n            });\n          });\n  \n          let stdev = getSD(all_times);\n          let mean = getMean(all_times);\n          detail.forEach(function(data, index){\n            if (data[\"total_duration\"] > (mean + 2*stdev) || data[\"total_duration\"] < (mean - 2*stdev)){\n              detail[index][\"outlier\"] = \"yes\";\n            }\n            if (user_abnormal[data[\"userId\"]]){\n              detail[index][\"allsame\"] = \"yes\";\n            }\n          });\n        } \n\n        t.setState({\n          results: json.response,\n          results_detail: detail,\n        });\n      });\n}\n\nfunction remove_category_results(userId) {\n  fetch(serverUrl + '/api/delete/result/quality/' + userId)\n      .then(function (response) {\n        return response.json();\n      })\n}\n\n// gaussian graph\nfunction gaussian(arg) {\n  let items = [];\n  arg.map((item, i) => {\n    let avg = item[\"average_duration\"];\n    let total = item[\"total_duration\"];\n    let userId = item[\"userId\"];\n    DicUser[total] = userId;\n    items.push(total);\n  });\n\n  let getMean = function (data) {\n    return data.reduce(function (a, b) {\n      return Number(a) + Number(b);\n    }) / data.length;\n  };\n  let getSD = function (data) {\n    let m = getMean(data);\n    return Math.sqrt(data.reduce(function (sq, n) {\n      return sq + Math.pow(n - m, 2);\n    }, 0) / (data.length - 1));\n  };\n\n  if (items.length > 0) {\n    let m = getMean(items);\n    let std = getSD(items);\n    let a = 1 / Math.sqrt(2 * Math.PI);\n    let f = a / std;\n    let p = -1 / 2;\n    let finallist = [];\n    if (isNaN(std)){\n      std = 1;\n    }\n    items.sort(function (a, b) {\n      return a - b\n    });\n    items.map((z, i) => {\n      let c = (z - m) / std;\n      c *= c;\n      p *= c;\n      let result = 1 / (Math.sqrt(2 * Math.PI) * std) * Math.E ** (-0.5 * ((z - m) / std) ** 2);\n      finallist.push({x: z, y: result});\n    });\n    return finallist;\n  }\n  return [{x: 1, y: 11}];\n}\n\nfunction buildValue(hoveredCell) {\n  const {v, userId} = hoveredCell;\n  return {\n    x: v.x,\n    y: v.y,\n    userId: userId\n  };\n}\n\nclass QualityQuality extends Component {\n  handleDelete = (key) => {\n    const dataSource = [...this.state.results_detail];\n    const dataSource2 = [...this.state.results];\n\n    const dataSource3 = [];\n    if (this.state.feedback && this.state.feedback.length > 0){\n      const dataSource3 = [...this.state.feedback];\n\n      dataSource3.forEach(function(data, index){\n        let new_detail = [];\n        data.detail.forEach(function(data2, index2){\n          if (data2.userId !== key){\n            new_detail.push(data2);\n          }\n        })\n        dataSource3[index].detail = new_detail;\n      })\n\n      this.setState({feedback: dataSource3.filter(item => item.userId !== key)});\n    }\n\n    this.setState({results_detail: dataSource.filter(item => item.userId !== key)});\n    this.setState({results: dataSource2.filter(item => item.userId !== key)});\n    \n    //this.setState({ grid: dataSource3.filter(item => item.userId !== key) });\n\n    remove_category_results(key);\n\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results_detail: [],\n      survey: [],\n      results: [],\n      grid: [],\n      cost: 0,\n      visible_kappa: false,\n    }\n  }\n\n  componentDidMount() {\n    get_quality_results(this);\n    setInterval(() => get_quality_results(this), 2000);\n  }\n\n  render() {\n    /* get_quality_results(this); */\n    const detail_subcolumns = [\n      {\n        title: 'Response',\n        dataIndex: 'response',\n        key: 'response'\n      },\n      {\n        title: 'duration',\n        dataIndex: 'duration',\n        key: 'duration'\n      },\n    ];\n    const detail_subsubcolumns = [\n      {\n        title: 'question',\n        dataIndex: 'question',\n        key: 'question'\n      },\n      {\n        title: 'response',\n        dataIndex: 'response',\n        key: 'response'\n      }\n    ]\n    const detail_columns = [\n      {\n        title: 'user id',\n        dataIndex: 'userId',\n        key: 'userId'\n      },\n      {\n        title: 'total',\n        dataIndex: 'total_duration',\n        key: 'total_duration',\n      },\n      {\n        title: 'average',\n        dataIndex: 'average_duration',\n        key: 'average_duration'\n      },\n      {\n        title: 'std',\n        dataIndex: 'std_duration',\n        key: 'std_duration'\n      },\n      {\n        title: <>outlier\n          <Tooltip title='Whether the time spent on the task is 2 standard deviations above or below the average time taken.' >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'outlier',\n        key: 'outlier'\n      },\n      {\n        title: <>abnormal\n          <Tooltip title='Whether some repeating pattern, like answering A, B, A, B ..., or A, A, A is detected.' >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'abnormal',\n        key: 'abnormal',\n      },\n      {\n        title: <>intra-user\n          <Tooltip title={(\n            'The number of times the worker responded consistently'\n            + '/ the number of duplicated task units given in each HIT.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeSelf',\n        key: 'agreeSelf'     \n      },\n      {\n        title: <>agree-gold\n          <Tooltip title={(\n            'The number of correctly answered golden task units '\n            + '/ the number of golden task units given in each HIT.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeGold',\n        key: 'agreeGold'     \n      },\n      {\n        title: <>inter-user\n          <Tooltip title={(\n            'The ratio of annotations that agree with the majority.')} >\n            <a><sub>?</sub></a>\n          </Tooltip>\n        </>,\n        dataIndex: 'agreeMajor',\n        key: 'agreeMajor'     \n      },\n      {\n        title: 'submissions',\n        dataIndex: 'num',\n        key: 'num'\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) => {\n          return (\n              this.state.results_detail.length > 1\n                  ? (\n                      <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.userId)}>\n                        <a href=\"javascript:;\">Delete</a>\n                      </Popconfirm>\n                  ) : null\n          );\n        }\n      }\n\n    ];\n\n    return <div>\n      <p>We calculate the worker's time according to how long they take in selecting all the categories for the entities in the sentence. \n        Outlier is calculated by any worker who takes more than 2 standard deviations longer or shorter than the mean time taken for the task. \n        This metric can be used to help determine if a worker may be a bot; however, we suggest that you pay the bot, \n        block them from completing future HITs for you, and <a href=\"https://support.aws.amazon.com/#/contacts/aws-mechanical-turk\">report</a> it to Amazon,\n        which can also be done through \"Report this HIT\" on the MTurk interface. This is because rejecting the bot may hurt your \n        requester reputation. Be sure to accept and reject your HITs in a timely manner and communicate with the workers if they have any questions. \n        You can monitor your requester reputation on sites such as <a href=\"https://turkopticon.ucsd.edu/\">Turkopticon</a>.\n      </p>\n      <h1>Workers' Timestamps Logs</h1>\n      <Table rowKey=\"userId\" dataSource={this.state.results_detail}\n             columns={detail_columns}\n             pagination={{hideOnSinglePage: true}}\n             size=\"small\"\n             expandedRowRender={record => <Table dataSource={record.detail}\n                                                 pagination={{hideOnSinglePage: true}}\n                                                 columns={detail_subcolumns} \n                                                 expandedRowRender={record2 => <Table dataSource={record2.detail}\n                                                                                      pagination={{hideOnSinglePage: true}} columns={detail_subsubcolumns}/>}/>}\n      />\n      <br/>\n      <h1>Agreements between Workers</h1>\n      <DataStatistics\n        url={serverUrl + '/api/task/quality/' + this.props.session._id}\n        urlResult={serverUrl + '/api/result/quality/' + this.props.session._id}\n        propertyNameQuestions=\"questionSurveys\"\n      />\n      <br/>\n      <h1>Gaussian of Timestamps</h1>\n      <XYPlot\n        width={300}\n        height={300}>\n        <VerticalGridLines/>\n        <HorizontalGridLines/>\n        <XAxis/>\n        <YAxis/>\n        <ChartLabel\n          text=\"total time to label sequences\"\n          className=\"alt-x-label\"\n          includeMargin={false}\n          xPercent={0.25}\n          yPercent={1.01}\n        />\n        <ChartLabel\n          text=\"probability density\"\n          className=\"alt-y-label\"\n          includeMargin={false}\n          xPercent={0.06}\n          yPercent={0.06}\n          style={{\n            transform: 'rotate(-90)',\n            textAnchor: 'end'\n          }}\n        />\n        <LineMarkSeries\n          className=\"linemark-series-example-2\"\n          curve={'curveMonotoneX'}\n          data={\n          gaussian(this.state.results_detail)\n          }\n          onValueMouseOver={v => this.setState({hoveredCell: v.x && v.y ? {v: v, userId: DicUser[v.x]} : false})}\n        />\n        {this.state.hoveredCell ? <Hint value={buildValue(this.state.hoveredCell)}>\n          <div style={{\"color\": \"black\"}}>\n            <b><strong> {\"userId: \" + this.state.hoveredCell.userId}</strong></b>\n          </div>\n          </ Hint> : null}\n      </XYPlot>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_quality,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QualityQuality);\n\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\";\nimport 'react-datasheet/lib/react-datasheet.css';\nimport {Table} from 'antd';\n\nimport {new_project_data} from \"../../../../actions/crowdAction\";\nimport {loadData} from \"../../../../actions/sessionActions\";\nimport {serverUrl} from \"../../../../configs\";\n\nlet getMean = function (data) {\n  return data.reduce(function (a, b) {\n    return Number(a) + Number(b);\n  }) / data.length;\n};\n\nfunction get_quality_results(t) {\n  fetch(serverUrl + '/api/get/result/quality/' + t.props.session._id)\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n\n        let subsubdetail = [];\n        let annotators = [];\n        let intermediate = {};\n        let bonuses = [];\n        let cost = 0;\n\n        if (json.response.length > 0){\n          json.response.forEach(function(data, index){\n            //each sentence\n            annotators = [];\n            let sentence = data.response;\n            data.meta.forEach(function(data1, index1){\n              //each annotator\n              if (!(annotators.includes(data1.submissionID))){\n                annotators.push(data1.submissionID);\n                let duration = data1.time/1000;\n                subsubdetail = [];\n                Object.keys(data1.responses).forEach(function(key){\n                  subsubdetail.push({\"question\": key.split(\"|||\")[1], \"response\": data1.responses[key]})\n                })\n                if (data1.submissionID in intermediate){\n                  intermediate[data1.submissionID].push({\"response\": sentence, \"duration\": duration, \"detail\": subsubdetail});\n                }\n                else{\n                  intermediate[data1.submissionID] = [{\"response\": sentence, \"duration\": duration, \"detail\": subsubdetail}];\n                }\n              }\n            })\n          })\n  \n          let all_times = [];\n          let id_times = {};\n  \n          Object.keys(intermediate).forEach(function(key){\n            let times = [];\n            intermediate[key].forEach(function(data, index){\n              times.push(data.duration);\n            })\n            \n            let sum_x = times.reduce((a, b) => a + b, 0);\n            all_times.push(sum_x);\n            id_times[key] = sum_x;\n          })\n  \n          let average_time = getMean(all_times);\n  \n          Object.keys(id_times).forEach(function(key){\n            if (id_times[key] > average_time){\n              bonuses.push({\"submissionID\": key, \"bonus\": \"$\" + Number(Math.round(15 * (id_times[key] - average_time) / 3600+'e2') + 'e-2').toString()})\n            }\n            else{\n              bonuses.push({\"submissionID\": key, \"bonus\": \"$0.00\"})\n            }\n          })\n          cost = 15 * getMean(all_times) / 3600\n        }\n        \n        \n        t.setState({\n          cost: cost,\n          bonus: bonuses\n        });\n      });\n}\n\nclass QualityPayment extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cost: 0\n    }\n  }\n\n  componentDidMount() {\n    get_quality_results(this);\n  }\n\n  render() {\n    get_quality_results(this);\n    const bonus_col = [\n      {\n        title: 'Submission ID',\n        dataIndex: 'submissionID',\n        key: 'submissionID',\n      },\n      {\n        title: 'Suggested Bonus',\n        dataIndex: 'bonus',\n        key: 'bonus',\n      }\n    ]\n    return <div>\n      <h1>Recommend Reward per Assignment </h1>\n      <p> = hourly wage ($15.00) * average time (sec) / (60 sec * 60 min)</p>\n      <div style={{\"text-align\": \"center\", \"font-size\": \"30px\"}}>\n        ${Math.round(this.state.cost * 100) / 100}\n      </div>\n      <br></br>\n      <br></br>\n      <h1>Suggested Bonuses</h1>\n      <Table rowKey=\"submissionID\" dataSource={this.state.bonus} pagination={{hideOnSinglePage: true}} columns={bonus_col} size=\"small\"\n        />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_quality,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QualityPayment);\n\n","import React, { Component } from 'react'\nimport { Button, Table } from 'antd';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport { connect } from \"react-redux\";\nimport { saveAs } from 'file-saver';\n\nimport { new_project_data } from \"../../../../actions/crowdAction\";\nimport { loadData } from \"../../../../actions/sessionActions\";\nimport { serverUrl } from \"../../../../configs\";\n\nfunction get_quality_results(t) {\n  fetch(serverUrl + '/api/get/result/quality/' + t.props.session._id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      let feedback = []\n\n      if (json.response.length > 0) {\n        for (const annotation of json.response[0].meta) {\n          feedback = feedback.concat(\n            Object.values(annotation.feedback).map(\n              feedback => ({ userId: annotation.submissionID, feedback: feedback })\n            )\n          );\n        }\n      }\n      t.setState({\n        feedback: feedback\n      });\n    });\n}\n\nclass QualityFeedback extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      feedback: []\n    }\n  }\n\n  componentDidMount() {\n    get_quality_results(this);\n    setInterval(() => get_quality_results(this), 5000);\n  }\n\n  render() {\n    const feedback_detail_col = [\n      {\n        title: 'user id',\n        dataIndex: 'userId',\n        key: 'userId'\n      },\n      {\n        title: 'feedback',\n        dataIndex: 'feedback',\n        key: 'feedback'\n      }\n    ];\n\n    return <div>\n      <Button\n        onClick={() => {\n          var blob = new Blob(\n            [JSON.stringify(this.state.feedback, null, 2)],\n            { type: 'text/plain;charset=utf-8' },\n          )\n          saveAs(blob, \"quality_feedback.json\")\n        }}\n      >\n        <DownloadOutlined /> Download Feedback\n      </Button>\n      <br></br>\n      <br></br>\n      <h1>Feedback </h1>\n      <Table rowKey=\"userId\" dataSource={this.state.feedback} columns={feedback_detail_col} pagination={{ hideOnSinglePage: true }} size=\"small\"\n      />\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_quality,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  new_project_data: new_project_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QualityFeedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Tabs } from 'antd';\nimport { HomeOutlined, AreaChartOutlined, MessageOutlined, BarChartOutlined, PayCircleOutlined } from '@ant-design/icons'\n\nimport QualityConfigure from \"./QualityConfigure.js\";\nimport QualityResult from \"./QualityResult.js\";\nimport QualityQuality from \"./QualityQuality.js\";\nimport QualityPayment from \"./QualityPayment.js\";\nimport QualityFeedback from \"./QualityFeedback.js\";\n\nconst TabPane = Tabs.TabPane;\n\nclass Quality extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"Quality open\")\n  }\n\n  render() {\n    return <div>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab={<span><HomeOutlined />Configure</span>} key=\"1\">\n          <QualityConfigure data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><AreaChartOutlined />Raw Results</span>} key=\"2\">\n          <QualityResult data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><MessageOutlined />Feedback</span>} key=\"5\">\n          <QualityFeedback data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><BarChartOutlined />Quality</span>} key=\"3\">\n          <QualityQuality data={this.props.session} />\n        </TabPane>\n        <TabPane tab={<span><PayCircleOutlined />Payment</span>} key=\"4\">\n          <QualityPayment data={this.props.session} />\n        </TabPane>\n      </Tabs>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_quality,\n  }\n}\n\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quality);\n","import React from \"react\";\nimport { Button, Form, Input, Modal, Tooltip, } from 'antd'\nimport { FolderAddOutlined, QuestionCircleOutlined } from '@ant-design/icons'\nimport { serverUrl } from \"../configs\";\nimport { message } from \"antd/lib/index\";\nimport { new_project_data } from \"../actions/crowdAction\";\nimport { connect } from \"react-redux\";\n\nconst FormItem = Form.Item;\n\n\nfunction Submit(t, data, id) {\n  fetch(serverUrl + '/api/save/task/' + t.props.project + '/' + id, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      if (json.message === \"success\") {\n        message.success(\"Success\");\n        t.props.new_project_data(t.props.project);\n      }\n      else {\n        message.success(\"Fail\");\n      }\n    });\n}\n\n\nclass NewProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filename: \"\",\n      visible: false,\n      utterance: '',\n      intent: null,\n      user_id: \"\",\n      files: [],\n      confirmDirty: false,\n      entities: []\n    }\n  }\n\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n  checkPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n  checkConfirm = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n  cancelModal = () => {\n\n    this.setState({\n      visible: false,\n    });\n  }\n\n  hideModal = () => {\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n        Submit(this, values, \"new\");\n        this.props.form.resetFields();\n      }\n\n    });\n\n\n    this.setState({\n      visible: false,\n    });\n    //console.log(\"File:: \" + this.props.filename);\n\n  }\n\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 14 },\n    };\n\n    return (\n      <div>\n        <Button\n          onClick={this.showModal}>\n          <FolderAddOutlined /> New Project\n          </Button>\n        <Modal\n          title=\"New Project\"\n          visible={this.state.visible}\n          onOk={this.hideModal}\n          onCancel={this.cancelModal}\n          okText=\"New Project\"\n          cancelText=\"Cancel\"\n        >\n          <Form onSubmit={this.handleSubmit}>\n            <FormItem\n              {...formItemLayout}\n              label={(\n                <span>\n                  Project name&nbsp;\n                  <Tooltip title=\"Please input the project. \">\n                    <QuestionCircleOutlined />\n                  </Tooltip>\n                </span>\n              )}\n              hasFeedback\n            >\n              {getFieldDecorator('project', {\n                rules: [{ required: true, message: 'Please input the project!', whitespace: true }],\n              })(\n                <Input />\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label={(\n                <span>\n                  Creator&nbsp;\n                  <Tooltip title=\"You can find your project by your creator name\">\n                    <QuestionCircleOutlined />\n                  </Tooltip>\n                </span>\n              )}\n            >\n              {getFieldDecorator('nickname', {\n                rules: [{ required: true, message: 'Please input your creator name!', whitespace: true }],\n              })(\n                <Input />\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Password\"\n            >\n              {getFieldDecorator('password', {\n                rules: [{\n                  required: true, message: 'Please input your password!',\n                }, {\n                  validator: this.checkConfirm,\n                }],\n              })(\n                <Input type=\"password\" />\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Confirm Password\"\n            >\n              {getFieldDecorator('confirm', {\n                rules: [{\n                  required: true, message: 'Please confirm your password!',\n                }, {\n                  validator: this.checkPassword,\n                }],\n              })(\n                <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n              )}\n            </FormItem>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return {}\n}\n\n\nconst mapDispatchToProps = {\n  new_project_data: new_project_data,\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(NewProject))\n\n\n","import React from \"react\";\nimport { Button, Divider, Input, message, Modal, Popconfirm, Spin, Table } from 'antd';\nimport { connect } from 'react-redux';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { serverUrl } from \"../configs\"\nimport { loadData } from \"../actions/sessionActions\";\nimport { deleteProject } from \"../actions/crowdAction\";\nimport { Form } from \"antd/lib/index\";\n\nclass ProjectList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Status: \"None\",\n      isload: false,\n      loading: false,\n      visible: false,\n      background: \"\",\n      instruction: \"\",\n      password: \"\",\n      createdAt: \"\",\n      sysA: \"\",\n      inputText: \"\"\n    }\n  }\n\n  handleOk = () => {\n    this.visit();\n  }\n\n  async visit() {\n    const url = serverUrl + '/api/' + this.props.url + '/' + this.state.createdAt;\n    const rawResponse = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ password: this.state.password })\n    });\n    const response = await rawResponse.json();\n    // `response` will be null if the password is incorrect.\n    if (response !== null) {\n      response.password = this.state.password;\n      await this.props.dispatchUpdate(this.props.url, response);\n      // hide modal\n      this.setState({ loading: false, visible: false, password: \"\" });\n      // navigate to the config page\n      this.props.history.replace('/' + this.props.url);\n    } else {\n      message.error('Please check the password!');\n    }\n  }\n\n  handleCancel = () => {\n    this.setState({ visible: false });\n  }\n\n  async go(createdAt) {\n    this.setState({ visible: true, createdAt: createdAt });\n  }\n\n\n  onChangePassword = (e) => {\n    this.setState({ password: e.target.value });\n  }\n\n  confirm = (e) => {\n    if (e[\"password\"] === this.state.inputText || true) {\n      message.success('Delete Success');\n      this.props.deleteProject(this.props.url, e[\"_id\"], this.state.inputText);\n      this.setState({ inputText: \"\" });\n    }\n    else {\n      message.error('Please check your password or contact: kyusongleegmail.com');\n      this.setState({ inputText: \"\" });\n    }\n  }\n\n  cancel = (e) => {\n    this.setState({ inputText: \"\" });\n  }\n  onChangeInput = (e) => {\n    this.setState({ inputText: e.target.value });\n  };\n\n  //https://ant.design/components/table/\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={dataIndex !== 'nickname' ? `Search project` : `Search creator`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon={<SearchOutlined />}\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) =>\n      record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n          text\n        ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  render() {\n    const { data } = this.props\n    const { visible, loading } = this.state;\n\n    // preemptively sort the table\n    if (data.length > 0) {\n      data.sort(function (a, b) {\n        return a.name.localeCompare(b.name);\n      })\n    }\n\n    const columns = [\n      {\n        title: 'ID', dataIndex: 'createdAt', key: 'createdAt',\n      },\n      {\n        title: 'Project Name', dataIndex: 'name', key: 'name',\n        sorter: (a, b) => {\n          return a.name.localeCompare(b.name);\n        },\n        ...this.getColumnSearchProps('name'),\n      },\n      {\n        title: 'Creator', dataIndex: 'nickname', key: 'nickname',\n        sorter: (a, b) => {\n          return a.nickname.localeCompare(b.nickname);\n        },\n        ...this.getColumnSearchProps('nickname'),\n      },\n      {\n        title: 'Menu',\n        dataIndex: 'operation',\n        key: 'operation',\n        render: (text, record) => (\n          <span className=\"table-operation\">\n            {\n              <span>\n                <a onClick={() => this.go(record.createdAt)}><EditOutlined /></a>\n                <Divider type=\"vertical\" />\n                <Popconfirm title={\n                  <span>\n                    <h1>Are you abolutely sure?</h1>\n                    <p>\"Please type in the password of this task to confirm.\"</p>\n                    <Input\n                      placeholder=\"Password\"\n                      value={this.state.inputText}\n                      onChange={this.onChangeInput}\n                    />\n                  </span>} onConfirm={() => this.confirm(record)} onCancel={this.cancel} okText=\"Yes\" cancelText=\"No\">\n                  <a><DeleteOutlined /></a>\n                </Popconfirm>\n\n\n              </span>\n            }\n          </span>\n        ),\n      },\n    ];\n\n    return (\n\n      this.state.isload ?\n        <Spin tip=\"Loading...\">\n          <Table\n            columns={columns}\n            rowKey='createdAt'\n            dataSource={data}\n          />\n        </Spin>\n        :\n        <div>\n          <Table\n            columns={columns}\n            rowKey='createdAt'\n            bordered\n            dataSource={data}\n            size={'small'}\n          />\n          <Modal\n            visible={visible}\n            title=\"Enter Password\"\n            onOk={this.handleOk}\n            onCancel={this.handleCancel}\n            footer={[\n              <Button key=\"back\" onClick={this.handleCancel}>Return</Button>,\n              <Button key=\"submit\" type=\"primary\" loading={loading} onClick={this.handleOk}> Submit</Button>,\n            ]}\n          >\n            <Input\n              type=\"password\"\n              placeholder=\"Enter the password\"\n              onChange={this.onChangePassword}\n            />\n          </Modal>\n        </div>\n\n    );\n  }\n}\n\nfunction dispatchUpdate(taskType, data) {\n  /* Params:\n   * {@String} taskType: e.g. interactive.\n   * {@Object} data: Result from POST `[serverUrl]/api/[taskType]/[idTask]`.\n   */\n  return {\n    type: `SESSION_${taskType.toUpperCase()}_UPDATE`,\n    [taskType]: data\n  }\n}\n\n\n\nfunction mapStateToProps(state) {\n  return {\n    session_interactive: state.session_interactive,\n    session_category: state.session_category,\n    session_sequence: state.session_sequence,\n    session_quality: state.session_quality,\n  };\n}\n\n\nconst mapDispatchToProps = {\n  loadData: loadData,\n  deleteProject: deleteProject,\n  dispatchUpdate: dispatchUpdate\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(ProjectList));\n\n","import React from \"react\";\nimport { Button, Drawer, Row, Tabs } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons'\n\nimport ReactMarkdown from 'react-markdown';\n\nconst TabPane = Tabs.TabPane;\n\n// TODO add user goal in the help page\n\nclass HelpInteractive extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n\n  render() {\n    console.log(\"HELP\", this.state)\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"right\", \"marginLeft\": \"10px\" }} onClick={this.showDrawer}>\n          <QuestionCircleOutlined />Help\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Interactive Tests\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"intro\">\n                <TabPane tab={<span>Introduction</span>} key=\"intro\">\n                  <p>Here, you can create an interactive experience for the worker to directly speak to your dialog system.\n                  After the conversation, you can present the worker with a survey about their experience, for example,\n                  on a Likert scale. In addition, you can create an A/B test where the worker speaks with two dialog\n                  systems and can rate on the survey which system they preferred based on your specifications. You can\n                  click the \"New Project\" button to create a new project. If it us successfully created, you will\n                  see your project in the table. Please click the enter (edit) icon to start. We will provide an\n                  example for you to follow.\n                    </p>\n                </TabPane>\n                <TabPane tab={<span>Create</span>} key=\"create\">\n                  <ReactMarkdown source={\n                    \"### 1) Project setting \\n\" +\n                    \"After creating a project, you need to design the experiment in detail, including a generic introduction, specific instructions, and exit polls. The exit polls can be one of three types: Likert scale, open-ended, and A/B testing which are presented in random order to the worker. DialCrowd allows you to either evaluate one system or more than one system in an A/B test by adding the systems during task creation. These will be shown to the worker also in random order. For non-interactive testing, JSON data, such as dialog logs, need to be added.\\n\" +\n                    \"\\n\" +\n                    \"\\n\" +\n                    \"### 2) Connect your spoken dialog systems\\n\" +\n                    \"If you have not already done so, connect your dialog system in the \\\"Add System\\\" tab. After you have done so, input the name of the dialog system into the \\\"Agent\\\" slot during the system add. Create a name for the dialog system that will be shown to the worker in the \\\"Name of Dialog System\\\" slot. Add any specific instructions or questions for the worker in the following slots. \\n\" +\n                    \"### 3) Testing and Deploying\\n\" +\n                    \"After running the backend RESTful APIs, please input the backend API URL and check the connection in DialCrowd. If you have successfully connected to your dialog systems to DialCrowd you can preview the website that DialCrowd has automatically generated.\"} />\n                </TabPane>\n                <br></br>\n                <br></br>\n              </Tabs>\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default HelpInteractive;","import React from \"react\";\nimport NewProject from '../../../NewProject.js';\nimport ProjectList from '../../../ProjectList.js'\nimport {connect} from \"react-redux\";\nimport HelpInteractive from \"../../../help/HelpInteractive\";\n\nclass InteractiveProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {dialogs: []}\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return <div>\n      <h1> Interactive Dialog Tasks </h1>\n      <div style={{display: \"flex\"}}>\n        <NewProject project={\"interactive\"}/>\n        <HelpInteractive/>\n      </div>\n      <ProjectList data={this.props.data} history={this.props.history} url={\"interactive\"}/>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.interactive,\n  };\n}\n\n\nconst mapDispatchToProps = {};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InteractiveProject);\n\n","import React from \"react\";\nimport { Button, Drawer, Row, Tabs } from 'antd'\nimport { QuestionCircleOutlined } from '@ant-design/icons'\nimport ReactMarkdown from 'react-markdown';\n\nconst TabPane = Tabs.TabPane;\n\nclass HelpCategory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"right\", \"marginLeft\": \"10px\" }} onClick={this.showDrawer}>\n          <QuestionCircleOutlined />Help\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Category Classification\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"intro\">\n                <TabPane tab={<span>Introduction</span>} key=\"intro\">\n                  <p>This tab is used for intent classification. During the task, the worker\n                  will be asked to choose an intent for the given dialog. You can\n                  click \"New Project\" to create a project. If it is successfully\n                  created, you will see your project in the table. Then, click\n                  the enter (edit) icon to start. We have provided an example that you\n                      can follow.</p>\n                </TabPane>\n                <TabPane tab={<span>Create</span>} key=\"create\">\n                  <ReactMarkdown source={\n                    \"## 1) Basic Information \\n\" +\n                    \"In order to setup the category classification, requesters fill out the background, generic insturctions, and number of sentences shown to each worker \\n\" +\n                    \"\\n\" +\n                    \"## 2) Upload your data\\n\" +\n                    \"Format of Category Classification\\n\" +\n                    \"The format of category classification is just sentences split by newline (\\\\n)\\n\" +\n                    \"```\\n\" +\n                    \"Has onihime vs been made into an anime\\n\" +\n                    \"What percent of 25 is 23\\n\" +\n                    \"What does C K mean\\n\" +\n                    \"How do you say eggs with bacon and toast in spanish\\n\" +\n                    \"Is cat litter safe for concrete to melt ice\\n\" +\n                    \"U-235 and Pu-239 are both what\\n\" +\n                    \"Did Hannibal Lecter kill Allegra Pazzi\\n\" +\n                    \"```\\n\" +\n                    \"\\n\" +\n                    \"## 3) Add Class\\n\" +\n                    \"You need to define class categories (e.g., inform, request, confirm, etc) and example sentences for workers.  \\n\" +\n                    \"These exmaples will be shown in DialCrowd Workers. \\n\" +\n                    \"\\n\" +\n                    \"## 4) Save your project\\n\" +\n                    \"## 5) Test and deploy\\n\" +\n                    \"You can download the format for uploading your data. You can preview the DialCrowd Worker's website. \\n\"\n                  } />\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default HelpCategory;","import React from \"react\";\nimport NewProject from '../../../NewProject.js';\nimport ProjectList from '../../../ProjectList.js'\nimport {connect} from \"react-redux\";\nimport HelpCategory from \"../../../help/HelpCategory\";\n\nclass CategoryProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {dialogs: []}\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    console.log(this.props.data);\n    console.log(this.props.history);\n    return <div>\n      <h1> Intent Classification Tasks</h1>\n      <div style={{display: \"flex\"}}>\n        <NewProject project={\"category\"}/>\n        <HelpCategory/>\n      </div>\n      <ProjectList data={this.props.data} history={this.props.history} url={\"category\"}/>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.category,\n  };\n}\n\n\nconst mapDispatchToProps = {};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryProject);\n\n","import React from \"react\";\nimport { Button, Drawer, Row, Tabs } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons'\n\nimport ReactMarkdown from 'react-markdown';\n\nconst TabPane = Tabs.TabPane;\n\nclass HelpSequence extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"right\", \"marginLeft\": \"10px\" }} onClick={this.showDrawer}>\n          <QuestionCircleOutlined />Help\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Sequence Labeling\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"intro\">\n                <TabPane tab={<span>Introduction</span>} key=\"intro\">\n                  The goal of this crowdsourcing feature is to categorize different types of\n                  entities. After entering the sequence labeing task, the worker will be asked\n                  to select specific words or a phrase in a sentence. Then, they will choose\n                  the corresponding type of entity that that phrase can be categorized into\n                  using the buttons below the sentence. If the worker is not sure which type of\n                  entity it belongs to, they will choose \"other\". You can click on the \"New Project\"\n                  button to create a new project with a name and password.  Once it is successfully\n                  created, you will see the new project in a table. Then, please click the enter (edit)\n                  icon to start, and we have provided a guide that you can follow.\n                  </TabPane>\n                <TabPane tab={<span>Create</span>} key=\"create\">\n                  <ReactMarkdown source={\n                    \"## 1) Basic information \\n\" +\n                    \"In order to setup a new sequence labeling project, requesters need to fill out the background and generic instructions. \\n\" +\n                    \"## (2) Upload your data\\n\" +\n                    \"The data can be uploaded by uploading a .txt file that contains the sentences for the workers to analyze using sequence labeling. Separate the sentences with a newline in the txt file. \\n\" +\n                    \"## (3) Add Type of Entities\\n\" +\n                    \"By clicking the \\\"Add One More Category\\\" button, the requester can add an entity type that workers will be able to select.\\n\" +\n                    \"The requester will need to specify both the type and an example of the entity during creation.\\n\" +\n                    \"## (4) Save your Project\\n\" +\n                    \"## (5) Test and Deploy\\n\" +\n                    \"You can preview your project with the \\\"Preview\\\" button to see what the workers will.\\n\" +\n                    \"After finishing the sequence labeling, workers will receive a code for the payment.\\n\"} />\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default HelpSequence;","import React from \"react\";\nimport NewProject from '../../../NewProject.js';\nimport ProjectList from '../../../ProjectList.js'\nimport {connect} from \"react-redux\";\nimport HelpSequence from \"../../../help/HelpSequence\";\n\nclass SequenceProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {dialogs: []}\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return <div>\n      <h1> Entity Classification Tasks</h1>\n      <div style={{display: \"flex\"}}>\n        <NewProject project={\"sequence\"}/>\n        <HelpSequence/>\n      </div>\n      <ProjectList data={this.props.data} history={this.props.history} url={\"sequence\"}/>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.sequence\n  };\n}\n\n\nconst mapDispatchToProps = {};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SequenceProject);\n\n","import React from \"react\";\nimport { Button, Drawer, Row, Tabs } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons'\nimport ReactMarkdown from 'react-markdown';\n\nconst TabPane = Tabs.TabPane;\n\nclass HelpQuality extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"right\", \"marginLeft\": \"10px\" }} onClick={this.showDrawer}>\n          <QuestionCircleOutlined />Help\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Category Classification\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"intro\">\n                <TabPane tab={<span>Introduction</span>} key=\"intro\">\n                  <p>This tab is used for intent classification. During the task, the worker\n                  will be asked to choose an intent for the given dialog. You can\n                  click \"New Project\" to create a project. If it is successfully\n                  created, you will see your project in the table. Then, click\n                  the enter (edit) icon to start. We have provided an example that you\n                      can follow.</p>\n                </TabPane>\n                <TabPane tab={<span>Create</span>} key=\"create\">\n                  <ReactMarkdown source={\n                    \"## 1) Basic Information \\n\" +\n                    \"In order to setup the category classification, requesters fill out the background, generic insturctions, and number of sentences shown to each worker \\n\" +\n                    \"\\n\" +\n                    \"## 2) Upload your data\\n\" +\n                    \"Format of Category Classification\\n\" +\n                    \"The format of category classification is just sentences split by newline (\\\\n)\\n\" +\n                    \"```\\n\" +\n                    \"Has onihime vs been made into an anime\\n\" +\n                    \"What percent of 25 is 23\\n\" +\n                    \"What does C K mean\\n\" +\n                    \"How do you say eggs with bacon and toast in spanish\\n\" +\n                    \"Is cat litter safe for concrete to melt ice\\n\" +\n                    \"U-235 and Pu-239 are both what\\n\" +\n                    \"Did Hannibal Lecter kill Allegra Pazzi\\n\" +\n                    \"```\\n\" +\n                    \"\\n\" +\n                    \"## 3) Add Class\\n\" +\n                    \"You need to define class categories (e.g., inform, request, confirm, etc) and example sentences for workers.  \\n\" +\n                    \"These exmaples will be shown in DialCrowd Workers. \\n\" +\n                    \"\\n\" +\n                    \"## 4) Save your project\\n\" +\n                    \"## 5) Test and deploy\\n\" +\n                    \"You can download the format for uploading your data. You can preview the DialCrowd Worker's website. \\n\"\n                  } />\n                  <br></br>\n                  <br></br>\n                </TabPane>\n              </Tabs>\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default HelpQuality;","import React from \"react\";\nimport NewProject from '../../../NewProject.js';\nimport ProjectList from '../../../ProjectList.js'\nimport {connect} from \"react-redux\";\nimport HelpQuality from \"../../../help/HelpQuality\";\n\nclass QualityProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {dialogs: []}\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return <div>\n      <h1> Quality Check Tasks </h1>\n      <div style={{display: \"flex\"}}>\n        <NewProject project={\"quality\"}/>\n        <HelpQuality/>\n      </div>\n      <ProjectList data={this.props.data} history={this.props.history} url={\"quality\"}/>\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.quality,\n  };\n}\n\n\nconst mapDispatchToProps = {};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QualityProject);\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Button, Input, Modal, Popconfirm, Table} from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport {SearchOutlined} from '@ant-design/icons';\nimport {clientUrl} from \"../../configs.js\";\nimport {combine_data} from \"../../actions/crowdAction\";\n\nconst confirm = Modal.confirm;\n\n\nclass Worker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {data: [],inputText:\"\", visible:false, ID:\"\",MID:\"\",type:\"\"}\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n  init = () =>\n  {\n    this.props.combine_data(this.props.interactive,this.props.category,this.props.sequence,this.props.quality);\n  }\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  onChangeInput = (e) => {\n    this.setState({inputText: e.target.value});\n  };\n\n  confirm = (e) =>\n  {\n    // _id is the id of the task, type is the type of the task, MID is the worker username\n    console.log(e);\n    this.setState({\n      MID: this.state.inputText,\n      ID: e[\"_id\"],\n      type: e[\"type\"],\n      visible: true,\n    })\n    if (this.state.inputText !== \"\") {\n      let url = clientUrl + \"/worker_\" + e[\"type\"] + \"/?ID=\" + e[\"_id\"] + \"&MID=\" + this.state.inputText;\n      window.open(url);\n    }\n    else\n    {\n      confirm({\n        title: 'Error!',\n        content: 'Please Input your name',\n        onOk() {\n        },\n        onCancel() {\n        },\n      });\n    }\n  };\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={dataIndex !== 'nickname' ? `Search project`: `Search creator`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon={<SearchOutlined />}\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) =>\n      record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  render() {\n    // preemptively sort the table\n    if (this.props.all.length > 0){\n      this.props.all.sort(function(a, b){\n        return a.project.localeCompare(b.project);\n      })\n    }\n    const columns = [\n      { title: 'Title', dataIndex: 'project', key: 'project', \n        sorter: (a, b) => {\n          return a.name.localeCompare(b.name);\n        },\n        ...this.getColumnSearchProps('name'),\n       },\n      { title: 'Requester', dataIndex: 'user', key: 'user',\n        sorter: (a, b) => {\n          return a.name.localeCompare(b.name);\n        },\n        ...this.getColumnSearchProps('name'), \n      },\n      { title: 'Type', dataIndex: 'type', key: 'type' },\n      { title: 'Action', dataIndex: '', key: 'x', render: (record) =>\n            <Popconfirm title={\n            <span>\n                  <h1>Do you want to work on this HIT?</h1>\n                  <p>\"Please type the user name\"</p>\n                <Input\n                    placeholder=\"User Name\"\n                    value={this.state.inputText}\n                    onChange={this.onChangeInput}\n                />\n              </span>\n            } onConfirm={() => this.confirm(record)} onCancel={this.cancel} okText=\"Yes\" cancelText=\"No\"><a>Accept & Work</a></Popconfirm> },\n    ];\n    return <div>\n      <h1> All Public HITs </h1>\n      <Button onClick={this.init}> Refresh</Button>\n      <br></br>\n      <br></br>\n      <Table\n          rowKey={\"_id\"}\n          columns={columns}\n          bordered\n          expandedRowRender={record => <div><h4>Background</h4><p style={{margin: 0}}>{record.generic_introduction}</p>\n            <p></p><h4>Instructions</h4><p style={{margin: 0}}>{record.generic_instructions}</p></div>}\n          dataSource={this.props.all}\n      />\n\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    interactive: state.interactive,\n    sequence: state.sequence,\n    category: state.category,\n    quality: state.quality,\n    all: state.all\n  }\n}\n\n\nconst mapDispatchToProps = {\n  combine_data:combine_data,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Worker);\n","import React from \"react\";\nimport { Button, Col, Drawer, Form, Input, Row, Select, Tooltip } from 'antd'\nimport { QuestionCircleOutlined } from \"@ant-design/icons\"\n\nconst { Option } = Select;\n\nclass NewSystem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div>\n        <Drawer\n          title=\"Create\"\n          width={720}\n          placement=\"right\"\n          onClose={this.props.onClose}\n          maskClosable={true}\n          visible={this.props.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n          <Form layout=\"vertical\" hideRequiredMark>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"System Name\">\n                  {getFieldDecorator('name', {\n                    initialValue: this.props.data.name,\n                    rules: [{ required: true, message: 'please enter user name' }],\n                  })(<Input placeholder=\"please enter user name\" />)}\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item label=\"Url\">\n                  {getFieldDecorator('url', {\n                    initialValue: this.props.data.url,\n                    rules: [{ required: true, message: 'please enter url' }],\n                  })(\n                    <Input\n                      style={{ width: '100%' }}\n                      addonBefore=\"http://\"\n                      placeholder=\"please enter url\"\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"User\">\n                  {getFieldDecorator('user', {\n                    initialValue: this.props.data.user,\n                    rules: [{ required: true, message: 'Please select an owner' }],\n                  })(\n                    <Input\n                      style={{ width: '100%' }}\n                      placeholder=\"please enter user name\"\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item label={(\n                  <span>\n                    Type&nbsp;\n                    <Tooltip title=\"Only public systems will be able to be selected for Interaction tasks.\">\n                      <QuestionCircleOutlined />\n                    </Tooltip>\n                  </span>\n                )}>\n                  {getFieldDecorator('type', {\n                    initialValue: this.props.data.type,\n                    rules: [{ required: true, message: 'Please choose the type' }],\n                  })(\n                    <Select placeholder=\"Please choose the type\">\n                      <Option value=\"private\">Private</Option>\n                      <Option value=\"public\">Public</Option>\n                    </Select>\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"Organization\">\n                  {getFieldDecorator('org', {\n                    initialValue: this.props.data.org,\n                    rules: [{ required: true, message: 'Please choose the organization' }],\n                  })(\n                    <Input\n                      style={{ width: '100%' }}\n                      placeholder=\"please enter your organization\"\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item label=\"Github page\">\n                  {getFieldDecorator('github', {\n                    initialValue: this.props.data.github,\n                    rules: [{ required: true, message: 'Please enter the github' }],\n                  })(\n                    <Input\n                      style={{ width: '100%' }}\n                      placeholder=\"http://github.com/<organization_id>\"\n                    />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={24}>\n                <Form.Item label=\"Description\">\n                  {getFieldDecorator('desc', {\n                    initialValue: this.props.data.desc,\n                    rules: [\n                      {\n                        required: true,\n                        message: 'please enter url description',\n                      },\n                    ],\n                  })(<Input.TextArea rows={4} placeholder=\"please enter description\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item\n                  label=\"Password\"\n                >\n                  {getFieldDecorator('password', {\n                    rules: [{\n                      required: true, message: 'Please input your password!',\n                    }, {\n                      validator: this.validateToNextPassword,\n                    }],\n                  })(\n                    <Input type=\"password\" />\n                  )}\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  label=\"Confirm Password\"\n                >\n                  {getFieldDecorator('confirm', {\n                    rules: [{\n                      required: true, message: 'Please confirm your password!',\n                    }, {\n                      validator: this.compareToFirstPassword,\n                    }],\n                  })(\n                    <Input type=\"password\" onBlur={this.handleConfirmBlur} />\n                  )}\n                </Form.Item>\n              </Col>\n            </Row>\n\n          </Form>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.props.onClose}\n            >\n              Close\n              </Button>\n            <Button onClick={this.props.submit} type=\"primary\">Submit</Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\nexport default NewSystem;\n","import React from \"react\";\nimport { Button, Drawer, Row, Tabs } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport ReactMarkdown from 'react-markdown';\n\nconst TabPane = Tabs.TabPane;\n\nclass HelpConnectSystem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"right\", \"marginLeft\": \"10px\" }} onClick={this.showDrawer}>\n          <QuestionCircleOutlined />Help\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"How to create and connect a system\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              <Tabs defaultActiveKey=\"intro\">\n                <TabPane tab={<span>Introduction</span>} key=\"intro\">\n                  <p>In order to connect to DialCrowd, a dialog system needs to have an HTTP server waiting for utterances\n                  directed from DialCrowd through specific protocols. We have made connecting to DialCrowd extremely easy\n                  for anyone with basic programming knowledge by providing them with off-the-shelf server wrapper templates\n                  in three mainstream programming languages: Java, Python, and JavaScript. This HTTP API communication\n                  protocol is the same as DialPort. Thus, if your dialog system is already used for evaluation in DialCrowd,\n                    it is also ready for collection in DialPort. </p>\n                  <p>Following the DialCrowd communication protocols, the Java, Python, and JavaScript server wrappers are\n                  implemented with the Spark, Flask, and Node.js frameworks respectively. In this way, we completely hide\n                  the implementation of RESTful APIs from the users. As a result, users only need to implement an HTTP API\n                    server that supports three RESTful APIs: /init, /next, and /end.</p>\n                </TabPane>\n                <TabPane tab={<span>Create</span>} key=\"create\">\n                  <h4>Create A Remote Dialog System</h4>\n                  <p>To start, you can download a <a href={\"https://github.com/DialRC/PortalAPI/tree/master/PortalAPIforPythonFlask\"} target={\"_blank\"}>dialog system skeleton </a>\n                      in the language of your choice. There are three APIs you can edit:</p>\n                  <p>1. Start a new session with your dialog system. If successful, the server will return a JSON containing\n                        the sessionID.</p>\n                  <p>URL</p>\n                  <ReactMarkdown source={\"```\\n/init\\n```\"} />\n                  <p>Method:</p>\n                  <ReactMarkdown source={\"```\\n/POST\\n```\"} />\n                  <p>Body Data</p>\n                  <ReactMarkdown\n                    source={\"```json\\n{\\\"sessionID\\\":\\\"USR_1234\\\", \\\"timeStamp\\\": \\\"yyyy-MM-dd'T'HH-mm-ss.SSS\\\" }\\n```\"} />\n                  <p>Success Response (200)</p>\n                  <ReactMarkdown source={\"{\\n\" +\n                    \"  \\\"sessionID\\\": \\\"USR_1234\\\",\\n\" +\n                    \"  \\\"sys\\\": \\\"This word starts with A\\\",\\n\" +\n                    \"  \\\"version\\\": \\\"1.0-xxx\\\",\\n\" +\n                    \"  \\\"timeStamp\\\": \\\"yyyy-MM-dd'T'HH-mm-ss.SSS\\\",\\n\" +\n                    \"  \\\"terminal\\\": false\\n\" +\n                    \"}\"} />\n\n                  <p>2. For an ongoing session, the portal will use this API to obtain the next system response from your\n                        dialog system.</p>\n                  <p>URL</p>\n                  <ReactMarkdown source={\"```\\n/next\\n```\"} />\n                  <p>Method:</p>\n                  <ReactMarkdown source={\"```\\n/POST\\n```\"} />\n                  <p>Body Data</p>\n                  <ReactMarkdown source={\"```json\\n{\\n\" +\n                    \"    \\\"sessionID\\\": \\\"USR_1234\\\",\\n\" +\n                    \"    \\\"text\\\": \\\"I guess the answer is APPLE\\\", \\n\" +\n                    \"    \\\"asrConf\\\": 0.9,\\n\" +\n                    \"    \\\"timeStamp\\\": \\\"yyyy-MM-dd'T'HH-mm-ss.SSS\\\"\\n\" +\n                    \"}\\n```\"} />\n                  <p>Success Response (200)</p>\n                  <ReactMarkdown source={\"```json\\n{\\n\" +\n                    \"  \\\"sessionID\\\": \\\"USR_1234\\\",\\n\" +\n                    \"  \\\"sys\\\": \\\"This word starts with A\\\",\\n\" +\n                    \"  \\\"version\\\": \\\"1.0-xxx\\\",\\n\" +\n                    \"  \\\"timeStamp\\\": \\\"yyyy-MM-dd'T'HH-mm-ss.SSS\\\",\\n\" +\n                    \"  \\\"terminal\\\": false\\n\" +\n                    \"}\\n```\"} />\n\n                  <p>3. The portal sometimes (very rarely) wants to terminate an ongoing session with your dialog system\n                        (e.g. due to a lost connection, conversation failure, etc.).</p>\n                  <p>URL</p>\n                  <ReactMarkdown source={\"```\\n/end\\n```\"} />\n                  <p>Method:</p>\n                  <ReactMarkdown source={\"```\\n/POST\\n```\"} />\n                  <p>Body Data</p>\n                  <ReactMarkdown source={\"```json\\n{\\n\" +\n                    \"    \\\"sessionID\\\": \\\"USR_1234\\\",\\n\" +\n                    \"    \\\"timeStamp\\\": \\\"yyyy-MM-dd'T'HH-mm-ss.SSS\\\"\\n\" +\n                    \"}\\n```\"} />\n                  <p>Success Response (200)</p>\n                  <ReactMarkdown source={\"```json\\n{\\n\" +\n                    \"  \\\"sessionID\\\": \\\"USR_1234\\\",\\n\" +\n                    \"  \\\"sys\\\": \\\"Goodbye\\\",\\n\" +\n                    \"  \\\"version\\\": \\\"1.0-xxx\\\",\\n\" +\n                    \"  \\\"timeStamp\\\": \\\"yyyy-MM-dd'T'HH-mm-ss.SSS\\\",\\n\" +\n                    \"  \\\"terminal\\\": true\\n\" +\n                    \"}\\n```\"} />\n                  <br></br>\n                  <br></br>\n                </TabPane>\n                <TabPane tab={<span>Connect</span>} key=\"connect\">\n                  <h4>Connect A Remote Dialog System</h4>\n                  <p>The main piece of information you will need from your remote server is the URL\n                  address for DialCrowd to send POST requests to. Fill out this information\n                  when you are creating the dialog system connection on DialCrowd with the Create\n                      button and you will be all set!</p>\n                  <p>To test your system connection, you can click the speech bubble with three dots\n                  in the right side of your system's entry in the table and proceed to chat with it\n                      if the connection has been made.</p>\n                </TabPane>\n              </Tabs>\n            </div>\n\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\nexport default HelpConnectSystem;","import React from \"react\";\nimport { Button, Divider, Drawer, Input, message, Popconfirm, Table } from 'antd';\nimport { connect } from \"react-redux\";\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined, GithubOutlined, EditOutlined, MessageOutlined, FolderAddOutlined } from '@ant-design/icons';\nimport NewSystem from \"./NewSystem\";\nimport HelpConnectSystem from \"./help/HelpConnectSystem\";\nimport Iframe from 'react-iframe'\nimport { Form } from \"antd/lib/index\";\nimport { clientUrl, serverUrl } from '../configs'\nimport { newSystem } from '../actions/systemActions';\n\nfunction Submit(t, data, id) {\n  console.log(serverUrl)\n  fetch(serverUrl + '/api/save/system/' + id, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      if (json.message === \"success\") {\n        message.success(\"Success\");\n        t.props.newSystem();\n      }\n      else {\n        message.success(\"Fail\");\n      }\n    });\n}\n\n\nclass AddSystem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false, configure_visible: false, url: \"\", data: {}, inputText: \"\" }\n  }\n\n  showbotconfigure = () => {\n    this.setState({\n      data: {},\n      configure_visible: true,\n    });\n    this.props.form.resetFields();\n  };\n\n  showDrawer = (url) => {\n    console.log(url);\n\n    let urls = clientUrl + \"/chat?userID=dialCrowd_Testing&subId=DialCrowd_subjectId&option=both&ip=\" + url;\n    this.setState({\n      visible: true,\n      url: urls,\n    });\n\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n  onConfigureClose = () => {\n    this.setState({\n      configure_visible: false,\n    });\n  };\n\n  editConfig = (x) => {\n    console.log(x);\n    this.props.form.resetFields();\n    this.setState({\n      data: x, configure_visible: true,\n    });\n  }\n  onChangeInput = (e) => {\n    this.setState({ inputText: e.target.value });\n  };\n  confirm = (e) => {\n    console.log(e);\n    if (e[\"password\"] === this.state.inputText) {\n      this.setState({ inputText: \"\" });\n      this.props.form.resetFields();\n      this.setState({\n        data: e, configure_visible: true,\n      });\n    }\n    else {\n      message.error('Please check your password or contact: linh@hhu.de');\n      this.setState({ inputText: \"\" });\n    }\n  }\n\n  cancel = (e) => {\n    console.log(e);\n    this.setState({ inputText: \"\" });\n  }\n\n\n  submit = (x) => {\n    x.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n        if (this.state.data._id) {\n          Submit(this, values, this.state.data._id);\n        }\n        else {\n          Submit(this, values, \"new\");\n        }\n        this.onConfigureClose();\n      }\n    });\n\n  }\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={dataIndex !== 'nickname' ? `Search project` : `Search creator`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon={<SearchOutlined />}\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) =>\n      record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n          text\n        ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  render() {\n    // preemptively sort the table\n    if (this.props.system.length > 0) {\n      this.props.system.sort(function (a, b) {\n        return a.name.localeCompare(b.name);\n      })\n    }\n\n    const columns = [{\n      title: 'System Name',\n      dataIndex: 'name',\n      key: 'name',\n      width: '20%',\n      sorter: (a, b) => {\n        return a.name.localeCompare(b.name);\n      },\n      ...this.getColumnSearchProps('name'),\n    }, {\n      title: 'Organization',\n      dataIndex: 'org',\n      key: 'org',\n      width: '20%',\n      sorter: (a, b) => {\n        return a.name.localeCompare(b.name);\n      },\n      ...this.getColumnSearchProps('name'),\n    }, {\n      title: 'Description',\n      dataIndex: 'desc',\n      key: 'desc',\n    }, {\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type',\n      width: '15%'\n\n    },\n    {\n      title: '',\n      key: 'action',\n      width: '15%',\n      render: (text, record) => (\n        <span>\n          <Button shape={\"circle\"} disabled={!record.github}>\n            <a href={record.github} target={\"_blank\"}><GithubOutlined /></a>\n          </Button>\n          <Divider type=\"vertical\" />\n          <Popconfirm title={\n            <span>\n              <h3>Password</h3>\n              <p>\"Please type in the password of this system\"</p>\n              <Input\n                placeholder=\"Password\"\n                value={this.state.inputText}\n                onChange={this.onChangeInput}\n              />\n            </span>} onConfirm={() => this.confirm(record)} onCancel={this.cancel} okText=\"Yes\" cancelText=\"No\">\n            <Button shape={\"circle\"}><EditOutlined /></Button>\n          </Popconfirm>\n          <Divider type=\"vertical\" />\n          <Button shape={\"circle\"} onClick={() => this.showDrawer(record.url)}>\n            <MessageOutlined />\n          </Button>\n        </span>\n      ),\n    }];\n\n    return <div>\n      <h1> Dialog Systems for Testing</h1>\n      <Drawer\n        placement=\"right\"\n        width={720}\n        closable={false}\n        onClose={this.onClose}\n        visible={this.state.visible}\n      >\n        <Iframe style={{ \"margin-right\": \"10px\" }} url={this.state.url}\n          width=\"90%\"\n          height=\"700px\"\n          display=\"initial\"\n          position=\"relative\"\n          allowFullScreen />\n      </Drawer>\n      <div style={{ display: \"flex\" }}>\n        <Button onClick={this.showbotconfigure}>\n          <FolderAddOutlined />Create\n        </Button>\n\n        <HelpConnectSystem />\n      </div>\n      <NewSystem\n        visible={this.state.configure_visible}\n        onClose={this.onConfigureClose}\n        data={this.state.data}\n        submit={this.submit}\n        form={this.props.form}\n      />\n      <Table rowKey={\"_id\"} columns={columns} bordered dataSource={this.props.system} />\n\n    </div>\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    system: state.system,\n  }\n}\n\n\nconst mapDispatchToProps = {\n  newSystem: newSystem,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(AddSystem));\n","export function newSystem() {\n  return {\n    type: 'NEW_SYSTEM',\n  }\n}\n\n","import React from \"react\";\n\nclass People extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {dialogs: []}\n  }\n\n  render() {\n    return <div>\n      <h1> People </h1>\n      <p>Jessica Huynh,\n        Carnegie Mellon University</p>\n      <p>Ting-Rui Chiang,\n        Carnegie Mellon University</p>\n      <p><a href=\"http://www.cs.cmu.edu/~kyusongl/\" target={\"_blank\"} rel=\"noopener noreferrer\">Kyusong Lee</a>,\n        Carnegie Mellon University</p>\n      <p><a href=\"http://www.cs.cmu.edu/~awb/\" target={\"_blank\"} rel=\"noopener noreferrer\">Maxine Eskenazi</a>, Carnegie\n        Mellon University </p>\n      <p><a href=\"https://www.cs.cmu.edu/~jbigham/\" target={\"_blank\"} rel=\"noopener noreferrer\">Jeffrey Bigham</a>,\n        Carnegie Mellon University </p>\n\n      <h1> Publications </h1>\n      <p>Kyusong Lee, Tiancheng Zhao, Alan W Black and Maxine Eskenazi <a href=\"http://aclweb.org/anthology/W18-5028\"\n                                                                          target=\"_blank\" rel=\"noopener noreferrer\">DialCrowd:\n        A toolkit for easy\n        dialog system assessment</a>. Proceedings of the International Conference on Spoken Dialogue Systems Technology\n        (SIGDIAL 2018) [DEMO PAPER], July 2018, Melbourne\n      </p>\n      <p><a\n          href={\"https://scholar.googleusercontent.com/scholar.bib?q=info:G7D4V4hp5xkJ:scholar.google.com/&output=citation&scisig=AAGBfm0AAAAAW2aMLYe-N7TdJioOXsEjSn0HCTsTlM8Y&scisf=4&ct=citation&cd=-1&hl=en\"}\n          target={\"_blank\"} rel=\"noopener noreferrer\">[BibTeX]</a></p>\n      <h1> Questions </h1>\n      <p> Contact at kyusonglee@gmail.com </p>\n\n    </div>\n  }\n}\n\nexport default People\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Button, Checkbox, Collapse, Form, Input, Tag } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\n\nconst FormItem = Form.Item;\n\nlet uuid = 0;\n\nfunction Submit(t, data) {\n  console.log(data);\n  let sent = data[\"sents\"];\n  let clusters = {};\n  sent.forEach((x, i) => {\n    clusters[i] = []\n    sent[i].split(\"\\n\").forEach(y => {\n      clusters[i].push(y);\n    })\n  })\n  let unlabeled = data[\"unlabeled\"].split(\"\\n\");\n\n  fetch('http://128.2.211.58:4455/v1/cluster', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': 'api_key'\n    },\n    body: JSON.stringify({ 'clusters': clusters, 'unlabeled': unlabeled, 'model': 'inferSent' })\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      console.log(json);\n      t.setState({\n        result: json\n      })\n    });\n}\n\n\nclass Cluster extends React.Component {\n  remove = (k) => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    // We need at least one passenger\n    if (keys.length === 1) {\n      return;\n    }\n\n    // can use data-binding to set\n    form.setFieldsValue({\n      keys: keys.filter(key => key !== k),\n    });\n  }\n  add = () => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    const nextKeys = keys.concat(uuid);\n    uuid++;\n    // can use data-binding to set\n    // important! notify form to detect changes\n    form.setFieldsValue({\n      keys: nextKeys,\n    });\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        Submit(this, values);\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { result: {} };\n  }\n\n  componentDidMount() {\n    console.log(\"intractive open\");\n  }\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n    getFieldDecorator('keys', { initialValue: [] });\n    const keys = getFieldValue('keys');\n    const formItems = keys.map((k, index) => {\n      return (\n        <FormItem\n          {...(formItemLayout)}\n          label={'Cluster ' + index.toString()}\n          required={false}\n          key={k}\n        >\n          {getFieldDecorator(`sents[${k}]`, {\n            validateTrigger: ['onChange', 'onBlur'],\n            rules: [{\n              required: true,\n              whitespace: true,\n              message: \"Please input sentences\",\n            }],\n          })(\n            <Input.TextArea placeholder=\"Input sentences\" style={{ width: '80%', marginRight: 8 }}\n              autosize={{ minRows: 4, maxRows: 10 }} />\n          )}\n          {keys.length > 1 ? (\n            <MinusCircleOutlined\n              className=\"dynamic-delete-button\"\n              disabled={keys.length === 1}\n              onClick={() => this.remove(k)}\n            />\n          ) : null}\n        </FormItem>\n      );\n    });\n\n    return (\n      <div>\n        <Form onSubmit={this.handleSubmit}>\n          <FormItem {...formItemLayout}\n            label={\"Unlabeled Data\"}>\n            {getFieldDecorator(`unlabeled`, {\n              validateTrigger: ['onChange', 'onBlur'],\n              rules: [{\n                required: true,\n                whitespace: true,\n                message: \"Please input sentences\",\n              }],\n            })(\n              <Input.TextArea placeholder={\"Input sentences\"} style={{ width: '80%', marginRight: 8 }}\n                autosize={{ minRows: 4, maxRows: 10 }} />\n            )}\n          </FormItem>\n          {formItems}\n          <FormItem {...formItemLayoutWithOutLabel}>\n            <Button type=\"dashed\" onClick={this.add} style={{ width: '80%' }}>\n              <PlusOutlined />Add field\n              </Button>\n          </FormItem>\n          <FormItem {...formItemLayoutWithOutLabel}>\n            <Button type=\"primary\" htmlType=\"submit\">Clustering</Button>\n          </FormItem>\n        </Form>\n        {Object.keys(this.state.result).length > 0 ?\n          <Collapse>\n            {Object.keys(this.state.result).map((x, i) =>\n              <Collapse.Panel header={\"cluster \" + x} key={i}>\n                {this.state.result[x].map(s =>\n                  <div>\n                    <Tag color=\"orange\">{(Math.round(s[\"score\"] * 100) / 100)}</Tag>\n                    <Checkbox>{s[\"sent\"]}</Checkbox>\n                  </div>\n                )}\n              </Collapse.Panel>\n            )}\n          </Collapse> : null}\n      </div>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session_category,\n  }\n}\n\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form.create()(Cluster));\n","import React from \"react\";\nimport { Button, Drawer, Input, Row, Tooltip } from 'antd';\nimport { EditOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport { Form } from \"antd/lib/index\";\n\nconst FormItem = Form.Item;\n\nclass RejectionTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false, final: false, reason: \"\" };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState(\n      {\n        visible: false,\n      }\n    );\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(\"values\", values);\n        this.setState({\n          final: true,\n          reason: values[\"instruction\"]\n        })\n      }\n      else {\n        console.log(err);\n\n      }\n    });\n  }\n\n  return = (e) => {\n    this.setState({\n      final: false,\n      reason: \"\"\n    })\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 18 },\n      },\n    };\n    const reason = this.state.reason;\n    return (\n      <div>\n        <Button type=\"primary\" style={{ float: \"left\" }} onClick={this.showDrawer}>\n          <EditOutlined />Template\n          </Button>\n        <br></br>\n        <br></br>\n        <Drawer\n          title=\"Template\"\n          width={720}\n          placement=\"right\"\n          onClose={this.onClose}\n          maskClosable={true}\n          visible={this.state.visible}\n          style={{\n            height: 'calc(100% - 55px)',\n            overflow: 'auto',\n            paddingBottom: 53,\n          }}\n        >\n\n          <Row gutter={16}>\n            <div>\n              {!this.state.final ? <Form onSubmit={this.handleSubmit}>\n                <FormItem\n                  {...(formItemLayout)}\n                  label={(\n                    <span>\n                      Reason&nbsp;\n                      <Tooltip title=\"Please write the specific instruction stated that the worker did not follow, or the specific evaluation metric stated that was failed\">\n                        <QuestionCircleOutlined />\n                      </Tooltip>\n                    </span>\n                  )}\n                  required={true}\n                >\n                  {getFieldDecorator('instruction', {\n                    validateTrigger: ['onChange', 'onBlur'],\n                  })(\n                    <Input placeholder=\"specific instruction not followed/specific metric not passed\" style={{ width: '90%', marginRight: 8 }} />\n                  )}\n                </FormItem>\n                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n              </Form> :\n                <div>\n                  <span> Dear Worker, <br></br>\n                        Unfortunately, we have decided to reject your HIT for the following reason: <br></br>\n                    {reason} <br></br>\n                        Please reach out to us if you would like to redo the HIT after fixing this error.  Thank you.\n                </span>\n                  <br></br>\n                  <br></br>\n                  <Button type=\"primary\" onClick={this.return}>Return</Button>\n                </div>\n              }\n            </div>\n          </Row>\n          <div\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              width: '100%',\n              borderTop: '1px solid #e8e8e8',\n              padding: '10px 16px',\n              textAlign: 'right',\n              left: 0,\n              background: '#fff',\n              borderRadius: '0 0 4px 4px',\n            }}\n          >\n            <Button\n              style={{\n                marginRight: 8,\n              }}\n              onClick={this.onClose}\n            >\n              Close\n              </Button>\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default (Form.create()(RejectionTemplate));","import React from \"react\";\nimport RejectionTemplate from \"./RejectionTemplate\";\n\nclass Resources extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {dialogs: []}\n  }\n\n  render() {\n    return <div>\n      <h1>Qualification Tests and Worker Requirements</h1>\n      <u1>\n        <li><a href=\"https://blog.mturk.com/tutorial-understanding-requirements-and-qualifications-99a26069fba2\">\n        Worker requirements</a> allow you to filter workers by HIT approval rate, number of HITs approved, \n        etc., which can help you select more experienced workers</li>\n        <li><a href=\"https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMechanicalTurkRequester/Concepts_QualificationsArticle.html#qualification-tests\">\n        Qualification Tests</a> allow you to ask the worker a set of questions and depending on their answers, will assign \n        a certain qualification type to them, which may allow or exclude them from doing the HIT</li>\n        <li>If you have a prior relationship with the worker,\n        you can automatically assign qualification types beforehand as well</li>\n      </u1>\n      <br></br>\n      <h1>Rejecting a HIT vs. Blocking a Worker</h1>\n      <u1>\n        <li>Both actions can negatively impact both your and the worker's reputation, so use them with caution</li>\n        <li><b>Rejecting</b> a HIT means that the worker will not be paid, but they could potentially work on your future HITs</li>\n        <li><b>Blocking</b> a worker excludes them from all of your future HITs</li>\n        <li>Both <a href=\"https://docs.aws.amazon.com/AWSMechTurk/latest/RequesterUI/ReversingRejectedAssignment.html\">rejecting </a>  \n        and <a href=\"https://docs.aws.amazon.com/AWSMechTurk/latest/RequesterUI/UnblockingaWorker.html\">blocking</a> can be reversed</li>\n      </u1>\n      <br></br>\n      <h1>Informing workers why a HIT was rejected</h1>\n      <u1>\n          <li>When you reject a HIT, you should provide <b>sufficient reason why</b></li>\n          <li>We provide a template which can generate sample responses below</li>\n      </u1>\n      <br></br>\n      <RejectionTemplate/>\n      <h1>Addressing Appeals</h1>\n      <u1>\n        <li>When you receive an appeal from a worker about a rejected HIT, it is important to address their email in a <b>timely manner</b></li>\n        <li>If your initial response when rejecting the HIT was not clear, clarify which instruction or evaluation metric was not followed</li>\n        <li>If you have made a mistake, be sure to overturn the rejection once you have confirmed that</li>\n      </u1>\n      <br></br>\n      <h1>Contacting Amazon about bots</h1>\n      <u1>\n        <li>When you discover a bot, you can contact Amazon Mechanical Turk through this <a href=\"https://support.aws.amazon.com/#/contacts/aws-mechanical-turk\">form</a></li>\n        <li>You can also click on \"Report this HIT\" in the Mechanical Turk interface</li>\n      </u1>\n      <br></br>\n      <h1>Turker Forums</h1>\n      <u1>\n        <li><a href=\"https://turkopticon.ucsd.edu\">Turkopticon</a>, which allows \n      you review requesters based on communicativity, generosity, fairness, and promptness</li>\n        <li><a href=\"https://forum.turkerview.com\">TurkerView</a>, where workers \n      can review specific tasks from requesters</li>\n        <li>These forums are important for a requester's reputation, so responding to workers' feedback and engaging with them to improve \n      your HIT should be remembered</li>\n      </u1>\n      <br></br>\n      <h1>Best Practices</h1>\n      <u1>\n        <li>For the first 20 or so minutes after you have released your HIT, monitor your email for any questions from workers</li>\n        <li>Be sure to check your <b>AMT email</b> regularly in order to keep lines of communication open with the workers</li>\n        <li>Incorporate any feedback you receive as needed to ensure workers can complete your HIT to the best they can</li>\n        <li>Approve or reject HITs in a <b>timely manner</b></li>\n        <li>If your HIT involves a long open response question, be sure to state that in the title of your HIT, or in the general instructions on AMT</li>\n      </u1>\n    </div>\n  }\n}\n\n\nexport default Resources\n","import React, { Component } from 'react';\nimport { Tabs } from 'antd';\n\nconst TabPane = Tabs.TabPane;\n\nclass GeneralTaskWalkthrough extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return <div>\n            <div>\n                We provide an in depth walkthrough of a generic task in DialCrowd. This includes\n                the intent and entity classifications as well as the quality annotation. The wording may\n                be slightly different across tasks, but the general functionality remains the same.\n                Screenshots are taken from the quality annotation task.\n            </div>\n            <Tabs defaultActiveKey=\"1\">\n                <TabPane tab=\"General Configuration\" key=\"1\">\n                    <div>\n                        <img src=\"/img/config.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <h4>Load configuration from file</h4>\n                        <div>\n                            After you finish configuring any task, you are able to save its configuration\n                            in JSON format (button located at the bottom of the configure page). To start\n                            a new task with a similar configuration, you can upload that JSON file here and\n                            the task will automatically populate with your original fields. You can then\n                            make small changes wherever needed.\n                    </div>\n                        <br />\n                        <h4>Background</h4>\n                        <div>\n                            In order to give your workers some knowledge about your task, you can fill out\n                            a short background on why you are doing this task, the objective you aim to fulfill,\n                            etc.\n                    </div>\n                        <br />\n                        <h4>General Instructions</h4>\n                        <div>\n                            This is where you will put any instructions you wish to provide to the workers. For example,\n                            the overall steps you wish the worker to complete the task in, what to label, etc.\n                            Instructions should be specific, easy to read, and address any specific actions workers\n                            should do wheh completing your HIT. Stating any evaluation criteria that you are looking for in\n                            each HIT may also prevent the need for HIT rejections and attract workers who will complete\n                            the HIT accordingly. We also provide a link to a guide given by Amazon Mechanical Turk about best\n                            practices in creating clear and concise instructions.\n                    </div>\n                        <br />\n                        <h4>Time (minutes/HIT)</h4>\n                        <div>\n                            Here, you can fill out how many minutes you expect each HIT to take. We suggest that before making\n                            your HIT available to workers, you should test your HIT with your colleagues in order to obtain\n                            a more accurate time estimate.\n                    </div>\n                        <br />\n                        <h4>Payment (USD/HIT)</h4>\n                        <div>\n                            Based on the time you estimate, you will want to put in the payment for the workers per HIT. We suggest\n                            an hourly wage of $15 so that workers can earn a fair wage, and there will be a popup that automatically\n                            calculates this for you if needed. There is by no means a requirement to use our suggested hourly wage,\n                            but we strongly suggest this to be fair to the workers and their time.\n                    </div>\n                    </div>\n                </TabPane>\n                <TabPane tab=\"Consent Form\" key=\"2\">\n                    <div>\n                        <img src=\"/img/consent.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <h4>Consent form</h4>\n                        <div>\n                            You can upload your consent form here as a PDF. The button for \"Preview Consent Form\"\n                            will show you how the consent form will look to the workers.\n                    </div>\n                        <br />\n                        <h4>Consent Checkboxes</h4>\n                        <div>\n                            Here, you can specify checkboxes which the workers must check in order to do your HIT.\n                            For example, \"I am over 18 years old\", or \"I understand my answer will be published\".\n                            You can add as many checkboxes as you need. The \"Preview the Above Consent Questions in Worker View\"\n                            button will show you the consent form PDF as well as the checkboxes after it.\n                    </div>\n                    </div>\n                </TabPane>\n                <TabPane tab=\"Data\" key=\"3\">\n                    <div>\n                        <img src=\"/img/data.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <h4>Upload your data</h4>\n                        <div>\n                            <div>\n                                You should upload your data needed in your task here. For the quality annotation task, we want\n                                the format to be:\n                        </div>\n                            <div>\n                                Context\n                        </div>\n                            <div>\n                                System: system utterance\n                        </div>\n                            <div>\n                                User: user utterance\n                        </div>\n                            <div>\n                                Response\n                        </div>\n                            <div>\n                                System: system utterance\n                        </div>\n                            <br />\n                            <div>\n                                For the intent and sequence classification tasks, we want each of the sentences separated by a new line.\n                                In order to check if your data is been correctly uploaded, you can check the table that pops up. Each\n                                context/response pair will be its own entry in the table with a unique ID, and the dropdown of that entry\n                                will show the context system/user utterances in order.\n                        </div>\n                        </div>\n                        <br />\n                        <h4># of conversations/HIT</h4>\n                        <div>\n                            Here, you can specify the number of conversations the worker needs to annotate in each HIT. For example, if we\n                            type 1, the worker will only need to annotate 1 context/response pair before they can submit. We suggest keeping this\n                            number low if you ask a lot of questions about the pair so the worker does not tire out.\n                    </div>\n                        <br />\n                        <h4># of annotations/conversation</h4>\n                        <div>\n                            This is where you specify how many annotations you want per conversation. If you type 2 here, each\n                            context/response pair will be shown to 2 different workers and annotated twice.\n                    </div>\n                        <br />\n                    We calculate the total number of HITs you should deploy on Amazon Mechanical Turk. This is calculated by\n                    # conversations * # of annotations/conversation / # conversations/HIT.\n                </div>\n                </TabPane>\n                <TabPane tab=\"Tasks Units for Quality Control\" key=\"4\">\n                    <div>\n                        <img src=\"/img/qualitycontrol.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <h4># of duplicated task units</h4>\n                        <div>\n                            To reiterate, duplicated task units are shown again to the worker in the same HIT to test the\n                            worker's consistency.\n                    </div>\n                        <br />\n                        <h4># of golden task units</h4>\n                        <div>\n                            Golden task units are used to compare a worker against an expert on the same question.\n                    </div>\n                        <br />\n                        <h4>Upload data with answer</h4>\n                        <div>\n                            You will upload the data with the golden answers here. The format is the same as the data you uploaded\n                            before, but under the context/response pairs, we add:\n                        <div>\n                                Answer\n                        </div>\n                            <div>\n                                Answer to the 1st question\n                        </div>\n                        </div>\n                    </div>\n                </TabPane>\n                <TabPane tab=\"General Questions\" key=\"5\">\n                    <div>\n                        <img src=\"/img/generalquestion.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <h4>Type of Question</h4>\n                        <div>\n                            We provide three types of possible questions: likert scale, open ended, and multiple choice.\n                            The likert scale has 3, 5, or 7 stars. The open ended task provides one text field for the workers\n                            to input text. Lastly, the multiple choice option gives you the chance to add options for the choices.\n                            The \"Preview this Question in Worker View\" will show the question as it is shown to the workers.\n                    </div>\n                        <br />\n                        <h4>Example and Explanation</h4>\n                        <div>\n                            You can provide example responses to the questions you ask above. This is to help the worker understand\n                            what is an acceptable answer, and thus ensures better quality of your collected data. The box on the left\n                            is for the example, and the box on the right is the reasoning why the example is a good response.\n                    </div>\n                        <br />\n                        <h4>Counterexample and Explanation</h4>\n                        <div>\n                            Same as above, you can provide counterexamples and reasoning so that workers won't provide answers similar to\n                            those that you do not want.\n                    </div>\n                        <br />\n                    The \"Preview the Examples and Counterexamples in Worker View\" button will show a table with the questions, and\n                    their respective examples and counterexamples. We suggest at least adding one example and counterexample for each\n                    question.\n                </div>\n                </TabPane>\n                <TabPane tab=\"Feedback\" key=\"6\">\n                    <div>\n                        <img src=\"/img/feedback.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <div>\n                            When you turn on this option, the workers will be provided with a feedback text box below the HIT.\n                    </div>\n                    </div>\n                </TabPane>\n                <TabPane tab=\"Options\" key=\"7\">\n                    <div>\n                        <img src=\"/img/options.png\" style={{ border: \"1px solid black\" }} />\n                        <br />\n                        <br />\n                        <div>\n                            There are four options here:\n                        <br />\n                            <div>\n                                <b>Save</b> saves your HIT.\n                        </div>\n                            <br />\n                            <div>\n                                <b>Preview</b> allows you to see the HIT from the worker's perspective. Remember to save before\n                            you preview.\n                        </div>\n                            <br />\n                            <div>\n                                <b>Save Configuration as JSON</b> downloads the JSON configuration of the task so you are able to\n                            upload that configuration in a new task if you want to slightly edit it.\n                        </div>\n                            <br />\n                            <div>\n                                <b>Amazon Mechanical Turk Template</b> provides code for the interface on Mechanical Turk. You can copy\n                            and paste this code so that workers can generate a link to DialCrowd then submit the confirmation code\n                            we provide after they completed the HIT so they are linked to their Mechanical Turk ID. It is also important\n                            to mention that DialCrowd is <b>NOT</b> exclusively made to connect to Mechanical Turk; you are free to use\n                            other crowdsourcing platforms.\n                        </div>\n                        </div>\n                    </div>\n                </TabPane>\n            </Tabs></div>\n    }\n\n}\n\nexport default GeneralTaskWalkthrough;","import React, {Component} from 'react';\n\nclass AddSystemWalkthrough extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return <div>\n            <div>\n                <img src=\"/img/addsystem.png\" style={{border:\"1px solid black\"}}/>\n                <br/>\n                <br/>\n                <div>\n                    After filling out the other fields for adding a dialogue system, there are 2 fields that require additional explanation. \n                    First, the Url field is the url that your dialogue system is hosted on. Secondly, there are two types: public and private. \n                    The public option will make the dialogue system available to be added into an interactive task, while private will not make \n                    the system available.\n                </div>\n            </div>\n            <br/>\n            <div>\n                <img src=\"/img/system.png\" style={{border:\"1px solid black\"}}/>\n                <br/>\n                <br/>\n                <div>\n                    The three options here, in order, are: the link to the GitHub, the option to edit any of the fields you just filled out, \n                    and the option to speak with your bot to ensure that it has been connected properly.\n                </div>\n            </div>\n        </div>\n\n    }\n}\n\nexport default AddSystemWalkthrough;","import React, {Component} from 'react';\n\nclass InteractiveWalkthrough extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return <div>\n        <div>\n            <div>\n                The interactive task follows the general configuration, consent form, general questions (with an additional A/B test option), \n                and feedback. The only addition is the system add below.\n            </div>\n            <br/>\n            <img src=\"/img/interactive.png\" style={{border:\"1px solid black\"}}/>\n            <br/>\n            <br/>\n            <div>\n                <h4>System Display Name</h4>\n                <div>\n                    This is the name that will be displayed to the workers for the dialogue system. You <b>DO NOT</b> want to write \n                    \"baseline\" or anything similar, but instead write something like \"System A\".\n                </div>\n                <br/>\n                <h4>System</h4>\n                <div>\n                    You will select your system here. Be sure that you have set the system to public in the \"Add System\" tab or else it will \n                    not show up here.\n                </div>\n                <br/>\n                <h4>Specific Instructions</h4>\n                <div>\n                    If you have any specific instructions for this dialogue system compared with any other dialogue systems you may add below, \n                    you can write the instructions here. You can also reiterate the instructions you put in the instructions tab above if they have \n                    not changed.\n                </div>\n            </div>\n        </div>\n        </div>\n    }\n}\n\nexport default InteractiveWalkthrough;","import React, {Component} from 'react';\n\nclass QualityWalkthrough extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        return <div>\n            <div>\n                <img src=\"/img/quality.png\" style={{border:\"1px solid black\"}}/>\n                <br/>\n                <br/>\n                <div>\n                    In addition to calculating the total, average, and standard deviation of time for the questions, \n                    we provide additional bot detection:\n                    <br/>\n                    <br/>\n                    <div>\n                        <b>Outlier</b> is set to yes if the total time spent on the task is two standard deviations more or \n                        less than the average time taken by all workers.\n                    </div>\n                    <br/>\n                    <div>\n                        <b>Abnormal</b> is set to yes if the worker chose answers in some sort of pattern (A, A, A, or A, B, A, B, etc.).\n                    </div>\n                    <br/>\n                    <div>\n                        <b>Intra-User</b> is set if you used duplicate task units. It is the number of consistent answers over the \n                        total number of questions.\n                    </div>\n                    <br/>\n                    <div>\n                        <b>Agree-gold</b> is set if you used golden task units. It is the number of answers consistent with the expert over \n                        the total number of questions.\n                    </div>\n                    <br/>\n                    <div>\n                        <b>Inter-user</b> is the ratio of annotations that agreed with the majority of the other workers.\n                    </div>\n                </div>\n                <br/>\n                <div>\n                    Below this is a table with pairwise Cohen's Kappa for each question, and overall, color-coded by the amount of agreement. \n                    We also provide a Gaussian graph of timestamps so that you may also check visually the time it took workers to complete the tasks. \n                    If any of the options above (outlier, abnormal) are set to yes, or if the ratios of intra-user and agree-gold are not equivalent to 1, \n                    or if inter-user agreement is very low, then you may want to check the quality of the workers data.\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default QualityWalkthrough;","import React from \"react\";\nimport { Tabs } from 'antd';\nimport { ContainerOutlined, PlusCircleOutlined, MessageOutlined, SafetyOutlined } from '@ant-design/icons'\n\nimport GeneralTaskWalkthrough from \"./GeneralTaskWalkthrough.js\"\nimport AddSystemWalkthrough from \"./AddSystemWalkthrough.js\"\nimport InteractiveWalkthrough from \"./InteractiveWalkthrough.js\"\nimport QualityWalkthrough from \"./QualityWalkthrough.js\"\n\nconst TabPane = Tabs.TabPane;\n\nclass Walkthrough extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <div>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab={<span><ContainerOutlined />Generic Task</span>} key=\"1\">\n          <GeneralTaskWalkthrough />\n        </TabPane>\n        <TabPane tab={<span><PlusCircleOutlined />Add System</span>} key=\"2\">\n          <AddSystemWalkthrough />\n        </TabPane>\n        <TabPane tab={<span><MessageOutlined />Interactive Task</span>} key=\"5\">\n          <InteractiveWalkthrough />\n        </TabPane>\n        <TabPane tab={<span><SafetyOutlined />Quality Tab</span>} key=\"3\">\n          <QualityWalkthrough />\n        </TabPane>\n      </Tabs>\n    </div>\n  }\n}\n\n\nexport default Walkthrough  ","import React from 'react'\nimport { Link, Route, Switch } from 'react-router-dom'\nimport { Layout as AntLayout, } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined, ContactsOutlined, GitlabOutlined } from '@ant-design/icons'\n\nimport Home from './Home.js'\nimport Sider from './Sider.js'\nimport Interactive from './requesters/template/interactive/Interactive.js'\nimport Category from './requesters/template/category/Category.js'\nimport Sequence from './requesters/template/sequence/Sequence.js'\nimport Quality from './requesters/template/quality/Quality.js'\nimport InteractiveProject from './requesters/template/interactive/InteractiveProject.js'\nimport CategoryProject from \"./requesters/template/category/CategoryProject\"\nimport SequenceProject from \"./requesters/template/sequence/SequenceProject.js\"\nimport QualityProject from \"./requesters/template/quality/QualityProject.js\"\nimport Worker from \"./workers/Worker\"\nimport AddSystem from \"./AddSystem.js\"\nimport People from './People.js';\nimport Cluster from './ml/cluster.js'\nimport Resources from './Resources.js'\nimport Walkthrough from './Walkthrough.js'\n\nclass Layout extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  }\n\n  render() {\n    return <AntLayout style={{ height: '100%', minHeight: '100vh' }}>\n      <Sider collapsed={this.state.collapsed}\n      />\n      <AntLayout>\n        <AntLayout.Header style={{ background: '#f0f2f5', padding: 0 }}>\n          {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n            className: 'trigger',\n            style: { marginLeft: \"10px\", fontSize: 20 },\n            onClick: this.toggle,\n          })}\n          <div key=\"logo\" style={{ float: \"right\", \"marginRight\": \"20px\" }}>\n            <Link to=\"/\">\n              <img width={\"100px\"} src={\"http://dialrc.org/img/site-logo.png\"} alt=\"logo\" />\n            </Link>\n          </div>\n        </AntLayout.Header>\n        <AntLayout.Content style={{\n          flex: 1,\n          flexDirection: 'column',\n          overflow: 'scroll',\n          background: '#fff',\n          padding: 24\n        }}>\n          <Switch>\n            <Route path=\"/interactive\" component={Interactive} />\n            <Route path=\"/category\" component={Category} />\n            <Route path=\"/sequence\" component={Sequence} />\n            <Route path=\"/quality\" component={Quality} />\n            <Route path=\"/interactive_project\" component={InteractiveProject} />\n            <Route path=\"/category_project\" component={CategoryProject} />\n            <Route path=\"/sequence_project\" component={SequenceProject} />\n            <Route path=\"/quality_project\" component={QualityProject} />\n            <Route path=\"/system\" component={AddSystem} />\n            <Route path=\"/people\" component={People} />\n            <Route path=\"/crowd\" component={Worker} />\n            <Route path=\"/cluster\" component={Cluster} />\n            <Route path=\"/resources\" component={Resources} />\n            <Route path=\"/walkthrough\" component={Walkthrough} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </AntLayout.Content>\n\n        <AntLayout.Footer style={{}}>\n          <strong>Copyright © 2020, DialRC, Carnegie Mellon University</strong>\n          <div style={{ float: \"right\", \"marginRight\": \"10px\" }}>\n            <a href={\"mailto:dialog-evaluation@hhu.de\"}>\n              <ContactsOutlined\n                style={{ fontSize: 20 }} /></a>\n            <a href={\"https://gitlab.cs.uni-duesseldorf.de/dsml/project/dialogevaluation/dialcrowdv2\"}>\n              <GitlabOutlined\n                style={{ fontSize: 20 }} /></a>\n          </div>\n        </AntLayout.Footer>\n      </AntLayout>\n    </AntLayout>\n  }\n}\n\nexport default Layout","import React from \"react\";\nimport {Button, Collapse, Form, Modal, Radio, Select, Table, Input, Rate} from 'antd';\nimport queryString from 'query-string';\nimport {ConsentForm, AnonymityNotice} from \"./AgreeModal\";\nimport {serverUrl} from \"../../configs\";\nimport {lists2Questions, addKeys} from \"../requesters/template/QuestionList.js\"\nimport QuestionList, {Markdown} from \"./QuestionList.js\"\nimport {_renderExamples} from \"./WorkerInteractive.js\"\nimport {showFeedbackQuestion} from \"./QuestionList.js\";\nimport {getStyle} from \"./style.js\";\n\n\nconst confirm = Modal.confirm;\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nconst Panel = Collapse.Panel;\n\n\nfunction getQuestion(t, id) {\n\n  fetch(serverUrl + '/api/worker/category/' + id)\n      .then(function (response) {\n        return response.json();\n      })\n    .then(function (json) {\n      if (json.err !== undefined) {\n        Modal.error({content: json.err});\n        return;\n      }\n\n        let num = json.category_data.length / json.numofsent;\n        let div = json.category_data.length % json.numofsent;\n        if (div > 0)\n        {\n          num = parseInt(num)+1;\n        }\n\n        let questionFeedbacks;\n        // Workaround: json.questionFeedbacks should not be undefined.\n        if (json.questionFeedbacks === undefined) {\n          questionFeedbacks = lists2Questions(\n            json.feedback || [],\n            json.feedbackType || [],\n            json.feedbackradio || []\n          );\n        } else {\n          questionFeedbacks = addKeys(json.questionFeedbacks);\n        }        \n\n        let questionCategories;\n        if (json.questionCategories === undefined) {\n          const labels = json.classLabel || [];\n          questionCategories = lists2Questions(\n            labels,\n            labels.map((_) => ('')),\n            labels.map((_) => ([])),\n            json.classExample,\n            json.classCounterexample\n          );\n        } else {\n          questionCategories = addKeys(json.questionCategories);\n        }\n\n        t.setState({\n          data: json.category_data,\n          flag: json.flag,\n          numofhit: num,\n          numofsent: json.numofsent,\n          exampleTable: json.exampleTable,\n          generic_introduction: json.generic_introduction,\n          generic_instructions: json.generic_instructions,\n          time: json.time,\n          payment: json.payment,\n          consent: json.consent[1],\n          requirements: addKeys(json.requirements || []),\n          questionFeedbacks: questionFeedbacks,\n          questionCategories: questionCategories,\n          hasFeedbackQuestion: json.hasFeedbackQuestion,\n          style: json.style,\n          enableMarkdown: json.enableMarkdown\n        });\n    });\n}\n\nfunction SubmitFromUser(t, v) {\n  fetch(serverUrl + '/api/save/worker/category/' + t.state.userID, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      \"data\": t.state.data,\n      \"userID\": t.state.userID,\n      \"submissiontime\": Date.now(),\n      \"Result\": v,\n      \"mid\": t.state.MID,\n      \"ID\": t.state.ID,\n      \"feedback\": t.feedback\n    })\n  })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n\n        if (t.state.current > t.state.numofhit) {\n          confirm({\n            title: 'Thank you for submission. ',\n            content: 'Your survey code: ' + t.state.userID + '. Please copy this code in AMT and refresh the page to restart.',\n            onOk() {\n            },\n            onCancel() {\n            },\n          });\n        }\n\n      });\n}\n\nfunction sendAnswerDetail(v) {\n  fetch(serverUrl + '/api/save/worker/detail/category/' + v[\"userId\"], {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\"data\": v})\n  })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (json) {\n      });\n}\n\n\nclass WorkerCategory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prev: 0,\n      isSubmit: false,\n      isdone: false,\n      userID: \"\",\n      visible: false,\n      current: 1,\n      data: {},\n      order: [],\n      flag: false,\n      isShow: false,\n      MID: \"\",\n      ID: \"\",\n      sent: [],\n      consent: \"\",\n      activeKey: [\"1\", \"2\"],\n      questionCategories: [],\n      questionFeedbacks: [],\n    };\n    this.annotations = [];\n  }\n\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n    let mid = \"MID\";\n    let time = Date.now();\n    let ID = \"5aa2cc392972997dd9099c48\";\n    if (params.MID) {\n      mid = params.MID;\n    }\n    if (params.ID) {\n      ID = params.ID;\n    }\n    this.setState({userID: time});\n    this.setState({prev: time});\n    this.setState({MID: mid});\n    this.setState({ID: ID});\n    getQuestion(this, ID);\n  }\n\n  retrieveQuestion = (values) => {\n    for (const [key, value] of Object.entries(values)) {\n      if (key === \"FeedbackOpen|||1\") {\n        this.feedback = value;\n      } else {\n        // index of data this annotation is for.\n        let index = (this.state.current - 1) * this.state.numofsent + parseInt(key);\n        let sentid = this.state.data[index].sentid;\n        this.annotations.push({\n          sentid: sentid,\n          ...value\n        });\n      }\n    }\n    if (this.state.current == this.state.numofhit) {\n      SubmitFromUser(this, this.annotations);\n    }\n    //getQuestion(this, this.state.ID);\n    this.props.form.resetFields();\n  }\n\n  stateSet = (label, sent, i) => {\n    let dic = {};\n    let time = Date.now();\n\n    dic[\"timestamp\"] = time;\n    dic[\"label\"] = label;\n    dic[\"sentence\"] = sent;\n    dic[\"userId\"] = this.state.userID;\n    dic[\"taskId\"] = this.state.ID;\n    dic[\"sentId\"] = i\n    \n    if (this.state.sent.some(e => e.sentId == i)){\n      for (var a = 0; a < this.state.sent.length; a++){\n        if (this.state.sent[a][\"sentId\"] == i){\n          this.state.sent[a][\"duration\"] = this.state.sent[a][\"duration\"] + time - this.state.prev;\n        }\n      }\n    }\n    else{\n      dic[\"duration\"] = dic[\"timestamp\"] - this.state.prev;\n      if (!sent){\n        this.setState({sent: [dic]});\n      }\n      else{\n        this.state.sent.push(dic);\n      }\n      \n    }\n\n    this.setState({prev: time});\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    for (var b = 0; b < this.state.sent.length; b++){\n      sendAnswerDetail(this.state.sent[b]);\n    }\n    this.setState({prev: Date.now()});\n\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.retrieveQuestion(values);\n        console.log('Received values of form: ', values);\n        if (this.state.current < this.state.numofhit) {\n          this.setState({current: this.state.current + 1});\n        }\n        else {\n          confirm({\n            title: 'Thank you for submission',\n            content: 'Your survey code: ' + this.state.userID,\n            onOk() {\n            },\n            onCancel() {\n            },\n          });\n        }\n      }\n      else {\n        console.log(\"err\");\n        if (this.state.current > this.state.numofhit) {\n          confirm({\n            title: 'Thank you for submission',\n            content: 'Your survey code: ' + this.state.userID,\n            onOk() {\n            },\n            onCancel() {\n            },\n          });\n        }\n      }\n    });\n  }\n\n  changeTab = activeKey => {\n    if (activeKey.includes(\"3\")){\n      this.setState({\n        prev: Date.now(),\n        activeKey: activeKey\n      })\n    }\n  }\n\n  openInstructions = () => {\n    if (!(this.state.activeKey.includes(\"2\"))){\n      let x = this.state.activeKey;\n      x.push(\"2\");\n      this.setState({\n        activeKey: x\n      })\n    }\n  }\n\n  render() {\n    const columns_example = [{\n      title: 'Category',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'An Example',\n      dataIndex: 'examples',\n      key: 'examples',\n      render: _renderExamples\n    }, {\n      title: 'A Counterexample',\n      dataIndex: 'counterexamples',\n      key: 'counterexamples',\n      render: _renderExamples      \n    }];\n\n    const {getFieldDecorator} = this.props.form;\n    const {current} = this.state;\n    const formItemLayout2 = {\n      labelCol: {span: 14},\n      wrapperCol: {span: 10},\n      colon: false\n    };\n    const formItemLayout = {\n      wrapperCol: {span: 10},\n      colon: false\n  }\n    const radioStyle = {\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n\n    const likerts = ['1 Strongly Disagree', '', '', '', '5 Strongly Agree'];\n    const labels = this.state.questionCategories.map((c) => (c.title));\n    let styles = getStyle(this.state.style);\n\n    return <div style={styles.global}>\n      <div id=\"surveyContainer\"></div>\n      <Form onSubmit={this.handleSubmit} style={{\"marginBottom\": 0.6}}>\n        <Collapse defaultActiveKey={['1', '2']} onChange={this.changeTab} activeKey={this.state.activeKey}>\n          <Panel header=\"Background\" key=\"1\"  style={styles.tabTitle}>\n            <p style={styles.background}>\n              <Markdown enableMarkdown={this.state.enableMarkdown}>\n                {this.state.generic_introduction}\n              </Markdown>\n            </p>\n            <ConsentForm consent={this.state.consent} checkboxes={this.state.requirements}/>\n            {/* <AnonymityNotice /> */}\n          </Panel>\n          <Panel header=\"Instructions\" key=\"2\" style={styles.tabTitle}>\n            <div style={styles.instruction}>\n              {this.state.enableMarkdown ?\n               <Markdown enableMarkdown={this.state.enableMarkdown}>\n                 {this.state.generic_instructions}\n               </Markdown> : <b>{this.state.generic_instructions}</b>\n              }\n            </div>\n            <p style={{\n              ...styles.instruction,\n              marginTop: '0px',\n              marginBottom: '0px',\n              fontSize: styles.instruction.fontSize - 2\n            }}>\n              We expect this HIT will take <b>{this.state.timepay} minute(s)</b> and we will pay <b>${this.state.payment}</b>.\n            </p>\n            <div style={{...styles.example, \"fontSize\": styles.example.fontSize + 4}}>\n              <p><b>Examples</b></p>\n            </div>\n            <Table rowKey=\"sentid\"\n                   dataSource={this.state.questionEntities}\n                   columns={columns_example} size=\"small\"\n                   style={{...styles.example,\n                           marginTop: `${styles.global.spacing}px`,\n                           marginBottom: `${styles.global.spacing}px`}} />\n          </Panel>\n          <Panel header=\"Category classification\" key=\"3\" style={styles.tabTitle}>\n            {!this.state.activeKey.includes(\"2\") ?\n             <div style={{\"textAlign\": \"center\"}}>\n               <Button type=\"default\" onClick={this.openInstructions}>Example Responses</Button>\n             </div> : null}            \n            <div title=\"category classification\">\n              <div style={{\"textAlign\": \"center\"}}>\n                <p style={{\"textAlign\": \"center\", \"fontSize\": 18,\n                           marginTop: styles.global.spacing,\n                           marginBottom: 0}}><b>\"Select a category for the given text\"</b></p>\n              </div>\n              <div style={{\"textAlign\": \"center\", marginBottom: `${styles.global.spacing + 22.5}px`}}>\n                <Button type=\"default\" onClick={this.openInstructions}>Example Responses</Button>\n              </div>\n              {this.state.flag ?\n               this.state.data.slice((this.state.current-1)*this.state.numofsent, (this.state.current)*this.state.numofsent).map((item, i) => (\n                 <div style={{\"backgroundColor\": \"#f7f7f7\", marginBottom: `${styles.global.spacing}px`}}>\n                   <FormItem className={'two-rows-label'}\n                             {...formItemLayout2}\n                             label={<div style={{\n                               display: \"inline-block\",\n                               \"float\": \"left\",\n                               \"whiteSpace\": \"normal\",\n                               \"marginRight\": \"12px\",\n                               \"text-align\": \"left\",\n                               \"lineHeight\": \"15px\"\n                             }}>{item.sentence.split(\"|||\").map(\n                                 x => <p style={styles.utterance}>{x}</p>)\n                             }</div>}\n                             hasFeedback\n                   >\n                     {getFieldDecorator(`[${i}][\"answer\"]`, {\n                       rules: [\n                         {required: true, message: 'Please select a category'},\n                       ],\n                     })(\n                       <Select onSelect={(e) => this.stateSet(e, item.sentence, i)}\n                               placeholder=\"Please select a category\">\n                         {labels.map((label, j) => (\n                           <Option value={label}>{label}</Option>\n                         ))}\n                       </Select>\n                     )}\n                   </FormItem>\n                   <FormItem\n                     {...formItemLayout2}\n                     label={<div style={{\n                       color: \"forestgreen\",\n                       \"display\": \"inline-flex\"\n                     }}>{\"Confidence of your answer? (1: Not confident, 3: Very confident) \"}</div>}\n                   >\n                     {getFieldDecorator(`[${i}][\"confidence\"]`, {\n                       rules: [\n                         {required: true, message: 'Please select a confidence level'},\n                       ],\n                     }\n                 )(\n                   <RadioGroup>\n                     <Radio value=\"1\">1</Radio>\n                     <Radio value=\"2\">2</Radio>\n                     <Radio value=\"3\">3</Radio>\n                   </RadioGroup>\n                 )}\n                   </FormItem>\n                 </div>\n                 ))\n              :\n               null\n              }\n\n            </div>\n          </Panel>\n        </Collapse>\n\n        <div style={{\"backgroundColor\": \"#C1E7F8\"}}>\n          <FormItem style={{\"textAlign\": \"center\"}}\n                    wrapperCol={{span: 12, offset: 6}}\n          >\n            <p style={{\"textAlign\": \"center\", \"fontSize\": 15, \"color\": \"black\"}}>You will get the code after you complete the HIT.</p>\n            {current < this.state.numofhit ?\n                       <Button type=\"primary\" htmlType=\"submit\">Next {current}/{this.state.numofhit}</Button>\n            :\n                       <div title={\"Feedback\"} style={{margin: \"10px\", padding:24 }} >\n                         {showFeedbackQuestion(this.state.hasFeedbackQuestion, getFieldDecorator)}\n                         <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                       </div>\n            }\n          </FormItem>\n        </div>\n      </Form>\n    </div>\n  }\n}\n\nexport default Form.create()(WorkerCategory)\n","import React, {Component} from 'react'\nimport {findDOMNode} from 'react-dom'\nimport {connect} from 'react-redux'\nimport getColor from './getColor'\nimport {Input} from 'antd'\n\nconst styles = {\n  text: {},\n  highlightText: {\n    color: 'transparent',\n    pointerEvents: 'none',\n    padding: '5px 8px',\n  },\n  zeroPos: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  },\n  input: {\n    background: 'none',\n    border: 'none',\n    width: '100%',\n  }\n};\n\n\nclass TextEditor extends Component {\n  selectionAnchorNode: Node;\n  inputNode: HTMLInputElement;\n\n  componentDidMount() {\n    console.log(this.props);\n    document.addEventListener('selectionchange', () => {\n      const selection = window.getSelection()\n\n      if (\n          selection.anchorNode\n          && selection.anchorNode === this.selectionAnchorNode\n      ) {\n        /*\n        setSelection(\n            example.id,\n            this.inputNode.selectionStart,\n            this.inputNode.selectionEnd,\n        )*/\n      }\n    }, false)\n  }\n\n  handleTextChange(event: Object) {\n    const {\n      example,\n      edit,\n    } = this.props\n    const {\n      text: oldText,\n      entities: oldEntities,\n    } = example\n    const text = event.target.value\n    const entities = []\n\n    //update the entity boudaries\n\n    oldEntities.forEach(oldEntity => {\n      const oldSelection = oldText.substr(\n          oldEntity.start,\n          oldEntity.end - oldEntity.start,\n      )\n\n      function findClosestStart(lastMatch: ?number) {\n        if (!lastMatch) {\n          const index = text.indexOf(oldSelection)\n          if (index === -1) {\n            return index\n          }\n          else {\n            return findClosestStart(index)\n          }\n        }\n        else {\n          const from = lastMatch + oldSelection.length\n          const index = text.indexOf(oldSelection, from)\n          if (index === -1) {\n            return lastMatch\n          }\n          const prevDiff = Math.abs(oldEntity.start - lastMatch)\n          const nextDiff = Math.abs(oldEntity.start - index)\n          if (prevDiff < nextDiff) {\n            return lastMatch\n          }\n          else {\n            return findClosestStart(index)\n          }\n        }\n      }\n      const start = findClosestStart()\n      if (start === -1) {\n        return\n      }\n\n      entities.push({\n        ...oldEntity,\n        start: start,\n        end: start + oldSelection.length,\n      })\n    })\n\n    edit(example.id, {\n      text,\n      entities,\n    })\n  }\n\n  renderEntityHighlight(text: string, entity: Object, key: number) {\n    const { entityNames } = this.props\n    const start = text.substr(0, entity.start)\n    const value = text.substr(entity.start, entity.end - entity.start)\n    const end = text.substr(entity.end)\n    console.log(value);\n    return (\n        <div key={key} style={{...styles.zeroPos, ...styles.highlightText, \"marginLeft\":\"5px\" }}>\n          <span>{start}</span>\n          <span style={{...getColor(entityNames.indexOf(entity.entity))}}>\n          {value}\n        </span>\n          <span>{end}</span>\n        </div>\n    )\n  }\n\n  render() {\n    const { example, style } = this.props\n    const { text, entities = [] } = example\n\n    return (\n        <div style={{ width: '100%', ...style }}>\n          <div\n              style={{position: 'relative'}}\n              ref={node => this.selectionAnchorNode = node}\n          >\n            <Input.TextArea\n                ref={node => this.inputNode = node && findDOMNode(node)}\n                value={text}\n                placeholder='text'\n            />\n            {entities.map((entity, index) => {\n              return this.renderEntityHighlight(text, entity, index)\n            })}\n          </div>\n        </div>\n    )\n  }\n}\n\n\nexport default connect(null, null)(TextEditor)","import React from \"react\";\nimport { Button, Collapse, Form, Modal, Table, Radio } from 'antd';\nimport { DeleteOutlined, SelectOutlined } from '@ant-design/icons'\nimport TextEditor from './TextEditor'\nimport { ConsentForm } from \"./AgreeModal\";\nimport { serverUrl } from \"../../configs\";\nimport queryString from 'query-string';\nimport { Markdown } from \"./QuestionList.js\"\nimport { lists2Questions, addKeys } from \"../requesters/template/QuestionList.js\"\nimport { _renderExamples } from \"./WorkerInteractive.js\"\nimport { showFeedbackQuestion } from \"./QuestionList.js\";\nimport { getStyle } from \"./style.js\";\n\n\nconst confirm = Modal.confirm;\nconst FormItem = Form.Item;\nconst RadioGroup = Radio.Group;\n\nfunction getQuestion(t, id) {\n  fetch(serverUrl + '/api/worker/sequence/' + id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      if (json.err !== undefined) {\n        Modal.error({ content: json.err });\n        return;\n      }\n\n      let questionEntities;\n      if (json.questionEntities === undefined) {\n        const labels = json.Label || [];\n        questionEntities = lists2Questions(\n          labels,\n          labels.map((_) => ('')),\n          labels.map((_) => ([])),\n          json.Example,\n          json.Counterexample\n        );\n      } else {\n        questionEntities = addKeys(json.questionEntities);\n      }\n\n      t.setState({\n        data: json.sequence_data,\n        flag: json.flag,\n        Label: json.Label,\n        numofhit: json.sequence_data.length,\n        exampleTable: json.exampleTable,\n        generic_introduction: json.generic_introduction,\n        generic_instructions: json.generic_instructions,\n        timepay: json.time,\n        payment: json.payment,\n        consent: json.consent,\n        requirements: addKeys(json.requirements || []),\n        questionEntities: questionEntities,\n        hasFeedbackQuestion: json.hasFeedbackQuestion,\n        style: json.style,\n        enableMarkdown: json.enableMarkdown\n      });\n    });\n}\n\nfunction SubmitFromUser(t, v) {\n  fetch(serverUrl + '/api/save/worker/sequence/' + t.state.userID, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      \"data\": t.state.data,\n      \"userID\": t.state.userID,\n      \"submissiontime\": Date.now(),\n      \"Result\": v,\n      \"mid\": t.state.MID,\n      \"ID\": t.state.ID\n    })\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      console.log(json);\n      if (t.state.current > t.state.numofhit) {\n        confirm({\n          title: 'Thank you for submission. ',\n          content: 'Your survey code: ' + t.state.userID + '. Please copy this code in AMT and refresh the page to restart.',\n          onOk() {\n          },\n          onCancel() {\n          },\n        });\n      }\n\n    });\n\n}\n\n\nclass WorkerSequence extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: 1, Label: [], MID: \"\",\n      Orgs: [], Names: [], Locs: [],\n      selectorStart: 0, selectorEnd: 0,\n      oStart: 0, oEnd: 0,\n      nStart: 0, nENd: 0,\n      lStart: 0, lEnd: 0,\n      selecttext: \"\", orgset: \"\", org: \"\", lastOrg: \"\", name: \"\", lastName: \"\", loc: \"\", losLoc: \"\",\n      output: {\n        sentence: \"\",\n        entities: []\n      },\n      feedback: [],\n      feedbackType: [],\n      time: \"\",\n      isFirst: true,\n      timepay: \"\",\n      payment: \"\",\n      consent: \"\",\n      feedbackradio: [],\n      activeKey: [\"1\", \"2\"],\n      questionEntities: [],\n      questionFeedbacks: [],\n    };\n    this.annotations = [];\n    this.SelectText = this.SelectText.bind(this);\n    this.clickEntity = this.clickEntity.bind(this);\n  }\n\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n    let mid = \"MID\";\n    let ID = \"5ab1e12c9c1ad4743a3fb1d6\";\n    if (params.MID) {\n      mid = params.MID;\n    }\n    if (params.ID) {\n      ID = params.ID;\n    }\n    var time = Date.now();\n    this.setState({ userID: time });\n    this.setState({ MID: mid });\n    this.setState({ ID: ID });\n    getQuestion(this, ID);\n  }\n\n  async retrieveQuestion(values) {\n    await SubmitFromUser(this, values);\n    // await getQuestion(this, this.state.ID);\n    this.setState({ Orgs: [] });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let feedback = [];\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        feedback = values;\n      }\n    })\n\n    var values = {\n      \"sentence\": this.state.data[this.state.current - 1].sentence,\n      \"entity\": this.state.Orgs,\n      \"sentid\": this.state.data[this.state.current - 1].sentid,\n      \"time\": Date.now() - this.state.time,\n      \"feedback\": feedback\n    };\n    this.annotations.push(values);\n    if (this.state.current < this.state.numofhit) {\n      this.setState({ current: this.state.current + 1, Orgs: [] });\n    } else {\n      SubmitFromUser(this, this.annotations);\n      confirm({\n        title: 'Thank you for submission',\n        content: 'Your survey code: ' + this.state.userID,\n        onOk() {\n        },\n        onCancel() {\n        },\n      });\n    }\n    this.setState({ isFirst: false });\n  }\n\n  // changeTab = activeKey => {\n  //   if (activeKey.includes(\"3\")){\n  //     this.setState({\n  //       time: Date.now()\n  //     })\n  //   }\n  // }\n\n  openInstructions = () => {\n    if (!(this.state.activeKey.includes(\"2\"))) {\n      let x = this.state.activeKey;\n      x.push(\"2\");\n      this.setState({\n        activeKey: x\n      })\n    }\n  }\n\n  changeTab = activeKey => {\n    this.setState({\n      activeKey: activeKey\n    })\n  }\n\n  SelectText() {\n    try {\n      var selecter = window.getSelection();\n      if (selecter !== null && selecter !== \"\") {\n        console.log(selecter);\n        this.setState({ selecttext: selecter.toString() });\n        console.log(\"demo: \" + selecter);\n      }\n\n    } catch (err) {\n      var selecter = document.getSelection();\n      var s = selecter.text;\n      if (s !== null) {\n        console.log(s)\n      }\n    }\n    if (window.getSelection) {\n      var userSelection = window.getSelection();\n    }\n    this.setState({ selectorStart: selecter.anchorOffset })\n    this.setState({ selectorEnd: selecter.focusOffset })\n    if (this.state.isFirst || isNaN(parseInt(this.state.time))) {\n      this.setState({ time: Date.now() })\n    }\n  }\n\n  clickEntity(arg) {\n    var instance = {\n      \"type\": arg,\n      \"value\": this.state.selecttext.toString().trim(),\n      \"start\": this.state.selectorStart,\n      \"end\": this.state.selectorEnd,\n      \"Id\": Date.now(),\n      \"text\": this.state.data[this.state.current - 1].sentence,\n      entities: [{ \"start\": this.state.selectorStart, \"end\": this.state.selectorEnd, \"entity\": arg }]\n    };\n    var temp = this.state.Orgs;\n    temp.push(instance);\n    this.setState({ Orgs: temp });\n    console.log(this.state.Orgs);\n\n    if (document.all) {\n      var tr = document.selection.createRange();\n      tr.execCommand(\"ForeColor\", false, \"#FF0000\");\n    } else {\n      var tr = window.getSelection().getRangeAt(0);\n      var span = document.createElement(\"span\");\n      span.style.cssText = \"color:orange\";\n    }\n\n    //tr.surroundContents(span);\n  }\n\n  deleteEnt = (Id) => {\n    var index = -1;\n    for (var i = 0; i < this.state.Orgs.length; i++) {\n      if (this.state.Orgs[i].Id === Id)\n        index = i;\n    }\n    console.log(index);\n    console.log(Id);\n    var temp = this.state.Orgs;\n    if (index > -1) {\n      temp.splice(index, 1);\n    }\n    this.setState({ Orgs: temp });\n  };\n\n  render() {\n    const { current } = this.state;\n\n    const columns_example = [{\n      title: 'Type',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'Example',\n      dataIndex: 'examples',\n      key: 'examples',\n      render: _renderExamples\n    }, {\n      title: 'Counterexample',\n      dataIndex: 'counterexamples',\n      key: 'counterexamples',\n      render: _renderExamples\n    }];\n\n\n    const labels = this.state.questionEntities.map((q) => (q.title));\n    const columns = [\n      {\n        title: 'Entity Type',\n        dataIndex: 'type',\n        key: 'type',\n      },\n      {\n        title: 'Entity Value',\n        dataIndex: 'value',\n        key: 'value',\n      },\n      {\n        title: 'Example',\n        dataIndex: 'example',\n        key: 'example',\n        render: (_, example) => (\n          <TextEditor\n            example={example}\n            entityNames={labels}\n          />\n        ),\n      },\n      {\n        title: 'Edit',\n        dataIndex: 'operation',\n        key: 'operation',\n        render: (text, record) => (\n          <span className=\"table-operation\">\n            {\n              <span>\n                <a onClick={() => this.deleteEnt(record.Id)}><DeleteOutlined /> delete</a>\n              </span>\n            }\n          </span>\n        ),\n      },\n    ];\n\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout2 = {\n      labelCol: { span: 10 },\n      wrapperCol: { span: 7 },\n      colon: false\n    };\n    const formItemLayout = {\n      wrapperCol: { span: 10 },\n      colon: false\n    }\n    const radioStyle = {\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n\n    const likerts = ['1 Strongly Disagree', '', '', '', '5 Strongly Agree']\n    const styles = getStyle(this.state.style, {\n      utterance: {\n        fontSize: 20,\n        textAlign: 'center'\n      }\n    });\n\n    return <div style={styles.global}>\n      <Form onSubmit={this.handleSubmit} style={{ \"marginBottom\": 0.6 }}>\n        <Collapse defaultActiveKey={['1', '2']} activeKey={this.state.activeKey} onChange={this.changeTab}>\n          <Collapse.Panel header=\"Background\" key=\"1\" style={styles.tabTitle}>\n            <p style={styles.background}>\n              <Markdown enableMarkdown={this.state.enableMarkdown}>\n                {this.state.generic_introduction}\n              </Markdown>\n            </p>\n            <ConsentForm consent={this.state.consent} checkboxes={this.state.requirements} />\n            {/* <AnonymityNotice />               */}\n          </Collapse.Panel>\n          <Collapse.Panel header=\"Instructions\" key=\"2\" style={styles.tabTitle}>\n            <div style={styles.instruction}>\n              {this.state.enableMarkdown ?\n                <Markdown enableMarkdown={this.state.enableMarkdown}>\n                  {this.state.generic_instructions}\n                </Markdown> : <b>{this.state.generic_instructions}</b>\n              }\n            </div>\n            <p style={{\n              ...styles.instruction,\n              marginTop: '0px',\n              marginBottom: '0px',\n              fontSize: styles.instruction.fontSize - 2\n            }}>\n              We expect this HIT will take <b>{this.state.timepay} minute(s)</b> and we will pay <b>${this.state.payment}</b>.\n            </p>\n            <div style={{ ...styles.example, \"fontSize\": styles.example.fontSize + 4 }}>\n              <p><b>Examples</b></p>\n            </div>\n            <Table rowKey=\"sentid\"\n              dataSource={this.state.questionEntities}\n              columns={columns_example} size=\"small\"\n              style={{ ...styles.example, marginBottom: `${styles.global.spacing}px` }} />\n          </Collapse.Panel>\n          <Collapse.Panel header=\"Sequence Labeling\" key=\"3\" style={styles.tabTitle}>\n\n            <div\n              title=\"Select the text that you recognize as an entity and choose the corresponding type of entity using the buttons below.\">\n              <div>\n                <p style={{ \"textAlign\": \"center\", \"fontSize\": 18, marginTop: `${styles.global.spacing}px` }}>\n                  <b>Select the text that you recognize as an entity and choose the corresponding type of entity using the\n                    buttons below.</b></p>\n              </div>\n              <div style={{\n                \"textAlign\": \"center\",\n                marginTop: `${styles.global.spacing}px`,\n                marginBottom: `${10 + styles.global.spacing}px`\n              }}>\n                <Button type=\"default\" onClick={this.openInstructions}>Example Responses</Button>\n              </div>\n              {this.state.flag ?\n                this.state.data.slice(this.state.current - 1, this.state.current).map((item, i) => (\n                  <div>\n                    <p style={styles.utterance} onClick={this.SelectText}>{item.sentence}</p>\n                    {labels.map((label, j) => (\n                      <Button type=\"primary\" style={{ \"marginLeft\": \"10px\" }}\n                        onClick={() => this.clickEntity(label)}><SelectOutlined />{label}</Button>\n                    ))}\n                  </div>\n                ))\n                :\n                null\n              }\n            </div>\n\n            <div title=\"Annotations\" style={{ \"marginTop\": `${20 + styles.global.spacing}px` }}>\n              <Table dataSource={this.state.Orgs} columns={columns} size=\"small\" pagination={false}\n                style={styles.answer} />\n            </div>\n            <div style={{ \"backgroundColor\": \"#C1E7F8\" }}>\n              <FormItem style={{ \"textAlign\": \"center\" }}\n                wrapperCol={{ span: 12, offset: 6 }}\n              >\n                <p style={{ \"textAlign\": \"center\", \"fontSize\": 15, \"color\": \"black\" }}>You will get the code after you finish\n                  everything</p>\n                {current < this.state.numofhit ?\n                  <Button type=\"primary\" htmlType=\"submit\">Next {current}/{this.state.numofhit}</Button>\n                  :\n                  <>\n                    {showFeedbackQuestion(this.state.hasFeedbackQuestion, getFieldDecorator)}\n                    <div style={{ \"margin-top\": `${-20 + styles.global.spacing}px` }}>\n                      <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n                    </div>\n                  </>\n                }\n              </FormItem>\n            </div>\n          </Collapse.Panel>\n        </Collapse>\n      </Form>\n\n    </div>\n\n  }\n}\n\n\n\nexport default Form.create()(WorkerSequence);\n","import React from \"react\";\nimport { Button, Collapse, Form, Modal, Radio, Select, Table } from 'antd';\nimport { ConsentForm } from \"./AgreeModal\";\nimport { serverUrl } from \"../../configs\";\nimport queryString from 'query-string';\nimport { lists2Questions, addKeys } from \"../requesters/template/QuestionList.js\"\nimport QuestionList, { Markdown } from \"./QuestionList.js\"\nimport { _renderExamples } from \"./WorkerInteractive.js\"\nimport { showFeedbackQuestion } from \"./QuestionList.js\";\nimport { getStyle } from './style.js';\n\n\nconst confirm = Modal.confirm;\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\n\nfunction getQuestion(t, id) {\n  console.log(serverUrl)\n  fetch(serverUrl + '/api/worker/quality/' + id)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      if (json.err !== undefined) {\n        Modal.error({ content: json.err });\n        return;\n      }\n      let context = [];\n      let response = [];\n\n      json.quality_data.forEach(function (data, index) {\n        context.push(data.context);\n        response.push(data.response);\n      })\n\n      let questionSurveys;\n      let questionFeedbacks;\n      let questionSystems;\n      // Workaround: json.questionSurveys should not be undefined.\n      if (json.questionSurveys === undefined) {\n        questionSurveys = lists2Questions(\n          json.pollquestion,\n          json.typeofpoll,\n          json.radio,\n          json.example,\n          json.counterexample\n        );\n      } else {\n        questionSurveys = addKeys(json.questionSurveys);\n      }\n      // Workaround: json.questionFeedbacks should not be undefined.\n      if (json.questionFeedbacks === undefined) {\n        questionFeedbacks = lists2Questions(\n          json.feedback || [],\n          json.feedbackType || [],\n          json.feedbackradio || []\n        );\n      } else {\n        questionFeedbacks = addKeys(json.questionFeedbacks);\n      }\n      console.log(json.quality_data)\n\n      t.setState({\n        data: json.quality_data,\n        context: context,\n        response: response,\n        flag: json.flag,\n        numofhit: json.quality_data.length,\n        generic_introduction: json.generic_introduction,\n        generic_instructions: json.generic_instructions,\n        time: json.time,\n        payment: json.payment,\n        consent: json.consent[1],\n        questionSurveys: questionSurveys,\n        questionFeedbacks: questionFeedbacks,\n        questionSystems: questionSystems,\n        requirements: addKeys(json.requirements || []),\n        hasFeedbackQuestion: json.hasFeedbackQuestion,\n        style: json.style,\n        enableMarkdown: json.enableMarkdown\n      });\n    });\n}\n\nfunction SubmitFromUser(t, v) {\n  fetch(serverUrl + '/api/save/worker/quality/' + t.state.userID, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      \"data\": t.state.data,\n      \"userID\": t.state.userID,\n      \"submissiontime\": Date.now(),\n      \"Result\": v,\n      \"mid\": t.state.MID,\n      \"ID\": t.state.ID,\n      \"times\": v.times\n    })\n  })\n    .then(function (response) {\n      return response.json();\n    });\n}\n\n\nclass WorkerQuality extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prev: 0,\n      isSubmit: false,\n      isdone: false,\n      userID: \"\",\n      visible: false,\n      current: 1,\n      context: [],\n      response: [],\n      order: [],\n      flag: false,\n      isShow: false,\n      MID: \"\",\n      ID: \"\",\n      sent: [],\n      feedback: [],\n      questions: [],\n      times: [],\n      responses: [],\n      consent: \"\",\n      radios: [],\n      feedbackradio: [],\n      activeKey: ['1', '2']\n    };\n  }\n\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n    let mid = \"MID\";\n    let ID = \"5ab1e12c9c1ad4743a3fb1d6\";\n    let time = Date.now();\n    if (params.MID) {\n      mid = params.MID;\n    }\n    if (params.ID) {\n      ID = params.ID;\n    }\n\n    this.setState({ userID: time });\n    this.setState({ MID: mid });\n    this.setState({ ID: ID });\n    this.setState({ prev: time });\n    getQuestion(this, ID);\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let time = Date.now();\n\n    let responses = {};\n    let feedback = {};\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        Object.keys(values).forEach(function (data) {\n          if (data.includes(\"FeedbackOpen|||\")) {\n            feedback[data] = values[data]\n          }\n          else {\n            responses[data] = values[data]\n          }\n        })\n\n        this.state.times.push(time - this.state.prev);\n        this.state.responses.push(responses);\n\n        if (this.state.current < this.state.numofhit) {\n          this.props.form.resetFields();\n          this.setState({ current: this.state.current + 1 });\n        }\n        else {\n          SubmitFromUser(this, { \"responses\": this.state.responses, \"feedback\": feedback, \"times\": this.state.times })\n          confirm({\n            title: 'Thank you for submission',\n            content: 'Your survey code: ' + this.state.userID,\n            onOk() {\n            },\n            onCancel() {\n            },\n          });\n        }\n      }\n      else {\n        confirm({\n          content: 'Please answer all the questions',\n          onOk() {\n          },\n          onCancel() {\n          },\n        });\n      }\n    })\n  }\n\n  changeTab = activeKey => {\n    /* if (activeKey.includes(\"3\")){\n     *   this.setState({\n     *     time: Date.now()\n     *   })\n     * } */\n    this.setState({\n      activeKey: activeKey\n    })\n  }\n\n  openInstructions = () => {\n    if (!(this.state.activeKey.includes(\"2\"))) {\n      let x = this.state.activeKey;\n      x.push(\"2\");\n      this.setState({\n        activeKey: x\n      })\n    }\n  }\n\n  render() {\n    const { current } = this.state;\n\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout2 = {\n      labelCol: { span: 10 },\n      wrapperCol: { span: 7 },\n      colon: false\n    };\n    const formItemLayout = {\n      wrapperCol: { span: 10 },\n      colon: false\n    }\n\n    const radioStyle = {\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n\n    const likerts = ['1 Strongly Disagree', '', '', '', '5 Strongly Agree']\n    /* Give default values to styles in case they are not set. */\n    let styles = getStyle(this.state.style);\n\n    return <div style={styles.global}>\n      <Form onSubmit={this.handleSubmit} style={{ \"marginBottom\": 0.6 }}>\n        <Collapse defaultActiveKey={['1', '2']}\n          activeKey={this.state.activeKey} onChange={this.changeTab}>\n          <Collapse.Panel header=\"Background\" key=\"1\" style={styles.tabTitle} >\n            <p style={styles.background}>\n              <Markdown enableMarkdown={this.state.enableMarkdown}>\n                {this.state.generic_introduction}\n              </Markdown>\n            </p>\n            <ConsentForm consent={this.state.consent} checkboxes={this.state.requirements} />\n            {/* <AnonymityNotice />               */}\n          </Collapse.Panel>\n          <Collapse.Panel header=\"Instructions\" key=\"2\"\n            style={styles.tabTitle}>\n            <div style={styles.instruction}>\n              {this.state.enableMarkdown ?\n                <Markdown enableMarkdown={this.state.enableMarkdown}>\n                  {this.state.generic_instructions}\n                </Markdown> : <b>{this.state.generic_instructions}</b>\n              }\n            </div>\n            <span style={{\n              ...styles.instruction,\n              \"margin-top\": `${-8 + styles.global.spacing}px`,\n              \"margin-bottom\": `${styles.global.spacing}px`,\n              fontSize: styles.instruction.fontSize - 2\n            }}>\n              We expect this HIT will take <b>{this.state.time} minute(s)</b> and we will pay <b>${this.state.payment}</b>.\n                                                                                                          </span>\n            {\n              showExamples(\n                this.state.questionSurveys,\n                styles,\n                { ...styles.example, \"fontSize\": styles.example.fontSize + 4 }\n              )\n            }\n\n          </Collapse.Panel>\n\n          <Collapse.Panel header=\"Quality Questions\" key=\"3\" style={styles.tabTitle}>\n            {!this.state.activeKey.includes(\"2\") ?\n              <div style={{ \"textAlign\": \"center\" }}>\n                <Button type=\"default\" onClick={this.openInstructions}>Example Responses</Button>\n              </div> : null}\n            <div title=\"quality questions\">\n              <p style={{ \"textAlign\": \"center\", \"margin-top\": `${styles.global.spacing}px` }}>\n                <div style={{ \"textAlign\": \"center\", \"fontSize\": 18 }}>\n                  <b>\"Answer the questions on the right about the context and response on the left.\"</b>\n                </div>\n              </p>\n              <div style={{ \"display\": \"inline-block\", \"width\": \"50%\", \"padding-left\": \"40px\", \"padding-right\": \"10px\", \"vertical-align\": \"top\", \"margin-top\": `${-15 + styles.global.spacing}px` }}>\n                <div>\n                  <p style={{\n                    \"fontSize\": styles.context.fontSize + 6,\n                    \"textAlign\": styles.context.textAlign,\n                    \"fontWeight\": \"bold\", \"margin-bottom\": \"0px\"\n                  }}>\n                    Context\n            </p>\n                </div>\n                <div>\n                  {this.state.flag ?\n                    this.state.context[this.state.current - 1] ?\n                      this.state.context[this.state.current - 1].map((item, i) => (\n                        <p style={styles.context}>\n                          {item.turn}. {item.utterance}\n                        </p>\n                      ))\n                      : null : null\n                  }\n                </div>\n                <div>\n                  <span style={{\n                    \"fontSize\": styles.response.fontSize + 6,\n                    \"textAlign\": styles.response.textAlign,\n                    \"fontWeight\": \"bold\",\n                    \"margin-bottom\": `${styles.global.spacing}px`\n                  }}>\n                    Response\n            </span>\n                </div>\n                <div>\n                  {this.state.flag ?\n                    this.state.response[this.state.current - 1] ?\n                      <div>\n                        <p style={styles.response}>{this.state.response[this.state.current - 1]}</p>\n                      </div>\n                      : null : null\n                  }\n                </div>\n              </div>\n\n              <div style={{ \"display\": \"inline-block\", \"width\": \"50%\", \"padding-right\": \"40px\", \"padding-left\": \"10px\", \"vertical-align\": \"top\", \"margin-top\": `${-15 + styles.global.spacing}px`, ...styles.question }}>\n                { /* Survey questions. */}\n                <QuestionList\n                  getFieldDecorator={getFieldDecorator}\n                  questions={this.state.questionSurveys}\n                  title=\"Questions\"\n                />\n              </div>\n\n            </div>\n\n            <div style={{ \"backgroundColor\": \"#C1E7F8\" }}>\n              <FormItem style={{ \"textAlign\": \"center\" }}\n                wrapperCol={{ span: 12, offset: 6 }}>\n                {current < this.state.numofhit ?\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Next {current}/{this.state.numofhit}\n                  </Button>\n                  : showFeedbackQuestion(this.state.hasFeedbackQuestion, getFieldDecorator)\n                }\n              </FormItem>\n            </div>\n            {current >= this.state.numofhit ?\n              <div style={{ \"text-align\": \"center\", \"margin-top\": `${-20 + styles.global.spacing}px`, \"margin-bottom\": \"-10px\" }}>\n                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n              </div> : null}\n          </Collapse.Panel>\n        </Collapse>\n      </Form>\n\n    </div>\n\n  }\n}\n\nfunction showExamples(questions, styles, titleStyle) {\n  const columns_example = [{\n    title: 'Question',\n    dataIndex: 'title',\n  }, {\n    title: 'An Example Response',\n    dataIndex: 'examples',\n    key: 'examples',\n    render: _renderExamples\n  }, {\n    title: 'A Counterexample Response',\n    dataIndex: 'counterexamples',\n    key: 'counterexamples',\n    render: _renderExamples\n  }];\n\n  const dsExamples = (questions || []).filter(\n    q => (q.examples || []).length > 0 || (q.counterexamples || []).length > 0\n  );\n  if (dsExamples.length === 0) {\n    return null;\n  } else {\n    return (<>\n      <div style={titleStyle}>\n        <b>Examples</b>\n      </div>\n      <Table rowKey=\"sentid\"\n        dataSource={dsExamples}\n        columns={columns_example}\n        size=\"small\"\n        pagination={{ hideOnSinglePage: true }}\n        style={styles.example} />\n    </>);\n  }\n}\n\nexport default Form.create()(WorkerQuality)\nexport { showExamples };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { AntDesignOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { Motion, spring } from \"react-motion\";\n\nclass Help extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n    };\n  }\n\n  render() {\n    return (\n      <Motion style={{ height: spring(this.state.open ? 200 : 0) }}>\n        {({ height }) => (\n          <div className=\"help\" style={{ height: height + 54 }}>\n            {height > 0 ? (\n              <div className=\"helpText\">{this.props.text}</div>\n            ) : null}\n            <div className=\"helpHeader\" onClick={this.toggleOpen.bind(this)}>\n              <span className=\"helpTitle\">Help Page</span>\n              <div\n                className=\"helpIcon\"\n                style={{ transform: `rotate(${height / 2}deg)` }}\n              >\n                <DownOutlined />\n              </div>\n            </div>\n          </div>\n        )}\n      </Motion>\n    );\n  }\n\n  toggleOpen() {\n    this.setState({\n      open: !this.state.open,\n    });\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    text: state.help,\n  };\n}\n\nexport default connect(mapStateToProps)(Help);\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport { sendFeedback } from '../../actions/messageActions'\n\nclass Review extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      up: false,\n      down: false\n    }\n  }\n\n  render() {\n    return <div className=\"review\">\n      <div\n        className=\"reviewButton\"\n        onClick={this.thumbUp.bind(this)}\n      >\n        <ThumbUpIcon color={this.state.up ? \"#0097e6\" : \"#353b48\"} />\n      </div>\n\n      <div\n        className=\"reviewButton\"\n        onClick={this.thumbDown.bind(this)}\n      >\n        <ThumbDownIcon color={this.state.down ? \"#0097e6\" : \"#353b48\"} />\n      </div>\n    </div>\n  }\n\n  thumbUp() {\n    if (this.state.up) {\n      this.props.sendFeedback(this.props.text, Date.now(), \"none\")\n    }\n    else {\n      this.props.sendFeedback(this.props.text, Date.now(), \"thumbs_up\")\n    }\n    this.setState({\n      up: !this.state.up,\n      down: false\n    })\n  }\n\n  thumbDown() {\n    if (this.state.down) {\n      this.props.sendFeedback(this.props.text, Date.now(), \"none\")\n    }\n    else {\n      this.props.sendFeedback(this.props.text, Date.now(), \"thumbs_down\")\n    }\n    this.setState({\n      up: false,\n      down: !this.state.down\n    })\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return state.messages[props.index]\n}\n\nconst mapDispatchToProps = {\n  sendFeedback\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Review)\n","import React from 'react'\nimport {connect} from 'react-redux'\n\nimport Review from './Review';\n\nclass Message extends React.Component {\n  render() {\n    return <div className=\"messageContainer\" style={{...this.props.style}}>\n      <div\n          className={\n            (this.props.received ? \"received\" : \"sent\") + \" message\"\n          }>\n        {\n          this.props.text.split('<p>').map((turn) =>\n              <span className=\"messageText\">{\n                <p>{turn}</p>\n              }</span>)\n        }\n      </div>\n      {/* sends feedback during the course of the conversation, but not implemented */}\n      {/* {this.props.received ? <Review index={this.props.index}/> : null} */}\n    </div>\n  }\n}\n\nfunction mapStateToProps(state, props) {\n  return state.messages[props.index];\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Message)\n\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {spring, TransitionMotion} from 'react-motion';\n\nimport Message from './Message';\n\nclass Messages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 0,\n    }\n  }\n\n  render() {\n    return <TransitionMotion\n        willEnter={this.willEnter}\n        styles={this.props.messages.map((index) => ({\n              key: index,\n              data: index,\n              style: {y: spring(0)}\n            })\n        )}\n    >\n      {(messages) => {\n        return <div className=\"messages\">\n          {messages.map((m) => <Message key={m.key} index={m.data}\n                                        style={{transform: `translate(0px, ${m.style.y}px)`}}/>)}\n          <div style={{minHeight: 9}}/>\n        </div>\n      }\n      }\n    </TransitionMotion>\n  }\n\n  willEnter() {\n    return {y: 72}\n  }\n\n  componentDidMount() {\n    this.updateScroll();\n  }\n\n  componentDidUpdate() {\n    this.updateScroll();\n  }\n\n  updateScroll() {\n    window.requestAnimationFrame((() => {\n      const scroll = this.scroll;\n      if (scroll !== undefined) {\n        scroll.scrollTop = scroll.scrollHeight;\n      }\n    }))\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    messages: state.messages.map((_, i) => i).reverse(),\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages)\n","import React from 'react'\nimport {connect} from 'react-redux'\n\nimport {sendMessage} from '../../actions/messageActions';\n\nclass TextInput extends React.Component {\n  render() {\n    return <div className=\"textInput\">\n      <input\n          style={{height: \"40px\", \"marginLeft\": \"20px\"}}\n          type=\"text\"\n          placeholder=\"Type message here\"\n          onKeyPress={this.handleKeyPress.bind(this)}\n      />\n    </div>\n  }\n\n  handleKeyPress(e) {\n    if (e.key === 'Enter' && e.target.value !== '') {\n      this.props.onEnter(e.target.value, Date.now())\n      e.target.value = \"\";\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {}\n}\n\nconst mapDispatchToProps = {\n  onEnter: sendMessage,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TextInput)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport MicIcon from '@material-ui/icons/Mic';\nimport { cancelMicrophone, startMicrophone } from '../../actions/microphoneActions';\n\nclass Microphone extends React.Component {\n  render() {\n    return <div\n      style={this.props.mode === \"speech\" ? {\n        width: 72, height: 72, borderRadius: 36,\n      } : null}\n      className={\"microphone\" + (this.props.listening ? \" listening\" : \"\")}\n      onClick={this.onClick.bind(this)}\n    >\n      <MicIcon\n        size={this.props.mode === \"speech\" ? \"medium\" : \"small\"}\n        color={this.props.listening ? \"#e84118\" : \"white\"}\n      />\n    </div>\n  }\n\n  onClick() {\n    if (this.props.listening) {\n      this.props.cancelMicrophone();\n    }\n    else {\n      this.props.startMicrophone();\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    listening: state.listening,\n    mode: state.mode\n  }\n}\n\nconst mapDispatchToProps = {\n  startMicrophone,\n  cancelMicrophone\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Microphone)\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Help from \"./Help\";\nimport Messages from \"./Messages\";\nimport TextInput from \"./TextInput\";\nimport Microphone from \"./Microphone\";\n\nclass Chat extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        {/* <Help/> */}\n        <Messages />\n        <div className=\"bottom\">\n          {this.props.mode !== \"text\" ? <Microphone /> : null}\n          {this.props.mode !== \"speech\" ? <TextInput /> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProp(state) {\n  return {\n    mode: state.mode,\n  };\n}\n\nexport default connect(mapStateToProp)(Chat);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport registerServiceWorker from './registerServiceWorker';\nimport './styles/index.css';\nimport './styles/index.less';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport configureStore from './store/configureStore.js'\nimport Layout from './components/Layout';\nimport 'antd/dist/antd.css'\nimport WorkerInteractive from './components/workers/WorkerInteractive.js';\nimport WorkerCategory from './components/workers/WorkerCategory.js';\nimport WorkerSequence from './components/workers/WorkerSequence.js';\nimport WorkerQuality from './components/workers/WorkerQuality.js';\nimport Chat from './components/chat/Chat.js';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-63929316-3');\nReactGA.pageview(window.location.pathname + window.location.search);\n\n\nconst store = configureStore();\n\nstore.runSaga();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router\n      getUserConfirmation={(message, callback) => {\n        callback(window.confirm(message))\n      }}\n    >\n      <Switch>\n        <Route path=\"/worker_interactive\" component={WorkerInteractive}/>\n        <Route path=\"/worker_category\" component={WorkerCategory}/>\n        <Route path=\"/worker_sequence\" component={WorkerSequence}/>\n        <Route path=\"/worker_quality\" component={WorkerQuality}/>\n        <Route path=\"/chat\" component={Chat}/>\n        <Route path=\"/\" component={Layout}/>\n      </Switch>\n    </Router>\n\n  </Provider>,\n  document.getElementById('root'));\n\nregisterServiceWorker();\n","import randomSeed from 'random-seed'\n\nconst TODAY = new Date().toDateString()\n\nconst colors = [\n  { name: 'blue',    bg: '#0074d9', },\n  { name: 'navy',    bg: '#001f3f', },\n  { name: 'lime',    bg: '#01ff70', },\n  { name: 'teal',    bg: '#39cccc', },\n  { name: 'olive',   bg: '#3d9970', },\n  { name: 'fuchsia', bg: '#f012be', },\n  { name: 'red',     bg: '#ff4136', },\n  { name: 'green',   bg: '#2ecc40', },\n  { name: 'orange',  bg: '#ff851b', },\n  { name: 'maroon',  bg: '#85144b', },\n  { name: 'purple',  bg: '#b10dc9', },\n  { name: 'yellow',  bg: '#ffdc00', },\n  { name: 'aqua',    bg: '#7fdbff', },\n]\n\nconst unknownColor = { name: 'grey', bg: '#aaaaaa', }\n\nexport default function getColor(no) {\n  const rand = randomSeed.create(TODAY)\n  const startIndex = rand(colors.length)\n  const color = no < 0\n      ? unknownColor\n      : colors[(startIndex + no) % colors.length]\n\n  return {\n    backgroundColor: color.bg,\n    opacity: 0.3,\n  }\n}\n\nglobal.getColor = getColor\n"],"sourceRoot":""}